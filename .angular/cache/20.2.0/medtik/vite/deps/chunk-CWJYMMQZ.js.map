{
  "version": 3,
  "sources": ["../../../../../../node_modules/@angular/cdk/fesm2022/unique-selection-dispatcher.mjs", "../../../../../../node_modules/@angular/cdk/fesm2022/dispose-view-repeater-strategy.mjs", "../../../../../../node_modules/@angular/cdk/fesm2022/selection-model.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\n/**\r\n * Class to coordinate unique selection based on name.\r\n * Intended to be consumed as an Angular service.\r\n * This service is needed because native radio change events are only fired on the item currently\r\n * being selected, and we still need to uncheck the previous selection.\r\n *\r\n * This service does not *store* any IDs and names because they may change at any time, so it is\r\n * less error-prone if they are simply passed through when the events occur.\r\n */\nclass UniqueSelectionDispatcher {\n  _listeners = [];\n  /**\r\n   * Notify other items that selection for the given name has been set.\r\n   * @param id ID of the item.\r\n   * @param name Name of the item.\r\n   */\n  notify(id, name) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n  /**\r\n   * Listen for future changes to item selection.\r\n   * @return Function used to deregister listener\r\n   */\n  listen(listener) {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter(registered => {\n        return listener !== registered;\n      });\n    };\n  }\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n  static ɵfac = function UniqueSelectionDispatcher_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || UniqueSelectionDispatcher)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UniqueSelectionDispatcher,\n    factory: UniqueSelectionDispatcher.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nexport { UniqueSelectionDispatcher };\n", "import { _ViewRepeaterOperation } from './recycle-view-repeater-strategy.mjs';\r\n\r\n/**\r\n * A repeater that destroys views when they are removed from a\r\n * `ViewContainerRef`. When new items are inserted into the container,\r\n * the repeater will always construct a new embedded view for each item.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\r\nclass _DisposeViewRepeaterStrategy {\r\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\r\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\r\n            let view;\r\n            let operation;\r\n            if (record.previousIndex == null) {\r\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\r\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\r\n                operation = _ViewRepeaterOperation.INSERTED;\r\n            }\r\n            else if (currentIndex == null) {\r\n                viewContainerRef.remove(adjustedPreviousIndex);\r\n                operation = _ViewRepeaterOperation.REMOVED;\r\n            }\r\n            else {\r\n                view = viewContainerRef.get(adjustedPreviousIndex);\r\n                viewContainerRef.move(view, currentIndex);\r\n                operation = _ViewRepeaterOperation.MOVED;\r\n            }\r\n            if (itemViewChanged) {\r\n                itemViewChanged({\r\n                    context: view?.context,\r\n                    operation,\r\n                    record,\r\n                });\r\n            }\r\n        });\r\n    }\r\n    detach() { }\r\n}\r\n\r\nexport { _DisposeViewRepeaterStrategy };\r\n\r\n", "import { Subject } from 'rxjs';\r\n\r\n/**\r\n * Class to be used to power selecting one or more options from a list.\r\n */\r\nclass SelectionModel {\r\n    _multiple;\r\n    _emitChanges;\r\n    compareWith;\r\n    /** Currently-selected values. */\r\n    _selection = new Set();\r\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\r\n    _deselectedToEmit = [];\r\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\r\n    _selectedToEmit = [];\r\n    /** Cache for the array value of the selected items. */\r\n    _selected;\r\n    /** Selected values. */\r\n    get selected() {\r\n        if (!this._selected) {\r\n            this._selected = Array.from(this._selection.values());\r\n        }\r\n        return this._selected;\r\n    }\r\n    /** Event emitted when the value has changed. */\r\n    changed = new Subject();\r\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\r\n        this._multiple = _multiple;\r\n        this._emitChanges = _emitChanges;\r\n        this.compareWith = compareWith;\r\n        if (initiallySelectedValues && initiallySelectedValues.length) {\r\n            if (_multiple) {\r\n                initiallySelectedValues.forEach(value => this._markSelected(value));\r\n            }\r\n            else {\r\n                this._markSelected(initiallySelectedValues[0]);\r\n            }\r\n            // Clear the array in order to avoid firing the change event for preselected values.\r\n            this._selectedToEmit.length = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Selects a value or an array of values.\r\n     * @param values The values to select\r\n     * @return Whether the selection changed as a result of this call\r\n     */\r\n    select(...values) {\r\n        this._verifyValueAssignment(values);\r\n        values.forEach(value => this._markSelected(value));\r\n        const changed = this._hasQueuedChanges();\r\n        this._emitChangeEvent();\r\n        return changed;\r\n    }\r\n    /**\r\n     * Deselects a value or an array of values.\r\n     * @param values The values to deselect\r\n     * @return Whether the selection changed as a result of this call\r\n     */\r\n    deselect(...values) {\r\n        this._verifyValueAssignment(values);\r\n        values.forEach(value => this._unmarkSelected(value));\r\n        const changed = this._hasQueuedChanges();\r\n        this._emitChangeEvent();\r\n        return changed;\r\n    }\r\n    /**\r\n     * Sets the selected values\r\n     * @param values The new selected values\r\n     * @return Whether the selection changed as a result of this call\r\n     */\r\n    setSelection(...values) {\r\n        this._verifyValueAssignment(values);\r\n        const oldValues = this.selected;\r\n        const newSelectedSet = new Set(values.map(value => this._getConcreteValue(value)));\r\n        values.forEach(value => this._markSelected(value));\r\n        oldValues\r\n            .filter(value => !newSelectedSet.has(this._getConcreteValue(value, newSelectedSet)))\r\n            .forEach(value => this._unmarkSelected(value));\r\n        const changed = this._hasQueuedChanges();\r\n        this._emitChangeEvent();\r\n        return changed;\r\n    }\r\n    /**\r\n     * Toggles a value between selected and deselected.\r\n     * @param value The value to toggle\r\n     * @return Whether the selection changed as a result of this call\r\n     */\r\n    toggle(value) {\r\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\r\n    }\r\n    /**\r\n     * Clears all of the selected values.\r\n     * @param flushEvent Whether to flush the changes in an event.\r\n     *   If false, the changes to the selection will be flushed along with the next event.\r\n     * @return Whether the selection changed as a result of this call\r\n     */\r\n    clear(flushEvent = true) {\r\n        this._unmarkAll();\r\n        const changed = this._hasQueuedChanges();\r\n        if (flushEvent) {\r\n            this._emitChangeEvent();\r\n        }\r\n        return changed;\r\n    }\r\n    /**\r\n     * Determines whether a value is selected.\r\n     */\r\n    isSelected(value) {\r\n        return this._selection.has(this._getConcreteValue(value));\r\n    }\r\n    /**\r\n     * Determines whether the model does not have a value.\r\n     */\r\n    isEmpty() {\r\n        return this._selection.size === 0;\r\n    }\r\n    /**\r\n     * Determines whether the model has a value.\r\n     */\r\n    hasValue() {\r\n        return !this.isEmpty();\r\n    }\r\n    /**\r\n     * Sorts the selected values based on a predicate function.\r\n     */\r\n    sort(predicate) {\r\n        if (this._multiple && this.selected) {\r\n            this._selected.sort(predicate);\r\n        }\r\n    }\r\n    /**\r\n     * Gets whether multiple values can be selected.\r\n     */\r\n    isMultipleSelection() {\r\n        return this._multiple;\r\n    }\r\n    /** Emits a change event and clears the records of selected and deselected values. */\r\n    _emitChangeEvent() {\r\n        // Clear the selected values so they can be re-cached.\r\n        this._selected = null;\r\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\r\n            this.changed.next({\r\n                source: this,\r\n                added: this._selectedToEmit,\r\n                removed: this._deselectedToEmit,\r\n            });\r\n            this._deselectedToEmit = [];\r\n            this._selectedToEmit = [];\r\n        }\r\n    }\r\n    /** Selects a value. */\r\n    _markSelected(value) {\r\n        value = this._getConcreteValue(value);\r\n        if (!this.isSelected(value)) {\r\n            if (!this._multiple) {\r\n                this._unmarkAll();\r\n            }\r\n            if (!this.isSelected(value)) {\r\n                this._selection.add(value);\r\n            }\r\n            if (this._emitChanges) {\r\n                this._selectedToEmit.push(value);\r\n            }\r\n        }\r\n    }\r\n    /** Deselects a value. */\r\n    _unmarkSelected(value) {\r\n        value = this._getConcreteValue(value);\r\n        if (this.isSelected(value)) {\r\n            this._selection.delete(value);\r\n            if (this._emitChanges) {\r\n                this._deselectedToEmit.push(value);\r\n            }\r\n        }\r\n    }\r\n    /** Clears out the selected values. */\r\n    _unmarkAll() {\r\n        if (!this.isEmpty()) {\r\n            this._selection.forEach(value => this._unmarkSelected(value));\r\n        }\r\n    }\r\n    /**\r\n     * Verifies the value assignment and throws an error if the specified value array is\r\n     * including multiple values while the selection model is not supporting multiple values.\r\n     */\r\n    _verifyValueAssignment(values) {\r\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getMultipleValuesInSingleSelectionError();\r\n        }\r\n    }\r\n    /** Whether there are queued up change to be emitted. */\r\n    _hasQueuedChanges() {\r\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\r\n    }\r\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\r\n    _getConcreteValue(inputValue, selection) {\r\n        if (!this.compareWith) {\r\n            return inputValue;\r\n        }\r\n        else {\r\n            selection = selection ?? this._selection;\r\n            for (let selectedValue of selection) {\r\n                if (this.compareWith(inputValue, selectedValue)) {\r\n                    return selectedValue;\r\n                }\r\n            }\r\n            return inputValue;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns an error that reports that multiple values are passed into a selection model\r\n * with a single value.\r\n * @docs-private\r\n */\r\nfunction getMultipleValuesInSingleSelectionError() {\r\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\r\n}\r\n\r\nexport { SelectionModel, getMultipleValuesInSingleSelectionError };\r\n\r\n"],
  "mappings": ";;;;;;;;;;;;;AAYA,IAAM,4BAAN,MAAM,2BAA0B;AAAA,EAC9B,aAAa,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMd,OAAO,IAAI,MAAM;AACf,aAAS,YAAY,KAAK,YAAY;AACpC,eAAS,IAAI,IAAI;AAAA,IACnB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,UAAU;AACf,SAAK,WAAW,KAAK,QAAQ;AAC7B,WAAO,MAAM;AACX,WAAK,aAAa,KAAK,WAAW,OAAO,gBAAc;AACrD,eAAO,aAAa;AAAA,MACtB,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,cAAc;AACZ,SAAK,aAAa,CAAC;AAAA,EACrB;AAAA,EACA,OAAO,OAAO,SAAS,kCAAkC,mBAAmB;AAC1E,WAAO,KAAK,qBAAqB,4BAA2B;AAAA,EAC9D;AAAA,EACA,OAAO,QAA0B,mBAAmB;AAAA,IAClD,OAAO;AAAA,IACP,SAAS,2BAA0B;AAAA,IACnC,YAAY;AAAA,EACd,CAAC;AACH;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,2BAA2B,CAAC;AAAA,IAClG,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,YAAY;AAAA,IACd,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;;;AC5CH,IAAM,+BAAN,MAAmC;AAAA,EAC/B,aAAa,SAAS,kBAAkB,oBAAoB,mBAAmB,iBAAiB;AAC5F,YAAQ,iBAAiB,CAAC,QAAQ,uBAAuB,iBAAiB;AACtE,UAAI;AACJ,UAAI;AACJ,UAAI,OAAO,iBAAiB,MAAM;AAC9B,cAAM,gBAAgB,mBAAmB,QAAQ,uBAAuB,YAAY;AACpF,eAAO,iBAAiB,mBAAmB,cAAc,aAAa,cAAc,SAAS,cAAc,KAAK;AAChH,oBAAY,uBAAuB;AAAA,MACvC,WACS,gBAAgB,MAAM;AAC3B,yBAAiB,OAAO,qBAAqB;AAC7C,oBAAY,uBAAuB;AAAA,MACvC,OACK;AACD,eAAO,iBAAiB,IAAI,qBAAqB;AACjD,yBAAiB,KAAK,MAAM,YAAY;AACxC,oBAAY,uBAAuB;AAAA,MACvC;AACA,UAAI,iBAAiB;AACjB,wBAAgB;AAAA,UACZ,SAAS,MAAM;AAAA,UACf;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,SAAS;AAAA,EAAE;AACf;;;ACnCA,IAAM,iBAAN,MAAqB;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAEA,aAAa,oBAAI,IAAI;AAAA;AAAA,EAErB,oBAAoB,CAAC;AAAA;AAAA,EAErB,kBAAkB,CAAC;AAAA;AAAA,EAEnB;AAAA;AAAA,EAEA,IAAI,WAAW;AACX,QAAI,CAAC,KAAK,WAAW;AACjB,WAAK,YAAY,MAAM,KAAK,KAAK,WAAW,OAAO,CAAC;AAAA,IACxD;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,UAAU,IAAI,QAAQ;AAAA,EACtB,YAAY,YAAY,OAAO,yBAAyB,eAAe,MAAM,aAAa;AACtF,SAAK,YAAY;AACjB,SAAK,eAAe;AACpB,SAAK,cAAc;AACnB,QAAI,2BAA2B,wBAAwB,QAAQ;AAC3D,UAAI,WAAW;AACX,gCAAwB,QAAQ,WAAS,KAAK,cAAc,KAAK,CAAC;AAAA,MACtE,OACK;AACD,aAAK,cAAc,wBAAwB,CAAC,CAAC;AAAA,MACjD;AAEA,WAAK,gBAAgB,SAAS;AAAA,IAClC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,QAAQ;AACd,SAAK,uBAAuB,MAAM;AAClC,WAAO,QAAQ,WAAS,KAAK,cAAc,KAAK,CAAC;AACjD,UAAM,UAAU,KAAK,kBAAkB;AACvC,SAAK,iBAAiB;AACtB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,QAAQ;AAChB,SAAK,uBAAuB,MAAM;AAClC,WAAO,QAAQ,WAAS,KAAK,gBAAgB,KAAK,CAAC;AACnD,UAAM,UAAU,KAAK,kBAAkB;AACvC,SAAK,iBAAiB;AACtB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB,QAAQ;AACpB,SAAK,uBAAuB,MAAM;AAClC,UAAM,YAAY,KAAK;AACvB,UAAM,iBAAiB,IAAI,IAAI,OAAO,IAAI,WAAS,KAAK,kBAAkB,KAAK,CAAC,CAAC;AACjF,WAAO,QAAQ,WAAS,KAAK,cAAc,KAAK,CAAC;AACjD,cACK,OAAO,WAAS,CAAC,eAAe,IAAI,KAAK,kBAAkB,OAAO,cAAc,CAAC,CAAC,EAClF,QAAQ,WAAS,KAAK,gBAAgB,KAAK,CAAC;AACjD,UAAM,UAAU,KAAK,kBAAkB;AACvC,SAAK,iBAAiB;AACtB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,OAAO;AACV,WAAO,KAAK,WAAW,KAAK,IAAI,KAAK,SAAS,KAAK,IAAI,KAAK,OAAO,KAAK;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,aAAa,MAAM;AACrB,SAAK,WAAW;AAChB,UAAM,UAAU,KAAK,kBAAkB;AACvC,QAAI,YAAY;AACZ,WAAK,iBAAiB;AAAA,IAC1B;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,OAAO;AACd,WAAO,KAAK,WAAW,IAAI,KAAK,kBAAkB,KAAK,CAAC;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACN,WAAO,KAAK,WAAW,SAAS;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW;AACP,WAAO,CAAC,KAAK,QAAQ;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAIA,KAAK,WAAW;AACZ,QAAI,KAAK,aAAa,KAAK,UAAU;AACjC,WAAK,UAAU,KAAK,SAAS;AAAA,IACjC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,sBAAsB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,mBAAmB;AAEf,SAAK,YAAY;AACjB,QAAI,KAAK,gBAAgB,UAAU,KAAK,kBAAkB,QAAQ;AAC9D,WAAK,QAAQ,KAAK;AAAA,QACd,QAAQ;AAAA,QACR,OAAO,KAAK;AAAA,QACZ,SAAS,KAAK;AAAA,MAClB,CAAC;AACD,WAAK,oBAAoB,CAAC;AAC1B,WAAK,kBAAkB,CAAC;AAAA,IAC5B;AAAA,EACJ;AAAA;AAAA,EAEA,cAAc,OAAO;AACjB,YAAQ,KAAK,kBAAkB,KAAK;AACpC,QAAI,CAAC,KAAK,WAAW,KAAK,GAAG;AACzB,UAAI,CAAC,KAAK,WAAW;AACjB,aAAK,WAAW;AAAA,MACpB;AACA,UAAI,CAAC,KAAK,WAAW,KAAK,GAAG;AACzB,aAAK,WAAW,IAAI,KAAK;AAAA,MAC7B;AACA,UAAI,KAAK,cAAc;AACnB,aAAK,gBAAgB,KAAK,KAAK;AAAA,MACnC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,gBAAgB,OAAO;AACnB,YAAQ,KAAK,kBAAkB,KAAK;AACpC,QAAI,KAAK,WAAW,KAAK,GAAG;AACxB,WAAK,WAAW,OAAO,KAAK;AAC5B,UAAI,KAAK,cAAc;AACnB,aAAK,kBAAkB,KAAK,KAAK;AAAA,MACrC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,aAAa;AACT,QAAI,CAAC,KAAK,QAAQ,GAAG;AACjB,WAAK,WAAW,QAAQ,WAAS,KAAK,gBAAgB,KAAK,CAAC;AAAA,IAChE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB,QAAQ;AAC3B,QAAI,OAAO,SAAS,KAAK,CAAC,KAAK,cAAc,OAAO,cAAc,eAAe,YAAY;AACzF,YAAM,wCAAwC;AAAA,IAClD;AAAA,EACJ;AAAA;AAAA,EAEA,oBAAoB;AAChB,WAAO,CAAC,EAAE,KAAK,kBAAkB,UAAU,KAAK,gBAAgB;AAAA,EACpE;AAAA;AAAA,EAEA,kBAAkB,YAAY,WAAW;AACrC,QAAI,CAAC,KAAK,aAAa;AACnB,aAAO;AAAA,IACX,OACK;AACD,kBAAY,aAAa,KAAK;AAC9B,eAAS,iBAAiB,WAAW;AACjC,YAAI,KAAK,YAAY,YAAY,aAAa,GAAG;AAC7C,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAMA,SAAS,0CAA0C;AAC/C,SAAO,MAAM,yEAAyE;AAC1F;",
  "names": []
}
