{
  "version": 3,
  "sources": ["../../../../../../node_modules/@angular/material/fesm2022/date-formats.mjs"],
  "sourcesContent": ["import { InjectionToken, inject, LOCALE_ID } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n/** InjectionToken for datepicker that can be used to override default locale code. */\r\nconst MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {\r\n    providedIn: 'root',\r\n    factory: MAT_DATE_LOCALE_FACTORY,\r\n});\r\n/**\r\n * @docs-private\r\n * @deprecated No longer used, will be removed.\r\n * @breaking-change 21.0.0\r\n */\r\nfunction MAT_DATE_LOCALE_FACTORY() {\r\n    return inject(LOCALE_ID);\r\n}\r\nconst NOT_IMPLEMENTED = 'Method not implemented';\r\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\r\nclass DateAdapter {\r\n    /** The locale to use for all dates. */\r\n    locale;\r\n    _localeChanges = new Subject();\r\n    /** A stream that emits when the locale changes. */\r\n    localeChanges = this._localeChanges;\r\n    /**\r\n     * Sets the time of one date to the time of another.\r\n     * @param target Date whose time will be set.\r\n     * @param hours New hours to set on the date object.\r\n     * @param minutes New minutes to set on the date object.\r\n     * @param seconds New seconds to set on the date object.\r\n     */\r\n    setTime(target, hours, minutes, seconds) {\r\n        throw new Error(NOT_IMPLEMENTED);\r\n    }\r\n    /**\r\n     * Gets the hours component of the given date.\r\n     * @param date The date to extract the hours from.\r\n     */\r\n    getHours(date) {\r\n        throw new Error(NOT_IMPLEMENTED);\r\n    }\r\n    /**\r\n     * Gets the minutes component of the given date.\r\n     * @param date The date to extract the minutes from.\r\n     */\r\n    getMinutes(date) {\r\n        throw new Error(NOT_IMPLEMENTED);\r\n    }\r\n    /**\r\n     * Gets the seconds component of the given date.\r\n     * @param date The date to extract the seconds from.\r\n     */\r\n    getSeconds(date) {\r\n        throw new Error(NOT_IMPLEMENTED);\r\n    }\r\n    /**\r\n     * Parses a date with a specific time from a user-provided value.\r\n     * @param value The value to parse.\r\n     * @param parseFormat The expected format of the value being parsed\r\n     *     (type is implementation-dependent).\r\n     */\r\n    parseTime(value, parseFormat) {\r\n        throw new Error(NOT_IMPLEMENTED);\r\n    }\r\n    /**\r\n     * Adds an amount of seconds to the specified date.\r\n     * @param date Date to which to add the seconds.\r\n     * @param amount Amount of seconds to add to the date.\r\n     */\r\n    addSeconds(date, amount) {\r\n        throw new Error(NOT_IMPLEMENTED);\r\n    }\r\n    /**\r\n     * Given a potential date object, returns that same date object if it is\r\n     * a valid date, or `null` if it's not a valid date.\r\n     * @param obj The object to check.\r\n     * @returns A date or `null`.\r\n     */\r\n    getValidDateOrNull(obj) {\r\n        return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\r\n    }\r\n    /**\r\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\r\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\r\n     * string). The default implementation does not allow any deserialization, it simply checks that\r\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\r\n     * method on all of its `@Input()` properties that accept dates. It is therefore possible to\r\n     * support passing values from your backend directly to these properties by overriding this method\r\n     * to also deserialize the format used by your backend.\r\n     * @param value The value to be deserialized into a date object.\r\n     * @returns The deserialized date object, either a valid date, null if the value can be\r\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\r\n     */\r\n    deserialize(value) {\r\n        if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\r\n            return value;\r\n        }\r\n        return this.invalid();\r\n    }\r\n    /**\r\n     * Sets the locale used for all dates.\r\n     * @param locale The new locale.\r\n     */\r\n    setLocale(locale) {\r\n        this.locale = locale;\r\n        this._localeChanges.next();\r\n    }\r\n    /**\r\n     * Compares two dates.\r\n     * @param first The first date to compare.\r\n     * @param second The second date to compare.\r\n     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n     *     a number greater than 0 if the first date is later.\r\n     */\r\n    compareDate(first, second) {\r\n        return (this.getYear(first) - this.getYear(second) ||\r\n            this.getMonth(first) - this.getMonth(second) ||\r\n            this.getDate(first) - this.getDate(second));\r\n    }\r\n    /**\r\n     * Compares the time values of two dates.\r\n     * @param first First date to compare.\r\n     * @param second Second date to compare.\r\n     * @returns 0 if the times are equal, a number less than 0 if the first time is earlier,\r\n     *     a number greater than 0 if the first time is later.\r\n     */\r\n    compareTime(first, second) {\r\n        return (this.getHours(first) - this.getHours(second) ||\r\n            this.getMinutes(first) - this.getMinutes(second) ||\r\n            this.getSeconds(first) - this.getSeconds(second));\r\n    }\r\n    /**\r\n     * Checks if two dates are equal.\r\n     * @param first The first date to check.\r\n     * @param second The second date to check.\r\n     * @returns Whether the two dates are equal.\r\n     *     Null dates are considered equal to other null dates.\r\n     */\r\n    sameDate(first, second) {\r\n        if (first && second) {\r\n            let firstValid = this.isValid(first);\r\n            let secondValid = this.isValid(second);\r\n            if (firstValid && secondValid) {\r\n                return !this.compareDate(first, second);\r\n            }\r\n            return firstValid == secondValid;\r\n        }\r\n        return first == second;\r\n    }\r\n    /**\r\n     * Checks if the times of two dates are equal.\r\n     * @param first The first date to check.\r\n     * @param second The second date to check.\r\n     * @returns Whether the times of the two dates are equal.\r\n     *     Null dates are considered equal to other null dates.\r\n     */\r\n    sameTime(first, second) {\r\n        if (first && second) {\r\n            const firstValid = this.isValid(first);\r\n            const secondValid = this.isValid(second);\r\n            if (firstValid && secondValid) {\r\n                return !this.compareTime(first, second);\r\n            }\r\n            return firstValid == secondValid;\r\n        }\r\n        return first == second;\r\n    }\r\n    /**\r\n     * Clamp the given date between min and max dates.\r\n     * @param date The date to clamp.\r\n     * @param min The minimum value to allow. If null or omitted no min is enforced.\r\n     * @param max The maximum value to allow. If null or omitted no max is enforced.\r\n     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\r\n     *     otherwise `date`.\r\n     */\r\n    clampDate(date, min, max) {\r\n        if (min && this.compareDate(date, min) < 0) {\r\n            return min;\r\n        }\r\n        if (max && this.compareDate(date, max) > 0) {\r\n            return max;\r\n        }\r\n        return date;\r\n    }\r\n}\r\n\r\nconst MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');\r\n\r\nexport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY };\r\n\r\n"],
  "mappings": "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",
  "names": []
}
