===== FILE: C:\Users\ROCKET\medtik\src\app\app.config.server.ts =====

import { ApplicationConfig } from '@angular/core';
import { provideServerRendering } from '@angular/platform-server';
import { provideNoopAnimations } from '@angular/platform-browser/animations';

export const config: ApplicationConfig = {
  providers: [
    provideServerRendering(),
    provideNoopAnimations(),
  ],
};



===== FILE: C:\Users\ROCKET\medtik\src\app\app.config.ts =====

import { ApplicationConfig } from '@angular/core';
import { provideRouter, withHashLocation } from '@angular/router';
import { routes } from './app.routes';
import { provideClientHydration } from '@angular/platform-browser';
import { provideAnimationsAsync } from '@angular/platform-browser/animations/async';
import { provideAnimations } from '@angular/platform-browser/animations';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes, withHashLocation()), // 👈 enables /#/doctor, /#/patient
    provideClientHydration(),
    provideAnimationsAsync(),
  ],
};



===== FILE: C:\Users\ROCKET\medtik\src\app\app.html =====

<router-outlet></router-outlet>



===== FILE: C:\Users\ROCKET\medtik\src\app\app.routes.server.ts =====

import { RenderMode, ServerRoute } from '@angular/ssr';

export const serverRoutes: ServerRoute[] = [
  {
    path: '**',
    renderMode: RenderMode.Prerender
  }
];



===== FILE: C:\Users\ROCKET\medtik\src\app\app.routes.ts =====

import { Routes } from '@angular/router';

export const routes: Routes = [
  { path: '', redirectTo: 'auth/login', pathMatch: 'full' },

  {
    path: 'auth',
    children: [
      {
        path: 'login',
        loadComponent: () =>
          import('./features/auth/login/login').then(m => m.LoginComponent),
        title: 'Login | Medtik'
      }
    ]
  },

  // patient area (already working)
  {
    path: 'patient',
    loadChildren: () =>
      import('./features/patient/patient.routes').then(m => m.PATIENT_ROUTES)
  },

  // 👇 doctor area
  {
    path: 'doctor',
    loadChildren: () =>
      import('./features/doctor/doctor.routes').then(m => m.DOCTOR_ROUTES)
  },

  { path: '**', redirectTo: 'auth/login' }
];



===== FILE: C:\Users\ROCKET\medtik\src\app\app.scss =====



===== FILE: C:\Users\ROCKET\medtik\src\app\app.spec.ts =====

import { TestBed } from '@angular/core/testing';
import { App } from './app';

describe('App', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [App],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(App);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(App);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, medtik');
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\app.ts =====

import { Component, signal } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.html',
  styleUrl: './app.scss'
})
export class App {
  protected readonly title = signal('medtik');
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\auth\login\login.html =====

<div class="auth-shell" @flyIn>
  <div class="auth-frame">
    <!-- LEFT: hero / brand -->
    <aside class="hero-pane">
      <div class="brand">
        <img class="brand-mark" src="https://ik.imagekit.io/a2wpi1kd9/imgToUrl/image-to-url_HEow9eLbR" alt="Medtik" />
        <h1>Medtik</h1>
        <p class="tag">Care that comes to you</p>
      </div>



      <ul class="benefits">
        <li><mat-icon>military_tech</mat-icon> Best doctors in the middle east</li>
        <li><mat-icon>videocam</mat-icon> Chat, voice, or video — your choice</li>
        <li><mat-icon>payments</mat-icon> Secure, verified checkout with Paymob</li>
      </ul>
    </aside>

    <!-- RIGHT: form -->
    <main class="form-pane" @staggerIn>
      <h2>Welcome back</h2>
      <p class="sub">Sign in to manage your consultations</p>

      <form [formGroup]="form" (ngSubmit)="submit()">
        <mat-form-field appearance="outline" class="stagger">
          <mat-label>Email</mat-label>
          <input matInput type="email" formControlName="email" autocomplete="email" />
          <mat-icon matSuffix>mail</mat-icon>
          <mat-error *ngIf="form.controls.email.hasError('required')">Email is required</mat-error>
          <mat-error *ngIf="form.controls.email.hasError('email')">Enter a valid email</mat-error>
        </mat-form-field>

        <mat-form-field appearance="outline" class="stagger">
          <mat-label>Password</mat-label>
          <input matInput [type]="hide ? 'password' : 'text'" formControlName="password" autocomplete="current-password" />
          <button mat-icon-button matSuffix type="button" (click)="hide = !hide" aria-label="Toggle password">
            <mat-icon>{{ hide ? 'visibility' : 'visibility_off' }}</mat-icon>
          </button>
          <mat-error *ngIf="form.controls.password.hasError('required')">Password is required</mat-error>
          <mat-error *ngIf="form.controls.password.hasError('minlength')">Min 6 characters</mat-error>
        </mat-form-field>

        <button mat-flat-button color="primary" class="submit stagger" type="submit">Sign in</button>
      </form>

      <div class="aux stagger"><a routerLink="/auth/forgot">Forgot password?</a></div>
    </main>
  </div>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\auth\login\login.scss =====

/* page centering */
.auth-shell{
  min-height: 100svh;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: clamp(16px, 4vmin, 32px);
}

/* the frame */
.auth-frame{
  width: min(960px, 96vw);
  max-height: 88svh;
  overflow: hidden;
  display: grid;
  grid-template-columns: 1.15fr 1fr;
  border-radius: 24px;
  background:
    linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.02)),
    rgba(16,24,40,.72);
  backdrop-filter: blur(10px) saturate(120%);
  border: 1px solid rgba(255,255,255,.08);
  box-shadow: 0 24px 70px rgba(0,0,0,.5);
}

/* left pane – aurora */
.hero-pane{
  position: relative;
  padding: 28px 24px;
  border-right: 1px solid rgba(255,255,255,.06);

  /* animated aurora ribbons */
  &::before, &::after{
    content: '';
    position: absolute; inset: -20%;
    background:
      radial-gradient(40% 35% at 20% 15%, rgba(42,118,183,.28), transparent 60%),
      radial-gradient(35% 30% at 80% 10%, rgba(29,183,160,.22), transparent 60%),
      radial-gradient(45% 40% at 60% 80%, rgba(42,118,183,.16), transparent 70%);
    filter: blur(14px);
    animation: drift 16s linear infinite;
    pointer-events: none;
    z-index: 0;
  }
  &::after{ animation-duration: 22s; animation-direction: reverse; opacity: .7; }

  @keyframes drift {
    0%   { transform: translate3d(-2%, 0, 0) rotate(0deg); }
    50%  { transform: translate3d(2%, 1%, 0)  rotate(4deg); }
    100% { transform: translate3d(-2%, 0, 0) rotate(0deg); }
  }
}

/* brand block */
.brand{
  position: relative; z-index: 1;
  display: grid; place-items: center;
  gap: .35rem; margin-bottom: .75rem;
  text-align: center;
}
.brand-mark{
  width: 110px; height: 110px; object-fit: contain;
  filter: drop-shadow(0 10px 24px rgba(42,118,183,.6));
}
.brand h1{
  margin: 0; font-size: 1.45rem; letter-spacing: .3px;
  font-weight: 800; color: #e6eef6;
}
.tag{ margin: 0; color: #a7b4c5; }

/* benefits */
.benefits{
  position: relative; z-index: 1;
  list-style: none; margin: 1rem 0 0; padding: 0;
  display: grid; gap: .5rem;
}
.benefits li{
  display: flex; align-items: center; gap: .5rem;
  padding: .55rem .65rem;
  border: 1px solid rgba(255,255,255,.06);
  background: rgba(255,255,255,.02);
  border-radius: 12px;
  color: #d4dce8;
}
.benefits mat-icon{ font-size: 18px; height:18px; width:18px; color: #8fc7ff; }

/* right pane – form */
.form-pane{
  padding: 28px 20px;
  display: grid; align-content: start;
}
.form-pane h2{
  margin: .25rem 0 0; font-weight: 800;
  font-size: clamp(1.25rem, 2.2vw, 1.6rem);
  color: #e6eef6;
}
.form-pane .sub{ margin: .2rem 0 1rem; color:#a7b4c5; }
form{ display: grid; gap: .8rem; }
.submit{ width: 100%; border-radius: 12px; margin-top: .25rem; }
.aux{ display: flex; justify-content: center; margin-top: .25rem; }
.aux a{ color:#a7b4c5; text-decoration:none; }
.aux a:hover{ color:#e6eaf2; }

/* responsive: stack */
@media (max-width: 900px){
  .auth-frame{ grid-template-columns: 1fr; max-height: unset; }
  .hero-pane{ border-right: 0; border-bottom: 1px solid rgba(255,255,255,.06); }
  .brand-mark{ width: 120px; height: 120px; }
}
@media (max-width: 480px){
  .auth-frame{ width: 94vw; }
  .hero-pane, .form-pane{ padding: 18px 14px; }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\auth\login\login.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Login } from './login';

describe('Login', () => {
  let component: Login;
  let fixture: ComponentFixture<Login>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Login]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Login);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\auth\login\login.ts =====

import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { Router, RouterModule } from '@angular/router';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import {
  trigger, transition, style, animate, query, stagger
} from '@angular/animations';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [
    CommonModule, ReactiveFormsModule, RouterModule,
    MatCardModule, MatFormFieldModule, MatInputModule,
    MatButtonModule, MatIconModule
  ],
  templateUrl: './login.html',
  styleUrls: ['./login.scss'],
  animations: [
    trigger('flyIn', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(16px) scale(.98)' }),
        animate('500ms cubic-bezier(.2,.8,.2,1)', style({ opacity: 1, transform: 'none' }))
      ])
    ]),
    trigger('staggerIn', [
      transition(':enter', [
        query('.stagger', [
          style({ opacity: 0, transform: 'translateY(10px)' }),
          stagger(60, animate('380ms ease-out', style({ opacity: 1, transform: 'none' })))
        ])
      ])
    ])
  ]
})
export class LoginComponent {
  private fb = inject(FormBuilder);
  private router = inject(Router);

  hide = true;

  form = this.fb.group({
    email: ['', [Validators.required, Validators.email]],
    password: ['', [Validators.required, Validators.minLength(6)]]
  });

  submit() {
    if (this.form.invalid) return;
    // TODO: call backend /auth/login; store token; handle errors
    // Temporary: go to patient dashboard
    this.router.navigateByUrl('/patient');
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\doctor.routes.ts =====

import { Routes } from '@angular/router';

export const DOCTOR_ROUTES: Routes = [
  {
    path: '',
    loadComponent: () =>
      import('./layout/doctor-layout/doctor-layout').then(m => m.DoctorLayoutComponent),
    children: [
      { path: '', redirectTo: 'dashboard', pathMatch: 'full' },
      {
        path: 'dashboard',
        loadComponent: () =>
          import('./pages/dashboard/dashboard').then(m => m.DoctorDashboardComponent),
        title: 'Doctor Dashboard'
      },
      {
        path: 'schedule',
        loadComponent: () =>
          import('./pages/schedule/schedule').then(m => m.ScheduleComponent),
        title: 'Schedule'
      },
      {
        path: 'patients',
        loadComponent: () =>
          import('./pages/patients/patients').then(m => m.DoctorPatientsComponent),
        title: 'Patients'
      },
      {
        path: 'appointments',
        loadComponent: () =>
          import('./pages/appointments/appointments').then(m => m.DoctorAppointmentsComponent),
        title: 'Appointments'
      },
      {
        path: 'inbox',
        loadComponent: () =>
          import('./pages/inbox/inbox').then(m => m.DoctorInboxComponent),
        title: 'Inbox'
      },
      {
        path: 'profile',
        loadComponent: () =>
          import('./pages/profile/profile').then(m => m.DocProfileComponent),
        title: 'Profile'
      },
      {
        path: 'settings',
        loadComponent: () =>
          import('./pages/settings/settings').then(m => m.DoctorSettingsComponent),
        title: 'Settings'
      },
      {
        path: 'notifications',
        loadComponent: () =>
          import('./pages/notifications/notifications').then(m => m.DoctorNotificationsComponent),
        title: 'Notifications'
      },
      {
        path: 'help',
        loadComponent: () =>
          import('./pages/help/help').then(m => m.DocHelpComponent),
        title: 'Help & Support'
      }
    ]
  }
];



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\layout\doctor-layout\doctor-layout.html =====

<mat-sidenav-container class="shell">
  <mat-sidenav #snav mode="side" opened class="side" [@slideIn]>
    <div class="brand">
      <img class="brand-logo" [src]="logoUrl" alt="Medtik" />
      <span>Medtik • Doctor</span>
    </div>

    <mat-nav-list>
      <a mat-list-item routerLink="dashboard" routerLinkActive="active">
        <mat-icon>dashboard</mat-icon><span>Dashboard</span>
      </a>
      <a mat-list-item routerLink="schedule" routerLinkActive="active">
        <mat-icon>calendar_month</mat-icon><span>Schedule</span>
      </a>
      <a mat-list-item routerLink="patients" routerLinkActive="active">
        <mat-icon>group</mat-icon><span>Patients</span>
      </a>
      <a mat-list-item routerLink="appointments" routerLinkActive="active">
        <mat-icon>event</mat-icon><span>Appointments</span>
      </a>
      <a mat-list-item routerLink="inbox" routerLinkActive="active">
        <mat-icon>forum</mat-icon><span>Inbox</span>
      </a>
      <a mat-list-item routerLink="profile" routerLinkActive="active">
        <mat-icon>badge</mat-icon><span>Profile</span>
      </a>
      <a mat-list-item routerLink="settings" routerLinkActive="active">
        <mat-icon>settings</mat-icon><span>Settings</span>
      </a>
      <a mat-list-item routerLink="notifications" routerLinkActive="active">
        <mat-icon matBadge="5" matBadgeColor="accent">notifications</mat-icon>
        <span>Notifications</span>
      </a>
      <a mat-list-item routerLink="help" routerLinkActive="active">
        <mat-icon>help</mat-icon><span>Help</span>
      </a>
    </mat-nav-list>
  </mat-sidenav>

  <mat-sidenav-content class="content">
    <mat-toolbar class="topbar">
      <button mat-icon-button (click)="snav.toggle()" class="hide-desktop">
        <mat-icon>menu</mat-icon>
      </button>
      <span class="grow"></span>
      <button mat-stroked-button color="primary" routerLink="/doctor/schedule">
        <mat-icon>add</mat-icon> Slots
      </button>
      <button mat-icon-button routerLink="/doctor/inbox">
        <mat-icon>forum</mat-icon>
      </button>
      <button mat-button class="user">
        <mat-icon>account_circle</mat-icon> Dr. You
      </button>
    </mat-toolbar>

    <div class="page">
      <router-outlet></router-outlet>
    </div>
  </mat-sidenav-content>
</mat-sidenav-container>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\layout\doctor-layout\doctor-layout.scss =====

/* ========= Doctor Layout ========= */

/* Let the global aurora (styles.scss) show behind the layout */
:host {
  display: block;
  min-height: 100dvh;
  background: transparent;
}

/* Shell + sidenav */
.shell { height: 100dvh; background: transparent; }

.side {
  width: 300px;
  background: rgba(255,255,255,.02);
  backdrop-filter: blur(8px);
  border-right: 1px solid rgba(255,255,255,.06);
}

/* Brand */
.brand {
  display: flex;
  align-items: center;
  gap: .75rem;
  padding: 1rem .9rem;
}
.brand-logo {
  width: 56px;
  height: 56px;
  object-fit: contain;
  display: block;
  filter: drop-shadow(0 6px 16px rgba(42,118,183,.45));
}
.brand span {
  font-weight: 800;
  font-size: 1.05rem;
  letter-spacing: .3px;
}

/* Nav list styles */
.mat-mdc-list-item .mat-icon { margin-right: .5rem; color: var(--muted); }
.mat-mdc-list-item.active {
  background: rgba(255,255,255,.04);
  border-left: 3px solid rgba(42,118,183,.7);
}
.mat-mdc-list-item.active .mat-icon,
.mat-mdc-list-item.active span { color: var(--text); }

/* Top bar + page area */
.content .topbar {
  background: transparent;
  color: var(--text);
  border-bottom: 1px solid rgba(255,255,255,.06);
}
.hide-desktop { display: none; }
.grow { flex: 1 1 auto; }
.page { padding: 1.25rem; }

/* Responsive */
@media (max-width: 960px){
  .hide-desktop { display: inline-flex; }
  .side { width: 260px; }
  .brand-logo { width: 44px; height: 44px; }
}

/* Remove any grey backgrounds from Material containers so the global
   aurora background from styles.scss is visible everywhere */
:host ::ng-deep .mat-drawer-container,
:host ::ng-deep .mat-drawer-content,
:host ::ng-deep .mat-sidenav-content,
:host ::ng-deep .content,
:host ::ng-deep .page,
:host ::ng-deep .topbar {
  background: transparent !important;
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\layout\doctor-layout\doctor-layout.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DoctorLayout } from './doctor-layout';

describe('DoctorLayout', () => {
  let component: DoctorLayout;
  let fixture: ComponentFixture<DoctorLayout>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DoctorLayout]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DoctorLayout);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\layout\doctor-layout\doctor-layout.ts =====

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatListModule } from '@angular/material/list';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatBadgeModule } from '@angular/material/badge';
import { MatDividerModule } from '@angular/material/divider';
import { trigger, transition, style, animate } from '@angular/animations';

@Component({
  selector: 'app-doctor-layout',
  standalone: true,
  imports: [
    CommonModule, RouterModule,
    MatSidenavModule, MatToolbarModule, MatListModule,
    MatIconModule, MatButtonModule, MatBadgeModule, MatDividerModule
  ],
  templateUrl: './doctor-layout.html',
  styleUrl: './doctor-layout.scss',
  animations: [
    trigger('slideIn', [
      transition(':enter', [
        style({ transform: 'translateX(-8px)', opacity: 0 }),
        animate('300ms ease-out', style({ transform: 'none', opacity: 1 }))
      ])
    ])
  ]
})
export class DoctorLayoutComponent {
  logoUrl = 'https://ik.imagekit.io/a2wpi1kd9/imgToUrl/image-to-url_HEow9eLbR';
}

// src/app/features/doctor/pages/appointments/appointments.ts
export class DocAppointmentsComponent {}   // instead of AppointmentsComponent



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\appointments\appointments.html =====

<div class="doc-appts">

  <!-- Toolbar / filters -->
  <div class="toolbar card">
    <div class="tabs">
      <button class="chip" [class.active]="tab()==='today'" (click)="tab.set('today')">
        <mat-icon>today</mat-icon> Today
      </button>
      <button class="chip" [class.active]="tab()==='upcoming'" (click)="tab.set('upcoming')">
        <mat-icon>schedule</mat-icon> Upcoming
      </button>
      <button class="chip" [class.active]="tab()==='past'" (click)="tab.set('past')">
        <mat-icon>history</mat-icon> Past
      </button>
      <button class="chip" [class.active]="tab()==='all'" (click)="tab.set('all')">
        <mat-icon>all_inclusive</mat-icon> All
      </button>
    </div>

    <div class="filters">
      <div class="field">
        <mat-icon class="pre">search</mat-icon>
        <input matInput placeholder="Search patient or reason..." [ngModel]="q()" (ngModelChange)="q.set($event)" />
      </div>

      <div class="field pill">
        <mat-icon>smart_toy</mat-icon>
        <select [ngModel]="modality()" (ngModelChange)="modality.set($event)">
          <option value="any">Any modality</option>
          <option value="chat">Chat</option>
          <option value="voice">Voice</option>
          <option value="video">Video</option>
        </select>
      </div>

      <div class="field pill">
        <mat-icon>flag</mat-icon>
        <select [ngModel]="status()" (ngModelChange)="status.set($event)">
          <option value="any">Any status</option>
          <option value="scheduled">Scheduled</option>
          <option value="checked_in">Checked-in</option>
          <option value="in_progress">In progress</option>
          <option value="completed">Completed</option>
          <option value="canceled">Canceled</option>
          <option value="no_show">No show</option>
        </select>
      </div>
    </div>
  </div>

  <!-- List -->
  <div class="grid">
    <div class="card row" *ngFor="let a of filtered()">
      <div class="left">
        <img class="avatar" [src]="a.patient.avatar" alt="" />
        <div class="who">
          <div class="name">{{ a.patient.name }}</div>
          <div class="sub">
            <span class="pill mod" [ngClass]="tagColor(a.modality)">{{ a.modality }}</span>
            <span class="dot">•</span>
            <span>{{ a.patient.age }} • {{ a.patient.gender }}</span>
          </div>
        </div>
      </div>

      <div class="mid">
        <div class="time">{{ toLocal(a.startUtc) }}</div>
        <div class="meta">
          <span>Duration: {{ a.durationMin }}m</span>
          <span class="dot">•</span>
          <span class="reason" *ngIf="a.reason">{{ a.reason }}</span>
        </div>
      </div>

      <div class="right">
        <span class="status" [ngClass]="statusClass(a)">{{ a.status.replace('_',' ') }}</span>

        <div class="actions">
          <button mat-stroked-button *ngIf="a.status==='scheduled' || a.status==='checked_in'" (click)="mark(a,'checked_in')" matTooltip="Mark as arrived">
            <mat-icon>assignment_turned_in</mat-icon> Check-in
          </button>

          <button mat-flat-button color="primary" [disabled]="!canJoin(a)" (click)="join(a)">
            <mat-icon>play_circle</mat-icon> Start
          </button>

          <button mat-stroked-button *ngIf="a.status==='in_progress'" (click)="mark(a,'completed')">
            <mat-icon>check</mat-icon> Complete
          </button>

          <button mat-stroked-button class="warn" *ngIf="a.status==='scheduled' || a.status==='checked_in'" (click)="mark(a,'canceled')">
            <mat-icon>close</mat-icon> Cancel
          </button>

          <button mat-stroked-button class="mute" *ngIf="a.status==='scheduled'" (click)="mark(a,'no_show')">
            <mat-icon>visibility_off</mat-icon> No-show
          </button>
        </div>

        <div class="count" *ngIf="a.status==='scheduled'">{{ countdown(a) }}</div>
      </div>

      <!-- expandable details -->
      <mat-expansion-panel class="details">
        <mat-expansion-panel-header>
          <mat-panel-title> Details & Notes </mat-panel-title>
          <mat-panel-description> Add your clinical notes for this visit </mat-panel-description>
        </mat-expansion-panel-header>

        <div class="detail-grid">
          <div class="block">
            <div class="label">Patient</div>
            <div class="value">{{ a.patient.name }} — {{ a.patient.age }}y, {{ a.patient.gender }}</div>
          </div>
          <div class="block">
            <div class="label">Window</div>
            <div class="value">{{ toLocal(a.startUtc) }} → {{ toLocal(a.endUtc) }}</div>
          </div>
          <div class="block" *ngIf="a.notesForDoctor">
            <div class="label">Patient notes</div>
            <div class="value">{{ a.notesForDoctor }}</div>
          </div>
        </div>

        <div class="notes">
          <mat-icon>note_alt</mat-icon>
          <textarea
            [(ngModel)]="a.notesByDoctor"
            rows="3"
            placeholder="Add your notes, diagnosis, plan…"></textarea>
          <button mat-stroked-button (click)="saveDoctorNote(a, a.notesByDoctor || '')">
            <mat-icon>save</mat-icon> Save notes
          </button>
        </div>
      </mat-expansion-panel>
    </div>

    <div class="empty" *ngIf="!filtered().length">
      <mat-icon>event_busy</mat-icon>
      <div>No appointments match your filters.</div>
    </div>
  </div>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\appointments\appointments.scss =====

.doc-appts {
  max-width: var(--container);
  margin: 0 auto;
  padding: 14px;
  display: grid;
  gap: 16px;
}

/* Toolbar */
.toolbar.card {
  display: grid;
  gap: 12px;
  padding: 14px;
  border-radius: var(--radius-xl);
  border: 1px solid var(--border);
  background: var(--surface);
  box-shadow: var(--shadow-sm);
}

.tabs {
  display: flex; gap: 8px; flex-wrap: wrap;
  .chip {
    display: inline-flex; align-items: center; gap: 6px;
    padding: 6px 12px; border-radius: 999px;
    border: 1px solid var(--border);
    background: rgba(255,255,255,.04); color: var(--text);
    cursor: pointer;
  }
  .chip.active { background: linear-gradient(180deg, rgba(29,183,160,.16), rgba(59,139,211,.12)); }
}

.filters {
  display: grid; grid-template-columns: 1fr repeat(2, max-content); gap: 10px;
  align-items: center;
  .field {
    position: relative; display: flex; align-items: center;
    border: 1px solid var(--border); border-radius: 12px; padding: 0 10px;
    background: rgba(255,255,255,.04);
    input, select { all: unset; height: 38px; padding: 0 4px; width: 100%; }
    .pre { margin-right: 6px; opacity: .8; }
  }
  .pill select { 
    width: 220px; 
    color: rgb(138, 136, 136);
    border: 1px solid white;
    border-radius: 12px;
    padding: 4px 8px;
    appearance: none;
  }

}

/* List */
.grid { display: grid; gap: 12px; }

.card.row {
  display: grid; grid-template-columns: 1.2fr 1.2fr 1fr; gap: 12px;
  padding: 12px; border-radius: var(--radius-xl);
  background: var(--surface); border: 1px solid var(--border); box-shadow: var(--shadow);
}

.left { display: flex; align-items: center; gap: 12px; }
.avatar { width: 52px; height: 52px; border-radius: 50%; object-fit: cover; }
.who .name { font-weight: 800; }
.who .sub { opacity: .85; font-size: 13px; display: flex; gap: 8px; align-items: center; }

.pill.mod { padding: 2px 8px; border-radius: 999px; border: 1px solid var(--border); font-size: 12px; }
.pill.mod.chat  { background: rgba(59,139,211,.10); }
.pill.mod.voice { background: rgba(255,255,255,.06); }
.pill.mod.video { background: rgba(29,183,160,.12); }

.mid .time { font-weight: 700; letter-spacing: .2px; }
.mid .meta { opacity: .85; display: flex; gap: 8px; align-items: center; }
.dot { opacity: .6; }

.right { display: grid; gap: 8px; justify-items: end; }
.status {
  text-transform: capitalize; font-size: 12px; padding: 2px 8px; border-radius: 999px; border: 1px solid var(--border);
  &.scheduled { background: rgba(255,255,255,.06); }
  &.checked_in { background: rgba(29,183,160,.16); }
  &.in_progress { background: rgba(59,139,211,.16); }
  &.completed { background: rgba(34,197,94,.18); }
  &.canceled  { background: rgba(239,68,68,.18); }
  &.no_show   { background: rgba(255,186,8,.20); }
}
.actions {
  display: flex; gap: 8px; flex-wrap: wrap; justify-content: end;
  .warn { --mdc-outlined-button-label-text-color: #fff; color: #fff; border-color: rgba(239,68,68,.35); }
  .mute { opacity: .8; }
}
.count { font-size: 12px; opacity: .8; }

.details { grid-column: 1 / -1; margin-top: 6px; }
.detail-grid { display: grid; gap: 8px; grid-template-columns: repeat(3,1fr); }
.block .label { opacity: .75; font-size: 12px; }
.block .value { font-weight: 600; }

.notes {
  margin-top: 10px; display: grid; grid-template-columns: auto 1fr auto; gap: 10px; align-items: start;
  textarea { width: 100%; min-height: 80px; border-radius: 12px; border: 1px solid var(--border);
    background: rgba(255,255,255,.04); color: var(--text); padding: 8px 10px; }
}

/* empty */
.empty { display: grid; place-items: center; gap: 8px; padding: 40px 0; opacity: .9; }




===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\appointments\appointments.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Appointments } from './appointments';

describe('Appointments', () => {
  let component: Appointments;
  let fixture: ComponentFixture<Appointments>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Appointments]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Appointments);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\appointments\appointments.ts =====

import { Component, computed, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatDividerModule } from '@angular/material/divider';
import { MatChipsModule } from '@angular/material/chips';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { MatMenuModule } from '@angular/material/menu';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatInputModule } from '@angular/material/input';
import { FormsModule } from '@angular/forms';

type Modality = 'chat' | 'voice' | 'video';

type Patient = {
  id: string;
  name: string;
  avatar: string;
  age: number;
  gender: 'male'|'female';
  country?: string;
};

type Meeting = { provider: 'internal' | 'google' | 'zoom'; joinUrl?: string; passcode?: string };

type ApptStatus = 'scheduled' | 'checked_in' | 'in_progress' | 'completed' | 'canceled' | 'no_show';

type Appointment = {
  id: string;
  patient: Patient;
  doctorId: string;
  startUtc: string;
  endUtc: string;
  durationMin: number;
  modality: Modality;
  status: ApptStatus;
  reason?: string;
  notesForDoctor?: string;
  notesByDoctor?: string;
  attachments: Array<{ id: string; name: string; url: string }>;
  meeting?: Meeting;
  createdAt: string;
  updatedAt: string;
};

const pad = (n: number) => (n < 10 ? '0' : '') + n;
const uid = () => Math.random().toString(36).slice(2, 9);
const toLocal = (isoUtc: string) =>
  new Date(isoUtc).toLocaleString(undefined, {
    weekday: 'short', month: 'short', day: '2-digit',
    hour: '2-digit', minute: '2-digit'
  });

function mkAppt(offsetMin: number, status: ApptStatus, modality: Modality, name: string, avatarIdx: number, reason = 'Follow-up'): Appointment {
  const now = new Date();
  const start = new Date(now);
  start.setUTCMinutes(start.getUTCMinutes() + offsetMin);
  start.setUTCSeconds(0,0);
  const end = new Date(start);
  end.setUTCMinutes(start.getUTCMinutes() + 25);
  return {
    id: uid(),
    doctorId: 'doc-1',
    patient: {
      id: 'p-' + uid(),
      name,
      avatar: `https://i.pravatar.cc/120?img=${avatarIdx}`,
      age: 26 + (avatarIdx % 14),
      gender: avatarIdx % 2 ? 'female' : 'male',
      country: 'EG'
    },
    startUtc: start.toISOString(),
    endUtc: end.toISOString(),
    durationMin: 25,
    modality,
    status,
    reason,
    notesForDoctor: 'Bring previous lab results.',
    notesByDoctor: '',
    attachments: [],
    meeting: { provider: 'internal', joinUrl: '/doctor/chat/thread-' + uid() },
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  };
}

function mockFetch(): Appointment[] {
  return [
    mkAppt(-180, 'completed', 'chat',  'Ola Samir', 15, 'Rash improved'),
    mkAppt(-90,  'no_show',   'voice', 'Mostafa A.', 22, 'Cough'),
    mkAppt(-45,  'canceled',  'video', 'Farah A.',   27, 'Consultation'),
    mkAppt(+10,  'scheduled', 'video', 'Ahmed Z.',   10, 'Follow-up'),
    mkAppt(+60,  'scheduled', 'voice', 'Nour S.',    30, 'Medication review'),
    mkAppt(+120, 'scheduled', 'chat',  'Hady R.',    12, 'Dermatitis'),
  ];
}

@Component({
  standalone: true,
  selector: 'doc-appointments',
  templateUrl: './appointments.html',
  styleUrls: ['./appointments.scss'],
  imports: [
    CommonModule, RouterModule, FormsModule,
    MatIconModule, MatButtonModule, MatTooltipModule, MatDividerModule,
    MatChipsModule, MatSnackBarModule, MatMenuModule, MatExpansionModule,
    MatInputModule
  ]
})
export class DoctorAppointmentsComponent {
  private snack = inject(MatSnackBar);

  // live clock for join window/countdown
  now = signal<number>(Date.now());
  private _t = setInterval(() => this.now.set(Date.now()), 1000);
  ngOnDestroy() { clearInterval(this._t); }

  // data
  all = signal<Appointment[]>(mockFetch());

  // search & filters (client-side for mock)
  q = signal('');
  tab = signal<'today'|'upcoming'|'past'|'all'>('today');
  modality = signal<Modality | 'any'>('any');
  status = signal<ApptStatus | 'any'>('any');

  filtered = computed(() => {
    const t = this.now();
    const query = this.q().trim().toLowerCase();
    const mod  = this.modality();
    const st   = this.status();
    const todayStart = new Date(); todayStart.setHours(0,0,0,0);
    const todayEnd = new Date(); todayEnd.setHours(23,59,59,999);
    return this.all()
      .filter(a => {
        // tabs
        const start = new Date(a.startUtc).getTime();
        let okTab = true;
        if (this.tab()==='today') okTab = start >= todayStart.getTime() && start <= todayEnd.getTime();
        else if (this.tab()==='upcoming') okTab = start > t;
        else if (this.tab()==='past') okTab = start < t;
        // modality & status
        const okMod = mod==='any' ? true : a.modality===mod;
        const okStatus = st==='any' ? true : a.status===st;
        // query
        const okQ = !query || a.patient.name.toLowerCase().includes(query) || (a.reason??'').toLowerCase().includes(query);
        return okTab && okMod && okStatus && okQ;
      })
      .sort((a,b) => new Date(a.startUtc).getTime() - new Date(b.startUtc).getTime());
  });

  // helpers
  toLocal = toLocal;

  statusClass(a: Appointment) {
    return {
      scheduled: a.status==='scheduled',
      checked_in: a.status==='checked_in',
      in_progress: a.status==='in_progress',
      completed: a.status==='completed',
      canceled: a.status==='canceled',
      no_show: a.status==='no_show'
    };
  }

  canJoin(a: Appointment) {
    if (!(a.status==='scheduled' || a.status==='checked_in' || a.status==='in_progress')) return false;
    const open = new Date(a.startUtc).getTime() - 10 * 60 * 1000;
    const close = new Date(a.endUtc).getTime();
    const t = this.now();
    return t >= open && t <= close;
  }

  countdown(a: Appointment) {
    const t = this.now();
    const start = new Date(a.startUtc).getTime();
    const diff = start - t;
    if (diff <= 0) return 'Now';
    const mins = Math.floor(diff / 60000);
    const secs = Math.floor((diff % 60000) / 1000);
    return `${pad(mins)}:${pad(secs)}`;
  }

  // actions
  mark(a: Appointment, status: ApptStatus) {
    this.all.update(list => list.map(x => x.id===a.id ? { ...x, status, updatedAt: new Date().toISOString() } : x));
    this.snack.open(`Marked ${status.replace('_',' ')}`, 'OK', { duration: 1500 });
  }

  join(a: Appointment) {
    if (!this.canJoin(a)) return;
    // move to in_progress if not already
    if (a.status!=='in_progress') this.mark(a, 'in_progress');
    const url = a.meeting?.joinUrl || '';
    if (url.startsWith('/')) (window as any).navigate?.(url) ?? (location.hash = '#' + url);
    else window.open(url, '_blank');
  }

  saveDoctorNote(a: Appointment, note: string) {
    this.all.update(list => list.map(x => x.id===a.id ? { ...x, notesByDoctor: note, updatedAt: new Date().toISOString() } : x));
    this.snack.open('Notes saved', 'OK', { duration: 1200 });
  }

  // UI helpers
  tagColor(mod: Modality) {
    return {
      chat: mod==='chat',
      voice: mod==='voice',
      video: mod==='video'
    };
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\dashboard\dashboard.html =====

<div class="grid" @stagger>
  <!-- KPI row -->
  <mat-card class="card kpi" *ngFor="let k of kpis" [@fadeUp]>
    <div class="kpi-row">
      <mat-icon>{{ k.icon }}</mat-icon>
      <div>
        <div class="val">{{ k.value }}</div>
        <div class="lbl">{{ k.label }}</div>
      </div>
    </div>
  </mat-card>

  <!-- Today timeline -->
  <mat-card class="card span-7" [@fadeUp]>
    <h2>Today</h2>
    <div class="timeline">
      <div class="slot" *ngFor="let s of today">
        <div class="time">{{ s.time }}</div>
        <div class="who">
          <strong>{{ s.patient }}</strong>
          <div class="small">{{ s.type }}</div>
        </div>
        <div class="actions">
          <button mat-stroked-button color="primary" [routerLink]="['/doctor/appointments']">
            <mat-icon>open_in_new</mat-icon> Details
          </button>
          <button mat-stroked-button [routerLink]="['/doctor/inbox']">
            <mat-icon>forum</mat-icon> Chat
          </button>
        </div>
      </div>
    </div>
  </mat-card>

  <!-- Quick actions -->
  <mat-card class="card span-5" [@fadeUp]>
    <h2>Quick actions</h2>
    <div class="qa">
      <button mat-flat-button color="primary" routerLink="/doctor/schedule">
        <mat-icon>add</mat-icon> Add slots
      </button>
      <button mat-stroked-button routerLink="/doctor/appointments">
        <mat-icon>event</mat-icon> View appointments
      </button>
      <button mat-stroked-button routerLink="/doctor/patients">
        <mat-icon>group</mat-icon> Patient list
      </button>
      <button mat-stroked-button routerLink="/doctor/inbox">
        <mat-icon>forum</mat-icon> Open inbox
      </button>
      <button mat-stroked-button routerLink="/doctor/profile">
        <mat-icon>badge</mat-icon> Edit profile
      </button>
    </div>
  </mat-card>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\dashboard\dashboard.scss =====

.grid {
  display:grid; gap: 1rem;
  grid-template-columns: repeat(12, 1fr);
}

.card { background: var(--surface); border-radius: 18px; box-shadow: var(--shadow); }
.kpi { grid-column: span 3; }
.span-7 { grid-column: span 7; }
.span-5 { grid-column: span 5; }

@media (max-width: 1200px){
  .kpi { grid-column: span 6; }
  .span-7, .span-5 { grid-column: span 12; }
}
@media (max-width: 600px){
  .kpi { grid-column: span 12; }
}

.kpi .kpi-row { display:flex; gap:.75rem; align-items:center; }
.kpi mat-icon { font-size: 28px; width:28px; height:28px; color:#8fc7ff; }
.kpi .val { font-size: 1.4rem; font-weight: 800; line-height: 1; }
.kpi .lbl { color: var(--muted); }

h2 { margin: .25rem 0 .5rem; }
.timeline { display: grid; gap: .5rem; }
.slot {
  display:grid;
  grid-template-columns: 90px 1fr auto;
  align-items:center; gap:.75rem; padding:.6rem .75rem;
  border:1px solid rgba(255,255,255,.06); border-radius:14px;
}
.time { font-weight:700; letter-spacing:.3px; }
.who .small { color: var(--muted); }
.actions { display:flex; gap:.5rem; flex-wrap: wrap; }

.qa {
  display:flex; flex-wrap: wrap; gap:.6rem;
  & > * { border-radius: 12px; }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\dashboard\dashboard.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Dashboard } from './dashboard';

describe('Dashboard', () => {
  let component: Dashboard;
  let fixture: ComponentFixture<Dashboard>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Dashboard]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Dashboard);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\dashboard\dashboard.ts =====

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { RouterModule } from '@angular/router';
import { trigger, transition, style, animate, query, stagger } from '@angular/animations';

@Component({
  selector: 'app-doctor-dashboard',
  standalone: true,
  imports: [CommonModule, RouterModule, MatCardModule, MatButtonModule, MatIconModule],
  templateUrl: './dashboard.html',
  styleUrl: './dashboard.scss',
  animations: [
    trigger('stagger', [
      transition(':enter', [
        query('.card', [
          style({ opacity: 0, transform: 'translateY(8px)' }),
          stagger(80, animate('300ms ease-out', style({ opacity: 1, transform: 'none' })))
        ])
      ])
    ]),
    trigger('fadeUp', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(6px)' }),
        animate('280ms ease-out', style({ opacity: 1, transform: 'none' }))
      ])
    ])
  ]
})
export class DoctorDashboardComponent {
  kpis = [
    { icon: 'event_available', label: 'Today’s appts', value: 7 },
    { icon: 'forum', label: 'Unread chats', value: 12 },
    { icon: 'schedule', label: 'Open slots', value: 9 },
    { icon: 'payments', label: 'Week earnings', value: 'EGP 4,250' },
  ];

  today = [
    { time: '09:00', patient: 'Ahmed S.', type: 'Chat',    link: null,    threadId: 't-12' },
    { time: '09:30', patient: 'Mona T.',  type: 'Video',   link: '',      threadId: 't-13' },
    { time: '10:15', patient: 'Youssef K.', type: 'Audio', link: '',      threadId: 't-19' },
    { time: '11:00', patient: 'Laila R.', type: 'Chat',    link: null,    threadId: 't-21' },
  ];
}

// src/app/features/doctor/pages/appointments/appointments.ts
export class DocAppointmentsComponent {}   // instead of AppointmentsComponent



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\help\help.html =====

<div class="help-wrap container">
  <header class="hero">
    <div class="title">
      <div class="glow"></div>
      <mat-icon>headset_mic</mat-icon>
      <h2>Help & Support</h2>
    </div>
    <p class="tagline">We’re here every day, 9:00–22:00 EET.</p>
  </header>

  <section class="cards">
    <!-- Hotline -->
    <article class="card channel">
      <div class="icon aura"><mat-icon>call</mat-icon></div>
      <div class="body">
        <h3>Support Hotline</h3>
        <div class="value">{{ hotline }}</div>
        <div class="actions">
          <button mat-flat-button color="primary" (click)="call(hotline)">
            <mat-icon>call</mat-icon><span>Call</span>
          </button>
          <button mat-stroked-button (click)="copy(hotline)" matTooltip="Copy number">
            <mat-icon>content_copy</mat-icon><span>Copy</span>
          </button>
        </div>
      </div>
    </article>

    <!-- WhatsApp -->
    <article class="card channel">
      <div class="icon aura"><mat-icon>chat</mat-icon></div>
      <div class="body">
        <h3>WhatsApp</h3>
        <div class="value">{{ whatsapp }}</div>
        <div class="actions">
          <button mat-flat-button color="primary" (click)="openWhatsApp(whatsapp)">
            <mat-icon>open_in_new</mat-icon><span>Open</span>
          </button>
          <button mat-stroked-button (click)="copy(whatsapp)" matTooltip="Copy number">
            <mat-icon>content_copy</mat-icon><span>Copy</span>
          </button>
        </div>
      </div>
    </article>

    <!-- Email -->
    <article class="card channel">
      <div class="icon aura"><mat-icon>mail</mat-icon></div>
      <div class="body">
        <h3>Email</h3>
        <div class="value">{{ email }}</div>
        <div class="actions">
          <button mat-flat-button color="primary" (click)="emailTo(email)">
            <mat-icon>mail</mat-icon><span>Email</span>
          </button>
          <button mat-stroked-button (click)="copy(email)" matTooltip="Copy email">
            <mat-icon>content_copy</mat-icon><span>Copy</span>
          </button>
        </div>
      </div>
    </article>
  </section>

  <footer class="foot">
    <mat-icon>verified_user</mat-icon>
    <span>Response time typically under 10 minutes during hours.</span>
  </footer>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\help\help.scss =====

.help-wrap {
  padding: 18px 12px 40px;
}

.hero {
  display: grid;
  gap: 6px;
  margin-bottom: 12px;
}

.title {
  position: relative;
  display: flex;
  align-items: center;
  gap: 10px;
  h2 { margin: 0; }
  mat-icon { font-size: 22px; height: 22px; width: 22px; opacity: .9; }
}

.title .glow {
  position: absolute; inset: -18px -12px -12px -12px;
  pointer-events: none;
  background:
    radial-gradient(60% 60% at 10% 40%, rgba(29,183,160,.15), transparent 60%),
    radial-gradient(60% 60% at 80% 20%, rgba(59,139,211,.18), transparent 60%);
  filter: blur(12px); opacity: .8;
}

.tagline { color: var(--muted); margin: 0; }

.cards {
  display: grid;
  gap: 14px;
  grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
}

.card.channel {
  display: grid;
  grid-template-columns: auto 1fr;
  align-items: center;
  gap: 14px;
  padding: 16px;
  border: 1px solid var(--border);
  border-radius: var(--radius-xl);
  background:
    linear-gradient(180deg, rgba(255,255,255,.02), rgba(255,255,255,.01)),
    var(--surface);
  box-shadow: var(--shadow-sm);
  transition: transform var(--dur-3) var(--ease), box-shadow var(--dur-3) var(--ease);
}
.card.channel:hover {
  transform: translateY(-2px);
  box-shadow: 0 18px 60px rgba(0,0,0,.45);
}

.icon {
  width: 52px; height: 52px; border-radius: 16px;
  display: grid; place-items: center;
  background: rgba(255,255,255,.04);
  border: 1px solid var(--border);
  mat-icon { font-size: 24px; width: 24px; height: 24px; }
  position: relative; overflow: hidden;
}
.icon.aura::after {
  content: ""; position: absolute; inset: -40%;
  background: radial-gradient(60% 60% at 30% 30%, rgba(29,183,160,.25), transparent 60%),
              radial-gradient(60% 60% at 70% 70%, rgba(59,139,211,.22), transparent 60%);
  filter: blur(14px); opacity: .9;
}

.body { display: grid; gap: 8px; }
.body h3 { margin: 0; font-weight: 800; letter-spacing: .2px; }
.value { font-family: var(--font-sans); font-size: 15px; opacity: .95; }

.actions {
  display: flex; flex-wrap: wrap; gap: 8px;
  button { height: 36px; border-radius: 12px; }
  mat-icon { margin-right: 6px; }
}

.foot {
  display: flex; align-items: center; gap: 8px;
  margin-top: 10px; color: var(--muted);
  mat-icon { font-size: 18px; width: 18px; height: 18px; opacity: .8; }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\help\help.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Help } from './help';

describe('Help', () => {
  let component: Help;
  let fixture: ComponentFixture<Help>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Help]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Help);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\help\help.ts =====

import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';

@Component({
  standalone: true,
  selector: 'app-help',
  templateUrl: './help.html',
  styleUrls: ['./help.scss'],
  imports: [CommonModule, MatIconModule, MatButtonModule, MatTooltipModule, MatSnackBarModule]
})
export class DocHelpComponent {
  private snack = inject(MatSnackBar);

  // Edit these in one place
  readonly hotline = '+20 106 555 1212';
  readonly whatsapp = '+20 106 555 1212';
  readonly email = 'support@medtik.app';

  call(num: string) {
    const tel = this.onlyDigits(num);
    window.open(`tel:${tel}`);
  }

  openWhatsApp(num: string) {
    const phone = this.onlyDigits(num);
    const msg = encodeURIComponent('Hi Medtik Support — I need help with...');
    window.open(`https://wa.me/${phone}?text=${msg}`, '_blank');
  }

  emailTo(addr: string) {
    window.location.href = `mailto:${addr}`;
  }

  async copy(text: string) {
    try {
      if (navigator.clipboard?.writeText) {
        await navigator.clipboard.writeText(text);
      } else {
        const ta = document.createElement('textarea');
        ta.value = text;
        document.body.appendChild(ta);
        ta.select();
        document.execCommand('copy');
        document.body.removeChild(ta);
      }
      this.snack.open('Copied to clipboard', 'OK', { duration: 1400 });
    } catch {
      this.snack.open('Copy failed', 'OK', { duration: 1600 });
    }
  }

  private onlyDigits(v: string) {
    return (v || '').replace(/\D+/g, '');
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\inbox\inbox.html =====

<div class="chat-vert container">
  <!-- Top strip -->
  <section class="strip-panel card">
    <div class="strip-header">
      <div class="title">
        <mat-icon>sms</mat-icon>
        <h2>Inbox</h2>
      </div>
      <div class="search">
        <input class="search-input" placeholder="Search patients or messages…"
               [value]="stripQuery()" (input)="stripQuery.set($any($event.target).value)" />
        <mat-icon class="search-ico">search</mat-icon>
      </div>
    </div>

    <div class="strip">
      <div class="tile" *ngFor="let t of filteredThreads(); trackBy: trackById"
           [class.active]="t.id === activeId()" (click)="select(t)">
        <img class="avatar" [src]="t.avatar" alt="" />
        <div class="meta">
          <span class="name">{{ t.name }}</span>
          <span class="sub">{{ t.spec }}</span>
        </div>
        <span class="time">{{ time(t.lastAt) }}</span>
        <span class="badge" *ngIf="t.unread">{{ t.unread }}</span>
      </div>
    </div>
  </section>

  <!-- Conversation -->
  <section class="conversation card panel">
    <header class="conv-header">
      <div class="doc">
        <span class="presence"></span>
        <img class="avatar" [src]="activeThread()?.avatar" alt="" />
        <div>
          <div class="name">{{ activeThread()?.name }}</div>
          <div class="sub">{{ activeThread()?.spec }}</div>
        </div>
      </div>

      <input class="inline-search" placeholder="Search in chat…"
             [value]="chatQuery()" (input)="chatQuery.set($any($event.target).value)" />
    </header>

    <div class="conv-body">
      <div class="msg" *ngFor="let m of messages(); trackBy: trackById" [class.me]="m.me">
        <div class="bubble">{{ m.text }}</div>
        <div class="meta">{{ time(m.at) }} <ng-container *ngIf="m.me"> • {{ m.seen ? 'seen' : 'sent' }}</ng-container></div>
      </div>
    </div>

    <footer class="composer">
      <button mat-icon-button class="ghost" matTooltip="Attach"><mat-icon>attach_file</mat-icon></button>
      <input class="draft" placeholder="Type your message…" [value]="draft()"
             (input)="draft.set($any($event.target).value)" (keydown.enter)="send()" />
      <button mat-flat-button color="primary" (click)="send()">
        <mat-icon>send</mat-icon><span>Send</span>
      </button>
    </footer>
  </section>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\inbox\inbox.scss =====

/* ======== Layout: vertical strip on top, wide chat under ======== */

.chat-vert {
  max-width: var(--container);
  margin: 0 auto;
  padding: 12px 12px 28px;
  display: grid;
  gap: 18px;
}

/* --- Conversations strip (sticks to top while page scrolls) --- */
.strip-panel.card {
  position: sticky;
  top: 8px;                     /* keep visible while page scrolls */
  z-index: 5;
  padding: 14px;
  border-radius: var(--radius-xl);
  background: var(--surface);
  border: 1px solid var(--border);
  box-shadow: var(--shadow-sm);
}

.strip-header {
  display: grid;
  grid-template-columns: auto 1fr;
  gap: 14px;
  align-items: center;
  margin-bottom: 10px;
}

.strip-header .title {
  display: flex;
  align-items: center;
  gap: 10px;
}
.strip-header .title h2 { margin: 0; }

.strip-header .search {
  position: relative;
}
.search-input {
  width: 100%;
  height: 42px;
  padding: 0 40px 0 14px;
  border-radius: 14px;
  border: 1px solid var(--border);
  background: rgba(255,255,255,.04);
  color: var(--text);
}
.search-ico {
  position: absolute;
  right: 10px;
  top: 50%;
  translate: 0 -50%;
  opacity: .7;
}

/* pill-like conversation tiles */
.strip {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: max-content;
  gap: 14px;
  overflow-x: auto;
  padding-bottom: 4px;
  scrollbar-width: thin;
}

.tile {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 8px 14px;
  border-radius: 999px;
  border: 1px solid var(--border);
  background: rgba(255,255,255,.03);
  color: var(--text);
  cursor: pointer;
  white-space: nowrap;
}
.tile.active {
  background: linear-gradient(180deg, rgba(29,183,160,.14), rgba(59,139,211,.10));
  box-shadow: 0 8px 20px rgba(59,139,211,.18);
}
.tile .avatar { width: 34px; height: 34px; border-radius: 50%; object-fit: cover; }
.tile .meta { display: grid; line-height: 1.1; }
.tile .name { font-weight: 700; letter-spacing: .2px; }
.tile .sub  { font-size: 12px; opacity: .8; }
.tile .time { margin-left: 6px; font-size: 12px; opacity: .75; }
.tile .badge{ margin-left: 8px; font-size: 12px; background: var(--brand-600); color: #fff; padding: 2px 8px; border-radius: 999px; }

/* --- Conversation panel (no fixed height; page scrolls) --- */
.conversation.card.panel {
  display: grid;
  gap: 14px;
  padding: 0 0 12px;
  border-radius: var(--radius-xl);
  border: 1px solid var(--border);
  background: var(--surface);
  box-shadow: var(--shadow);
}

/* sticky chat header inside the panel */
.conv-header {
  position: sticky;
  top: 0;
  z-index: 4;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 12px;
  padding: 14px 16px;
  border-bottom: 1px solid var(--border);
  background: linear-gradient(180deg, rgba(10,14,22,.95), rgba(10,14,22,.80));
  backdrop-filter: blur(6px);
  border-top-left-radius: var(--radius-xl);
  border-top-right-radius: var(--radius-xl);
}
.conv-header .doc { display: flex; align-items: center; gap: 12px; }
.conv-header .avatar { width: 40px; height: 40px; border-radius: 50%; object-fit: cover; }
.conv-header .name { font-weight: 800; margin-bottom: 2px; }
.conv-header .sub { font-size: 12.5px; opacity: .85; }
.conv-header .presence {
  width: 9px; height: 9px; border-radius: 50%; background: #22c55e; display: inline-block;
  box-shadow: 0 0 0 3px rgba(34,197,94,.18);
}

.inline-search {
  width: min(360px, 42vw);
  height: 38px;
  border-radius: 12px;
  border: 1px solid var(--border);
  padding: 0 12px;
  background: rgba(255,255,255,.05);
  color: var(--text);
}

/* Load earlier button block */
.load { align-self: center; width: max-content; margin: 10px auto 0; }

/* Conversation body grows naturally; page handles scrolling */
.conv-body {
  display: grid;
  gap: 10px;
  padding: 8px 16px 18px;
  /* give a tall default so the window looks bigger */
  min-height: 62vh;
}

/* message */
.msg { display: grid; justify-content: start; gap: 6px; }
.msg.me { justify-content: end; }

.msg .stamp {
  place-self: center;
  font-size: 12px;
  opacity: .8;
  background: rgba(255,255,255,.06);
  padding: 2px 10px;
  border-radius: 999px;
}

.bubble {
  max-width: 70ch;
  padding: 12px 14px;
  border-radius: 16px;
  border: 1px solid var(--border);
  background: rgba(255,255,255,.05);
  line-height: 1.35;
}
.msg.me .bubble {
  background: linear-gradient(180deg, rgba(59,139,211,.18), rgba(29,183,160,.12));
  border-color: rgba(59,139,211,.25);
}

.msg .meta {
  font-size: 12px;
  opacity: .8;
  margin-top: 2px;
  text-align: right;
}

/* sticky composer at the bottom of the viewport for comfort */
.composer {
  position: sticky;
  bottom: 8px;
  z-index: 3;
  display: grid;
  grid-template-columns: auto 1fr auto;
  align-items: center;
  gap: 10px;
  padding: 10px 12px;
  margin: 0 12px 8px;
  border-radius: 16px;
  border: 1px solid var(--border);
  background: linear-gradient(180deg, rgba(10,14,22,.90), rgba(10,14,22,.86));
  backdrop-filter: blur(6px);
}
.composer .draft {
  height: 44px;
  border-radius: 12px;
  border: 1px solid var(--border);
  background: rgba(255,255,255,.04);
  color: var(--text);
  padding: 0 12px;
}
.composer .ghost { opacity: .8; }
///////////////////
/* --- Conversation panel: internal scroll --- */
:root { --chat-offset: 180px; } /* tweak if your top area gets taller/shorter */

.conversation.card.panel {
  display: grid;
  grid-template-rows: auto minmax(0, 1fr) auto; /* header | body(scroll) | composer */
  gap: 14px;
  padding: 0 0 12px;
  border-radius: var(--radius-xl);
  border: 1px solid var(--border);
  background: var(--surface);
  box-shadow: var(--shadow);

  /* viewport-bounded height so the body can scroll inside */
  height: calc(100vh - var(--chat-offset));
  max-height: 92vh;
  overflow: hidden; /* no page scroll “bleed” */
}

/* sticky header stays pinned within the panel */
.conv-header {
  position: sticky;
  top: 0;
  z-index: 4;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 12px;
  padding: 14px 16px;
  border-bottom: 1px solid var(--border);
  background: linear-gradient(180deg, rgba(10,14,22,.95), rgba(10,14,22,.80));
  backdrop-filter: blur(6px);
  border-top-left-radius: var(--radius-xl);
  border-top-right-radius: var(--radius-xl);
}

/* conversation body is the vertical scroller */
.conv-body {
  display: grid;
  gap: 10px;
  padding: 8px 16px 18px;
  overflow-y: auto;       /* <- scrolls inside here */
  overflow-x: hidden;
  overscroll-behavior: contain;
  scrollbar-gutter: stable both-edges;
}

/* composer sits in the bottom grid row (NOT sticky now) */
.composer {
  position: relative;     /* remove sticky behavior */
  bottom: auto;
  z-index: 3;
  display: grid;
  grid-template-columns: auto 1fr auto;
  align-items: center;
  gap: 10px;
  padding: 10px 12px;
  margin: 0 12px 8px;
  border-radius: 16px;
  border: 1px solid var(--border);
  background: linear-gradient(180deg, rgba(10,14,22,.90), rgba(10,14,22,.86));
  backdrop-filter: blur(6px);
}
/* ===== FIX: confine scrolling to the chat body; keep top areas fixed ===== */

/* Make the whole chat page fill the viewport and stop page scrolling */
.chat-vert{
  height: 100dvh;                 /* dynamic viewport height (mobile-safe) */
  overflow: hidden;               /* prevent page scroll; we'll scroll inside the chat */
  display: grid;
  grid-template-rows: auto 1fr;   /* strip on top, conversation fills the rest */
}

/* Strip already sticky; just ensure it overlays correctly */
.strip-panel.card{
  position: sticky;
  top: 8px;
  z-index: 8;                     /* above chat body while you scroll */
}

/* Conversation panel fills the remaining height and owns its internal scroll */
.conversation.card.panel{
  height: 100%;
  overflow: hidden;               /* no outer scrolling */
  display: grid;
  grid-template-rows: auto minmax(0,1fr) auto;  /* header | body(scroll) | composer */
  gap: 14px;
}

/* Header remains pinned inside the panel */
.conv-header{
  position: sticky;
  top: 0;
  z-index: 4;
}

/* 👉 Only this area scrolls */
.conv-body{
  overflow-y: auto;               /* internal vertical scroll */
  overflow-x: hidden;
  min-height: 0;                  /* allow grid area to actually shrink */
  padding: 8px 16px 18px;
  scrollbar-gutter: stable both-edges;
  overscroll-behavior: contain;
}

/* Composer anchored at the bottom row (not sticky) */
.composer{
  position: relative;             /* ensure it doesn’t float over messages */
  bottom: auto;
  margin: 0 12px 8px;
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\inbox\inbox.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Inbox } from './inbox';

describe('Inbox', () => {
  let component: Inbox;
  let fixture: ComponentFixture<Inbox>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Inbox]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Inbox);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\inbox\inbox.ts =====

import { Component, computed, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatMenuModule } from '@angular/material/menu';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';

type Thread = { id: string; name: string; spec: string; avatar: string; lastAt: string; unread?: number };
type Message = { id: string; threadId: string; me?: boolean; text: string; at: string; seen?: boolean };

const uid = () => Math.random().toString(36).slice(2,10);

function seedThreads(): Thread[] {
  const now = new Date();
  const m = (mins: number) => new Date(now.getTime() - mins*60000).toISOString();
  return [
    { id: 't1', name: 'Patient Ahmed',  spec: 'Follow-up', avatar: 'https://i.pravatar.cc/80?img=12', lastAt: m(2), unread: 1 },
    { id: 't2', name: 'Patient Laila',  spec: 'Dermatology', avatar: 'https://i.pravatar.cc/80?img=5',  lastAt: m(35) },
    { id: 't3', name: 'Patient Youssef',spec: 'Cardiology',  avatar: 'https://i.pravatar.cc/80?img=31', lastAt: m(120) },
  ];
}
function seedMessages(): Message[] {
  const now = new Date();
  const m = (mins: number) => new Date(now.getTime() - mins*60000).toISOString();
  return [
    { id: uid(), threadId: 't1', text: 'Hello doctor 👋', at: m(14) },
    { id: uid(), threadId: 't1', me: true, text: 'Hello! How can I help?', at: m(13), seen: true },
    { id: uid(), threadId: 't1', text: 'Result came back normal.', at: m(2) },
  ];
}

@Component({
  standalone: true,
  selector: 'app-doctor-inbox',
  templateUrl: './inbox.html',
  styleUrls: ['./inbox.scss'],
  imports: [
    CommonModule, MatIconModule, MatButtonModule,
    MatTooltipModule, MatMenuModule, MatFormFieldModule, MatInputModule
  ]
})
export class DoctorInboxComponent {
  threads = signal<Thread[]>(seedThreads());
  activeId = signal<string>('t1');
  draft = signal('');
  stripQuery = signal('');
  chatQuery = signal('');

  messagesAll = signal<Message[]>(seedMessages());

  trackById = (_: number, x: {id: string}) => x.id;

  activeThread = computed(() => this.threads().find(t => t.id === this.activeId())!);
  messages = computed(() =>
    this.messagesAll()
      .filter(m => m.threadId === this.activeId())
      .filter(m => !this.chatQuery() || m.text.toLowerCase().includes(this.chatQuery().toLowerCase()))
  );

  filteredThreads = computed(() => {
    const q = this.stripQuery().toLowerCase().trim();
    return this.threads().filter(t =>
      !q || t.name.toLowerCase().includes(q) || t.spec.toLowerCase().includes(q)
    );
  });

  select(t: Thread) {
    this.activeId.set(t.id);
  }
  send() {
    const text = this.draft().trim();
    if (!text) return;
    this.messagesAll.update(arr => [
      ...arr,
      { id: uid(), threadId: this.activeId(), me: true, text, at: new Date().toISOString(), seen: false }
    ]);
    this.draft.set('');
  }
  time(s: string) { return new Date(s).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }); }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\notifications\notifications.html =====

<div class="wrap container">
  <header class="bar">
    <div class="title">
      <mat-icon>notifications</mat-icon>
      <h2>Notifications</h2>
    </div>

    <div class="controls">
      <mat-form-field appearance="outline" class="search">
        <mat-label>Search</mat-label>
        <input matInput [value]="query()" (input)="query.set($any($event.target).value)" />
      </mat-form-field>

      <mat-button-toggle-group [value]="filter()" (change)="filter.set($event.value)">
        <mat-button-toggle value="all">All</mat-button-toggle>
        <mat-button-toggle value="appointment">Appointments</mat-button-toggle>
        <mat-button-toggle value="mention">Mentions</mat-button-toggle>
        <mat-button-toggle value="review">Reviews</mat-button-toggle>
        <mat-button-toggle value="system">System</mat-button-toggle>
      </mat-button-toggle-group>

      <button mat-stroked-button (click)="clear()">Clear all</button>
    </div>
  </header>

  <section class="list card">
    <div class="item" *ngFor="let n of filtered()">
      <div class="left">
        <span class="pill" [ngClass]="badgeClass(n.kind)">{{ n.kind }}</span>
        <div class="meta">
          <div class="t">
            <span class="title">{{ n.title }}</span>
            <span class="dot">•</span>
            <span class="time">{{ time(n.time) }}</span>
          </div>
          <div class="b" [class.muted]="n.read">{{ n.body }}</div>
        </div>
      </div>

      <div class="right">
        <button mat-icon-button matTooltip="Toggle read" (click)="toggleRead(n)">
          <mat-icon>{{ n.read ? 'mark_email_read' : 'mark_email_unread' }}</mat-icon>
        </button>
        <button mat-icon-button matTooltip="Dismiss" (click)="clear(n.kind)">
          <mat-icon>close</mat-icon>
        </button>
      </div>
    </div>

    <div class="empty" *ngIf="!filtered().length">
      <mat-icon>inbox</mat-icon>
      <div>No notifications</div>
    </div>
  </section>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\notifications\notifications.scss =====

.wrap { padding: 14px 12px; }
.bar {
  display: grid; gap: 12px; align-items: center; margin-bottom: 10px;
  grid-template-columns: auto 1fr;
}
.title { display: flex; align-items: center; gap: 10px; }
.controls {
  display: flex; align-items: center; gap: 10px; justify-content: flex-end; flex-wrap: wrap;
}
.search { width: min(340px, 45vw); }

.list.card { padding: 8px; display: grid; gap: 8px; }
.item {
  display: grid; grid-template-columns: 1fr auto; gap: 10px;
  padding: 12px; border: 1px solid var(--border); border-radius: 14px;
  background: rgba(255,255,255,.03);
}
.left { display: flex; gap: 10px; align-items: flex-start; }
.meta { display: grid; gap: 4px; }
.t { display: flex; gap: 8px; align-items: center; flex-wrap: wrap; }
.title { font-weight: 800; }
.time { opacity: .8; font-size: 12px; }
.b.muted { opacity: .6; }
.pill {
  padding: 4px 10px; border-radius: 999px; font-size: 12px; border: 1px solid var(--border);
  text-transform: capitalize;
}
.pill.appointment { background: rgba(29,183,160,.16); }
.pill.mention     { background: rgba(59,139,211,.16); }
.pill.review      { background: rgba(234,179,8,.16);  }
.pill.system      { background: rgba(148,163,184,.16);}
.right { display: flex; gap: 6px; }
.empty { text-align:center; opacity:.8; padding: 20px 0; display:grid; gap:6px;}


===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\notifications\notifications.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Notifications } from './notifications';

describe('Notifications', () => {
  let component: Notifications;
  let fixture: ComponentFixture<Notifications>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Notifications]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Notifications);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\notifications\notifications.ts =====

import { Component, computed, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatMenuModule } from '@angular/material/menu';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { MatInputModule } from "@angular/material/input";


type NotiKind = 'appointment' | 'review' | 'mention' | 'system';
type Noti = {
  id: string;
  kind: NotiKind;
  title: string;
  body: string;
  time: string;     // ISO
  read: boolean;
};

const uid = () => Math.random().toString(36).slice(2,10);

function seed(): Noti[] {
  const now = new Date();
  const mk = (k: NotiKind, t: string, b: string, minutesAgo: number, read=false): Noti => {
    const d = new Date(now);
    d.setMinutes(d.getMinutes() - minutesAgo);
    return { id: uid(), kind: k, title: t, body: b, time: d.toISOString(), read };
  };
  return [
    mk('appointment', 'New booking', 'Patient Ahmed booked for 15:30 today.', 9),
    mk('mention', 'You were mentioned', 'Nurse: “@DrOmar results uploaded.”', 22),
    mk('review', 'New review', '“Very helpful and kind.” ★★★★★', 60, true),
    mk('system', 'Schedule sync', 'Calendar is up to date.', 120, true),
  ];
}

@Component({
  standalone: true,
  selector: 'app-doctor-notifications',
  templateUrl: './notifications.html',
  styleUrls: ['./notifications.scss'],
  imports: [
    CommonModule, MatIconModule, MatButtonModule,
    MatMenuModule, MatTooltipModule, MatSnackBarModule,
    MatButtonToggleModule,
    MatInputModule
]
})
export class DoctorNotificationsComponent {
  private snack = new MatSnackBar();

  all = signal<Noti[]>(seed());
  query = signal('');
  filter = signal<'all' | NotiKind>('all');

  filtered = computed(() => {
    const q = this.query().trim().toLowerCase();
    const f = this.filter();
    return this.all()
      .filter(n => f === 'all' ? true : n.kind === f)
      .filter(n => !q || n.title.toLowerCase().includes(q) || n.body.toLowerCase().includes(q))
      .sort((a, b) => +new Date(b.time) - +new Date(a.time));
  });

  markRead(n: Noti) {
    this.all.update(list => list.map(x => x.id === n.id ? { ...x, read: true } : x));
  }
  toggleRead(n: Noti) {
    this.all.update(list => list.map(x => x.id === n.id ? { ...x, read: !x.read } : x));
  }
  clear(kind?: 'all' | NotiKind) {
    if (!confirm('Clear notifications?')) return;
    if (!kind || kind === 'all') this.all.set([]);
    else this.all.update(list => list.filter(n => n.kind !== kind));
    this.snack.open('Notifications cleared', 'OK', { duration: 1200 });
  }
  time(t: string) { return new Date(t).toLocaleString(); }
  badgeClass(k: NotiKind) { return { appointment: k==='appointment', review: k==='review', mention: k==='mention', system: k==='system' }; }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\patients\patients.html =====

<div class="patients-wrap">
  <!-- Sticky tools -->
  <div class="toolbar card">
    <div class="title">
      <mat-icon>groups</mat-icon>
      <h2>Patients</h2>
    </div>

    <div class="controls">
      <mat-form-field appearance="outline" class="search">
        <mat-label>Search patients</mat-label>
        <input
          matInput
          placeholder="Name, condition, tag, medication…"
          [value]="query()"
          (input)="query.set($any($event.target).value)" />
      </mat-form-field>

      <mat-button-toggle-group
        class="filters"
        [value]="filter()"
        (change)="filter.set($event.value)"
        aria-label="Filter">
        <mat-button-toggle value="all"><mat-icon>all_inclusive</mat-icon> All</mat-button-toggle>
        <mat-button-toggle value="active"><mat-icon>verified_user</mat-icon> Active</mat-button-toggle>
        <mat-button-toggle value="followup"><mat-icon>event_upcoming</mat-icon> Follow-up due</mat-button-toggle>
        <mat-button-toggle value="new"><mat-icon>sparkles</mat-icon> New</mat-button-toggle>
      </mat-button-toggle-group>

      <mat-menu #sortMenu="matMenu">
        <button mat-menu-item (click)="sortBy.set('recent')"><mat-icon>schedule</mat-icon><span>Last visit</span></button>
        <button mat-menu-item (click)="sortBy.set('name')"><mat-icon>sort_by_alpha</mat-icon><span>Name A–Z</span></button>
        <button mat-menu-item (click)="sortBy.set('age')"><mat-icon>elderly</mat-icon><span>Age</span></button>
      </mat-menu>
      <button mat-stroked-button [matMenuTriggerFor]="sortMenu">
        <mat-icon>tune</mat-icon> Sort
      </button>
    </div>
  </div>

  <!-- Grid of patient cards -->
  <div class="grid">
    <div class="card pcard" *ngFor="let p of filtered(); trackBy: trackById">
      <div class="head">
        <div class="left">
          <img [src]="p.avatar" alt="" class="avatar" />
          <div class="meta">
            <div class="name">{{ p.name }}</div>
            <div class="sub">
              <span>{{ p.sex }} · {{ p.age }}</span>
              <span class="dot">•</span>
              <span class="muted">{{ p.country || '—' }}</span>
            </div>
          </div>
        </div>

        <div class="right">
          <span class="pill" [ngClass]="pillStatus(p)">
            <ng-container *ngIf="pillStatus(p).new">New</ng-container>
            <ng-container *ngIf="!pillStatus(p).new && pillStatus(p).active">Active</ng-container>
            <ng-container *ngIf="pillStatus(p).due && !pillStatus(p).new && !pillStatus(p).active">Follow-up</ng-container>
          </span>
        </div>
      </div>

      <mat-divider />

      <div class="body">
        <div class="row">
          <mat-icon class="ico">medical_information</mat-icon>
          <div class="chips">
            <span class="chip" *ngFor="let c of p.conditions">{{ c }}</span>
          </div>
        </div>
        <div class="row" *ngIf="p.meds?.length">
          <mat-icon class="ico">medication</mat-icon>
          <div class="chips">
            <span class="chip ghost" *ngFor="let m of p.meds">{{ m }}</span>
          </div>
        </div>
        <div class="row" *ngIf="p.tags?.length">
          <mat-icon class="ico">label</mat-icon>
          <div class="chips">
            <span class="tag" [ngClass]="tagClass(t)" *ngFor="let t of p.tags">{{ t }}</span>
          </div>
        </div>
      </div>

      <div class="foot">
        <div class="times">
          <div><span class="k">Last visit</span><span class="v">{{ date(p.lastVisit) }}</span></div>
          <div><span class="k">Next</span><span class="v">{{ date(p.nextVisit) }}</span></div>
        </div>
        <div class="actions">
          <button mat-stroked-button (click)="openChart(p)" matTooltip="Open patient chart">
            <mat-icon>folder_shared</mat-icon> Chart
          </button>
          <button mat-stroked-button (click)="startChat(p)" matTooltip="Chat with patient">
            <mat-icon>chat</mat-icon> Chat
          </button>
          <button mat-stroked-button (click)="book(p)" matTooltip="Book follow-up">
            <mat-icon>event</mat-icon> Book
          </button>
          <button mat-flat-button color="primary" (click)="addNote(p)">
            <mat-icon>note_add</mat-icon> Add note
          </button>
        </div>
      </div>
    </div>

    <div class="empty" *ngIf="!filtered().length">
      <mat-icon>group_off</mat-icon>
      <div>No patients match your filters</div>
    </div>
  </div>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\patients\patients.scss =====

.patients-wrap { max-width: var(--container); margin: 0 auto; padding: 12px; display: grid; gap: 16px; }
.toolbar.card { position: sticky; top: 8px; z-index: 5; display: grid; grid-template-columns: auto 1fr; gap: 12px; align-items: center; }
.toolbar .title { display: flex; align-items: center; gap: 10px; }
.toolbar .controls { display: flex; gap: 10px; align-items: center; justify-content: flex-end; flex-wrap: wrap; }
.toolbar .search { min-width: min(420px, 80vw); }

.grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap: 14px; }
.pcard .head { display: flex; align-items: center; justify-content: space-between; gap: 10px; }
.pcard .left { display: flex; align-items: center; gap: 12px; }
.pcard .avatar { width: 44px; height: 44px; border-radius: 50%; object-fit: cover; }
.pcard .name { font-weight: 800; letter-spacing: .2px; }
.pcard .sub { font-size: 12.5px; opacity: .85; display: flex; gap: 6px; align-items: center; }
.pcard .dot { opacity: .6; }

.pill { padding: 4px 10px; border-radius: 999px; border:1px solid var(--border); font-size: 12px; }
.pill.new { background: rgba(59,139,211,.18); border-color: rgba(59,139,211,.28); }
.pill.active { background: rgba(29,183,160,.16); border-color: rgba(29,183,160,.26); }
.pill.due { background: rgba(245,158,11,.16); border-color: rgba(245,158,11,.28); }

.body { display: grid; gap: 8px; padding: 8px 2px 2px; }
.row { display: grid; grid-template-columns: 20px 1fr; gap: 8px; align-items: start; }
.ico { opacity: .9; }
.chips { display: flex; flex-wrap: wrap; gap: 6px; }
.chip { padding: 2px 8px; border: 1px solid var(--border); border-radius: 999px; font-size: 12px; background: rgba(255,255,255,.04); }
.chip.ghost { background: rgba(255,255,255,.02); }
.tag { padding: 2px 8px; border-radius: 999px; font-size: 12px; background: rgba(255,255,255,.06); border:1px solid var(--border); }
.tag.vip { background: linear-gradient(180deg, rgba(255,215,0,.20), rgba(255,215,0,.08)); }
.tag.chronic { background: linear-gradient(180deg, rgba(244,63,94,.18), rgba(244,63,94,.08)); }
.tag.new { background: linear-gradient(180deg, rgba(59,139,211,.18), rgba(59,139,211,.08)); }
.tag.follow { background: linear-gradient(180deg, rgba(245,158,11,.18), rgba(245,158,11,.08)); }

.foot { margin-top: 8px; display: flex; align-items: center; justify-content: space-between; gap: 10px; flex-wrap: wrap; }
.times { display: flex; gap: 16px; }
.k { opacity: .8; margin-right: 6px; }
.v { font-weight: 600; }
.actions { display: flex; gap: 8px; flex-wrap: wrap; }

.empty { grid-column: 1 / -1; display: grid; place-items: center; gap: 8px; padding: 40px 0; opacity: .85; }



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\patients\patients.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Patients } from './patients';

describe('Patients', () => {
  let component: Patients;
  let fixture: ComponentFixture<Patients>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Patients]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Patients);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\patients\patients.ts =====

import { Component, computed, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterModule } from '@angular/router';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatMenuModule } from '@angular/material/menu';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { MatDividerModule } from '@angular/material/divider';

type Sex = 'M' | 'F';
type Patient = {
  id: string;
  name: string;
  avatar: string;
  sex: Sex;
  age: number;
  country?: string;
  conditions: string[];
  meds?: string[];
  tags?: string[];            // VIP, Chronic, New, …
  lastVisit?: string;         // ISO
  nextVisit?: string;         // ISO
  createdAt: string;          // first time seen
};

const uid = () => Math.random().toString(36).slice(2, 10);
const toLocalDate = (iso?: string) =>
  iso ? new Date(iso).toLocaleString(undefined, { year: 'numeric', month: 'short', day: '2-digit' }) : '—';

function daysSince(iso?: string) {
  if (!iso) return Number.POSITIVE_INFINITY;
  const ms = Date.now() - new Date(iso).getTime();
  return Math.floor(ms / 86400000);
}
function daysUntil(iso?: string) {
  if (!iso) return Number.POSITIVE_INFINITY;
  const ms = new Date(iso).getTime() - Date.now();
  return Math.ceil(ms / 86400000);
}

// ---- mock (replace with API) ----
function mockPatients(): Patient[] {
  const daysAgo = (n: number) => { const d = new Date(); d.setDate(d.getDate() - n); return d.toISOString(); };
  const daysFrom = (n: number) => { const d = new Date(); d.setDate(d.getDate() + n); return d.toISOString(); };

  return [
    {
      id: uid(), name: 'Mariam Nassar', avatar: 'https://i.pravatar.cc/120?img=5', sex: 'F', age: 29, country: 'EG',
      conditions: ['Eczema'], meds: ['Hydrocortisone'],
      tags: ['New'], lastVisit: daysAgo(5), nextVisit: daysFrom(3), createdAt: daysAgo(5)
    },
    {
      id: uid(), name: 'Youssef Kamal', avatar: 'https://i.pravatar.cc/120?img=12', sex: 'M', age: 41, country: 'EG',
      conditions: ['Hyperlipidemia'], meds: ['Atorvastatin'],
      tags: ['Chronic'], lastVisit: daysAgo(170), nextVisit: undefined, createdAt: daysAgo(600)
    },
    {
      id: uid(), name: 'Sara Amin', avatar: 'https://i.pravatar.cc/120?img=49', sex: 'F', age: 8, country: 'EG',
      conditions: ['Allergic rhinitis'], meds: ['Cetirizine'],
      tags: ['Follow-up'], lastVisit: daysAgo(32), nextVisit: daysFrom(10), createdAt: daysAgo(200)
    },
    {
      id: uid(), name: 'Omar Khaled', avatar: 'https://i.pravatar.cc/120?img=23', sex: 'M', age: 34, country: 'AE',
      conditions: ['Migraine'], meds: ['Ibuprofen PRN'],
      tags: ['VIP'], lastVisit: daysAgo(8), nextVisit: undefined, createdAt: daysAgo(400)
    },
    {
      id: uid(), name: 'Dalia Fathy', avatar: 'https://i.pravatar.cc/120?img=32', sex: 'F', age: 52, country: 'EG',
      conditions: ['Type 2 Diabetes'], meds: ['Metformin'],
      tags: ['Chronic'], lastVisit: daysAgo(210), nextVisit: undefined, createdAt: daysAgo(1000)
    }
  ];
}

@Component({
  standalone: true,
  selector: 'app-doctor-patients',
  templateUrl: './patients.html',
  styleUrls: ['./patients.scss'],
  imports: [
    CommonModule, RouterModule,
    MatIconModule, MatButtonModule, MatButtonToggleModule,
    MatFormFieldModule, MatInputModule, MatTooltipModule,
    MatMenuModule, MatSnackBarModule, MatDividerModule
  ]
})
export class DoctorPatientsComponent {
  private router = inject(Router);
  private snack  = inject(MatSnackBar);

  all = signal<Patient[]>(mockPatients());
  query = signal('');
  // All | Active(visited within 180d) | Follow-up due(last visit > 180d OR next visit within 7d) | New(first seen ≤ 14d)
  filter = signal<'all' | 'active' | 'followup' | 'new'>('all');
  sortBy = signal<'recent' | 'name' | 'age'>('recent');

  filtered = computed(() => {
    const q = this.query().trim().toLowerCase();
    const f = this.filter();
    const sorted = [...this.all()].filter(p => {
      if (q) {
        const hay = [
          p.name, p.country, ...(p.conditions||[]), ...(p.meds||[]), ...(p.tags||[])
        ].join(' ').toLowerCase();
        if (!hay.includes(q)) return false;
      }
      if (f === 'active') return daysSince(p.lastVisit) <= 180;
      if (f === 'followup') return daysSince(p.lastVisit) > 180 || daysUntil(p.nextVisit) <= 7;
      if (f === 'new') return daysSince(p.createdAt) <= 14;
      return true;
    });

    const s = this.sortBy();
    if (s === 'name') sorted.sort((a,b) => a.name.localeCompare(b.name));
    if (s === 'age')  sorted.sort((a,b) => a.age - b.age);
    if (s === 'recent') sorted.sort((a,b) => (new Date(b.lastVisit||0).getTime()) - (new Date(a.lastVisit||0).getTime()));
    return sorted;
  });

  trackById = (_: number, p: Patient) => p.id;

  // actions
  openChart(p: Patient) { this.router.navigate(['/doctor/patient', p.id]); }
  startChat(p: Patient) { this.router.navigate(['/patient/chat', 't-' + p.id]); }
  book(p: Patient)      { this.router.navigate(['/patient/booking', 'doc-123'], { queryParams: { patientId: p.id } }); }
  addNote(p: Patient)   { this.snack.open(`Quick note added for ${p.name}`, 'OK', { duration: 1200 }); }

  // helpers
  tagClass(t: string) {
    const k = t.toLowerCase();
    return {
      vip: k.includes('vip'),
      chronic: k.includes('chronic'),
      new: k.includes('new'),
      follow: k.includes('follow'),
    };
  }
  pillStatus(p: Patient) {
    const isNew = daysSince(p.createdAt) <= 14;
    const active = daysSince(p.lastVisit) <= 180;
    const due = daysSince(p.lastVisit) > 180 || daysUntil(p.nextVisit) <= 7;
    return {
      new: isNew,
      active: active && !isNew,
      due: !active || due
    };
  }
  date = toLocalDate;
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\profile\profile.html =====

<div class="profile-shell">
  <!-- LEFT: Form -->
  <section class="panel form-panel">
    <header class="panel-head">
      <div class="id">
        <img class="avatar" [src]="fc.avatar.value" alt="avatar" />
        <div>
          <h2>Doctor profile</h2>
          <p class="muted">Keep your public details up to date.</p>
        </div>
      </div>
      <div class="actions">
        <button mat-stroked-button (click)="reset()"><mat-icon>refresh</mat-icon> Reset</button>
        <button mat-flat-button color="primary" (click)="save()"><mat-icon>save</mat-icon> Save</button>
      </div>
    </header>

    <!-- Identity -->
    <div class="section">
      <h3 class="section-title"><mat-icon>badge</mat-icon> Identity</h3>

      <div class="grid">
        <mat-form-field appearance="outline" class="full">
          <mat-label>Full name</mat-label>
          <input matInput [formControl]="fc.name" required />
        </mat-form-field>

        <mat-form-field appearance="outline" class="full">
          <mat-label>Title</mat-label>
          <input matInput [formControl]="fc.title" placeholder="e.g., Consultant Pediatrician" />
        </mat-form-field>

        <mat-form-field appearance="outline">
          <mat-label>Department</mat-label>
          <mat-select [formControl]="fc.department">
            <mat-option *ngFor="let d of departments" [value]="d">{{ d }}</mat-option>
          </mat-select>
        </mat-form-field>

        <mat-form-field appearance="outline">
          <mat-label>Years of experience</mat-label>
          <input matInput type="number" [formControl]="fc.yearsExperience" />
        </mat-form-field>

        <mat-form-field appearance="outline" class="full">
          <mat-label>License / registration number</mat-label>
          <input matInput [formControl]="fc.licenseNumber" />
        </mat-form-field>

        <mat-form-field appearance="outline" class="full">
          <mat-label>Avatar URL</mat-label>
          <input matInput [formControl]="fc.avatar" />
          <mat-hint>Paste an image URL (you can upload later)</mat-hint>
        </mat-form-field>

        <mat-form-field appearance="outline" class="full">
          <mat-label>About / bio</mat-label>
          <textarea matInput rows="4" [formControl]="fc.about"></textarea>
        </mat-form-field>
      </div>
    </div>

    <!-- Professional -->
    <div class="section">
      <h3 class="section-title"><mat-icon>workspace_premium</mat-icon> Professional</h3>

      <div class="chip-row">
        <label>Languages</label>
        <div class="chips">
          <span class="chip" *ngFor="let c of array('languages').controls; let i = index">
            {{ c.value }} <button type="button" class="x" (click)="removeChip('languages', i)">×</button>
          </span>
          <input class="chip-input" placeholder="Add & Enter" (keydown.enter)="onChipEnter('languages', $event)">
        </div>
      </div>

      <div class="chip-row">
        <label>Hospitals / clinics</label>
        <div class="chips">
          <span class="chip" *ngFor="let c of array('hospitals').controls; let i = index">
            {{ c.value }} <button type="button" class="x" (click)="removeChip('hospitals', i)">×</button>
          </span>
          <input class="chip-input" placeholder="Add & Enter" (keydown.enter)="onChipEnter('hospitals', $event)">
        </div>
      </div>

      <div class="chip-row">
        <label>Education</label>
        <div class="chips">
          <span class="chip" *ngFor="let c of array('education').controls; let i = index">
            {{ c.value }} <button type="button" class="x" (click)="removeChip('education', i)">×</button>
          </span>
          <input class="chip-input" placeholder="Add & Enter" (keydown.enter)="onChipEnter('education', $event)">
        </div>
      </div>

      <div class="chip-row">
        <label>Certificates</label>
        <div class="chips">
          <span class="chip" *ngFor="let c of array('certificates').controls; let i = index">
            {{ c.value }} <button type="button" class="x" (click)="removeChip('certificates', i)">×</button>
          </span>
          <input class="chip-input" placeholder="Add & Enter" (keydown.enter)="onChipEnter('certificates', $event)">
        </div>
      </div>
    </div>

    <!-- Availability & pricing -->
    <div class="section">
      <h3 class="section-title"><mat-icon>video_chat</mat-icon> Availability & pricing</h3>

      <div class="mods">
        <mat-slide-toggle [formControl]="ctrlChat"><mat-icon>chat</mat-icon> Chat</mat-slide-toggle>
        <mat-slide-toggle [formControl]="ctrlVoice"><mat-icon>call</mat-icon> Voice</mat-slide-toggle>
        <mat-slide-toggle [formControl]="ctrlVideo"><mat-icon>videocam</mat-icon> Video</mat-slide-toggle>
      </div>

      <mat-form-field appearance="outline" class="meet full">
        <mat-label>Voice/video provider</mat-label>
        <mat-select [formControl]="fc.externalMeetProvider">
          <mat-option *ngFor="let p of meetProviders" [value]="p">{{ p }}</mat-option>
        </mat-select>
      </mat-form-field>

      <div class="prices">
        <div class="prices-head">
          <span>Country</span><span>Currency</span><span>Chat</span><span>Voice</span><span>Video</span><span></span>
        </div>

        <div class="prices-row" *ngFor="let grp of priceGroups(); let i = index; trackBy: trackIndex" [formGroup]="grp">
          <input class="mini" type="text"   formControlName="country" />
          <input class="mini" type="text"   formControlName="currency" />
          <input class="mini" type="number" formControlName="chat" />
          <input class="mini" type="number" formControlName="voice" />
          <input class="mini" type="number" formControlName="video" />
          <button type="button" class="icon danger" mat-icon-button (click)="removePriceRow(i)" matTooltip="Remove">
            <mat-icon>delete</mat-icon>
          </button>
        </div>

        <button mat-stroked-button class="add-price" (click)="addPriceRow()">
          <mat-icon>add</mat-icon> Add country price
        </button>
      </div>
    </div>

    <!-- Policies -->
    <div class="section">
      <h3 class="section-title"><mat-icon>policy</mat-icon> Policies</h3>
      <div class="grid">
        <mat-form-field appearance="outline" class="full">
          <mat-label>Cancellation</mat-label>
          <textarea matInput rows="3" [formControl]="polCancellation"></textarea>
        </mat-form-field>
        <mat-form-field appearance="outline" class="full">
          <mat-label>Refund</mat-label>
          <textarea matInput rows="3" [formControl]="polRefund"></textarea>
        </mat-form-field>
        <mat-form-field appearance="outline" class="full">
          <mat-label>Reschedule</mat-label>
          <textarea matInput rows="3" [formControl]="polReschedule"></textarea>
        </mat-form-field>
      </div>

      <div class="footer-actions">
        <button mat-stroked-button (click)="reset()"><mat-icon>refresh</mat-icon> Reset</button>
        <button mat-flat-button color="primary" (click)="save()"><mat-icon>save</mat-icon> Save changes</button>
      </div>
    </div>
  </section>

  <!-- RIGHT: Public preview -->
  <aside class="panel preview-panel">
    <div class="doc-card">
      <header class="head">
        <img [src]="preview().avatar" alt="" class="avatar-lg" />
        <div class="meta">
          <h3>{{ preview().name }}</h3>
          <div class="sub">
            <span class="title">{{ preview().title || 'Specialty' }}</span>
            <span class="dot"></span>
            <span class="pill">{{ preview().dept }}</span>
          </div>
        </div>
      </header>

      <div class="prices-preview">
        <div class="row" *ngFor="let p of preview().prices">
          <span class="cc">{{ p.country }}</span>
          <span class="price"><mat-icon>chat_bubble</mat-icon> {{ priceLabel(p,'chat') }}</span>
          <span class="price"><mat-icon>call</mat-icon> {{ priceLabel(p,'voice') }}</span>
          <span class="price"><mat-icon>videocam</mat-icon> {{ priceLabel(p,'video') }}</span>
        </div>
      </div>

      <div class="chips">
        <span class="chip" *ngFor="let l of preview().langs">{{ l }}</span>
      </div>

      <p class="bio muted">{{ preview().about || 'Your bio will appear here.' }}</p>

      <div class="lists">
        <div class="list">
          <h4><mat-icon>local_hospital</mat-icon> Hospitals / clinics</h4>
          <ul><li *ngFor="let h of preview().hosps">{{ h }}</li></ul>
        </div>
        <div class="list">
          <h4><mat-icon>school</mat-icon> Education</h4>
          <ul><li *ngFor="let e of preview().edu">{{ e }}</li></ul>
        </div>
        <div class="list">
          <h4><mat-icon>workspace_premium</mat-icon> Certificates</h4>
          <ul><li *ngFor="let c of preview().certs">{{ c }}</li></ul>
        </div>
      </div>
    </div>
  </aside>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\profile\profile.scss =====

/* page grid */
.profile-shell{
  display:grid; grid-template-columns: 1fr 380px; gap: 1.25rem; padding: 1.25rem;
}
@media (max-width: 1100px){ .profile-shell{ grid-template-columns: 1fr; } }

/* glassy panels consistent with app */
.panel{
  background: linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.02));
  border: 1px solid rgba(255,255,255,.08);
  border-radius: 18px;
  box-shadow: 0 10px 40px rgba(0,0,0,.25);
  overflow: hidden;
  animation: fadeUp .4s ease both;
}
@keyframes fadeUp{ from{ opacity:0; transform: translateY(6px);} to{opacity:1; transform:none;} }

/* ---------- left/form ---------- */
.form-panel{ padding: 1rem 1rem 1.25rem; }
.panel-head{
  display:flex; align-items:center; justify-content:space-between; gap: 1rem; padding: .25rem .25rem 1rem;
  border-bottom: 1px solid rgba(255,255,255,.06);
  .id{ display:flex; align-items:center; gap: .9rem; }
  .avatar{ width:64px; height:64px; border-radius:16px; object-fit:cover; box-shadow: 0 5px 18px rgba(0,0,0,.35); }
  h2{ margin:0; font-weight:800; letter-spacing:.2px; }
  .muted{ color:var(--muted); margin:.15rem 0 0; }
  .actions{ display:flex; gap:.5rem; }
}

.section{ padding: 1rem 0 .25rem; }
.section + .section{ border-top:1px solid rgba(255,255,255,.06); margin-top: .75rem; }
.section-title{
  display:flex; align-items:center; gap:.5rem; margin:.25rem 0 1rem; font-weight:700;
  mat-icon{ font-size:20px; width:20px; height:20px; }
}

.grid{ display:grid; grid-template-columns: 1fr 1fr; gap: .9rem; }
.grid .full{ grid-column: 1 / -1; }

.mat-mdc-form-field{ width:100%; }
.mat-mdc-form-field-infix{ padding-top:.6rem; padding-bottom:.6rem; }
.mat-mdc-form-field-subscript-wrapper{ margin-top:.2rem; }

.chip-row{ margin:.5rem 0 1rem; }
.chip-row label{ display:block; font-size:.86rem; color:var(--muted); margin-bottom:.35rem; }
.chips{ display:flex; flex-wrap:wrap; gap:.4rem; }
.chip{
  background: rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.10);
  padding:.35rem .55rem; border-radius:999px; display:inline-flex; gap:.35rem; align-items:center;
}
.chip .x{ border:0; background:transparent; color:var(--muted); cursor:pointer; line-height:1; }
.chip-input{
  background: transparent; border:1px dashed rgba(255,255,255,.15); color:var(--text);
  padding:.35rem .55rem; border-radius:999px; outline:none; min-width:140px;
}

.mods{ display:flex; gap:.75rem; margin-bottom:.6rem; }
.meet{ margin-top:.25rem; }

/* prices editor */
.prices{ margin-top:.5rem; }
.prices-head, .prices-row{
  display:grid; grid-template-columns: 80px 90px 1fr 1fr 1fr 36px; gap:.5rem; align-items:center;
}
.prices-head{
  color:var(--muted); font-size:.85rem; margin:.3rem 0 .4rem;
}
.prices-row + .prices-row{ margin-top:.4rem; }
.prices-row .mini{
  width:100%; background: rgba(255,255,255,.04); border:1px solid rgba(255,255,255,.10);
  border-radius:10px; padding:.55rem .6rem; color:var(--text);
}
.icon.danger mat-icon{ color:#ff6b6b; }
.add-price{ margin-top:.6rem; }

/* footer */
.footer-actions{ display:flex; gap:.5rem; justify-content:flex-end; margin-top:.6rem; }

/* ---------- right/preview ---------- */
.preview-panel{ padding: .9rem; }
.doc-card{ padding: 1rem; }
.head{ display:flex; gap:.9rem; align-items:center; border-bottom:1px solid rgba(255,255,255,.06); padding-bottom:.75rem; }
.avatar-lg{ width:74px; height:74px; border-radius:18px; object-fit:cover; box-shadow: 0 6px 20px rgba(0,0,0,.35); }
.meta h3{ margin:0; font-weight:800; }
.sub{ display:flex; align-items:center; gap:.5rem; margin-top:.15rem; color:var(--muted); }
.title{ color:var(--text); }
.pill{
  background: rgba(42,118,183,.15); border:1px solid rgba(42,118,183,.35);
  color:#b9d9ff; padding:.15rem .5rem; border-radius:999px; font-size:.8rem;
}
.dot{ width:4px; height:4px; border-radius:50%; background:rgba(255,255,255,.35); display:inline-block; }

.prices-preview{ margin:.8rem 0 .6rem; display:flex; flex-direction:column; gap:.35rem; }
.prices-preview .row{
  display:grid; grid-template-columns: 32px 1fr 1fr 1fr; gap:.5rem;
  background: rgba(255,255,255,.03); border:1px solid rgba(255,255,255,.08); border-radius:10px; padding:.45rem .55rem;
}
.prices-preview .price{ display:flex; align-items:center; gap:.35rem; }
.prices-preview mat-icon{ font-size:18px; width:18px; height:18px; }

.chips{ display:flex; flex-wrap:wrap; gap:.4rem; margin:.3rem 0 .4rem; }
.bio{ margin:.4rem 0 .6rem; }

.lists{ display:grid; gap:.6rem; }
.list h4{ display:flex; align-items:center; gap:.4rem; margin:.2rem 0; font-weight:700; }
.list ul{ margin:.2rem 0 0 .9rem; padding:0; }
.list li{ margin:.15rem 0; color:var(--muted); }



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\profile\profile.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Profile } from './profile';

describe('Profile', () => {
  let component: Profile;
  let fixture: ComponentFixture<Profile>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Profile]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Profile);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\profile\profile.ts =====

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  FormArray, FormBuilder, FormControl, FormGroup, ReactiveFormsModule,
} from '@angular/forms';

import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule }     from '@angular/material/input';
import { MatSelectModule }    from '@angular/material/select';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatIconModule }      from '@angular/material/icon';
import { MatButtonModule }    from '@angular/material/button';
import { MatDividerModule }   from '@angular/material/divider';
import { MatTooltipModule }   from '@angular/material/tooltip';

type PriceRow = { country:string; currency:string; chat:number; voice:number; video:number; };

type PreviewModel = {
  name:string; title:string; dept:string; exp:number; lic:string;
  avatar:string; about:string;
  langs:string[]; hosps:string[]; edu:string[]; certs:string[];
  prices: PriceRow[];
};

@Component({
  standalone: true,
  selector: 'app-doc-profile',
  templateUrl: './profile.html',
  styleUrls: ['./profile.scss'],
  imports: [
    CommonModule, ReactiveFormsModule,
    MatFormFieldModule, MatInputModule, MatSelectModule,
    MatSlideToggleModule, MatIconModule, MatButtonModule,
    MatDividerModule, MatTooltipModule,
  ],
})
export class DocProfileComponent {
  departments = ['Pediatrics','Cardiology','Dermatology','Psychiatry','Neurology','Orthopedics','ENT','Dentistry','General'];
  meetProviders = ['Google Meet','Zoom','Microsoft Teams','Webex'];

  form!: FormGroup;
  private _preview!: PreviewModel;

  constructor(private fb: FormBuilder){
    this.form = this.buildForm();

    // initial preview
    this._preview = this.toPreview(this.form.getRawValue());

    // keep preview syncing without signals (no styling side-effects)
    this.form.valueChanges.subscribe(v => {
      this._preview = this.toPreview(v ?? {});
    });
  }

  // —— form factory ——
  private buildForm(): FormGroup {
    const n = this.fb.nonNullable;
    return n.group({
      name:            n.control<string>(''),
      title:           n.control<string>(''),
      department:      n.control<string>('Pediatrics'),
      yearsExperience: n.control<number>(0),
      licenseNumber:   n.control<string>(''),
      avatar:          n.control<string>('https://i.pravatar.cc/160?img=15'),
      about:           n.control<string>(''),

      languages:    n.array<string>(['Arabic','English']),
      hospitals:    n.array<string>(['Medtik Virtual Clinic']),
      education:    n.array<string>(['MBBCh']),
      certificates: n.array<string>([]),

      modalitiesEnabled: n.group({
        chat:  n.control<boolean>(true),
        voice: n.control<boolean>(true),
        video: n.control<boolean>(true),
      }),
      externalMeetProvider: n.control<string>('Google Meet'),

      prices: n.array<FormGroup>([
        this.priceRow('EG','EGP',80,120,180),
        this.priceRow('SA','SAR',90,140,200),
        this.priceRow('AE','AED',60,95,150),
      ]),

      policies: n.group({
        cancellation: n.control<string>('Free cancellation up to 2 hours'),
        refund:       n.control<string>('No-show refunds are not available'),
        reschedule:   n.control<string>('Reschedule up to 30 minutes'),
      }),
    });
  }

  // —— typed shortcuts for template ——
  get fc() {
    return {
      name: this.form.get('name') as FormControl<string>,
      title: this.form.get('title') as FormControl<string>,
      department: this.form.get('department') as FormControl<string>,
      yearsExperience: this.form.get('yearsExperience') as FormControl<number>,
      licenseNumber: this.form.get('licenseNumber') as FormControl<string>,
      avatar: this.form.get('avatar') as FormControl<string>,
      about: this.form.get('about') as FormControl<string>,
      externalMeetProvider: this.form.get('externalMeetProvider') as FormControl<string>,
    };
  }
  get mods() { return this.form.get('modalitiesEnabled') as FormGroup; }
  get ctrlChat()  { return this.mods.get('chat')  as FormControl<boolean>; }
  get ctrlVoice() { return this.mods.get('voice') as FormControl<boolean>; }
  get ctrlVideo() { return this.mods.get('video') as FormControl<boolean>; }

  get polCancellation() { return this.form.get('policies.cancellation') as FormControl<string>; }
  get polRefund()       { return this.form.get('policies.refund')       as FormControl<string>; }
  get polReschedule()   { return this.form.get('policies.reschedule')   as FormControl<string>; }

  array(name:'languages'|'hospitals'|'education'|'certificates'){
    return this.form.get(name) as FormArray<FormControl<string>>;
  }

  private priceRow(country='', currency='', chat=0, voice=0, video=0){
    const n = this.fb.nonNullable;
    return n.group({
      country:  n.control<string>(country),
      currency: n.control<string>(currency),
      chat:     n.control<number>(chat),
      voice:    n.control<number>(voice),
      video:    n.control<number>(video),
    });
  }
  get priceArray(){ return this.form.get('prices') as FormArray<FormGroup>; }
  priceGroups(): FormGroup[] { return this.priceArray.controls as FormGroup[]; }
  addPriceRow(){ this.priceArray.push(this.priceRow()); }
  removePriceRow(i:number){ this.priceArray.removeAt(i); }
  trackIndex = (i:number) => i;

  // —— chips ——
  onChipEnter(which:'languages'|'hospitals'|'education'|'certificates', ev: Event){
    const input = ev.target as HTMLInputElement;
    const v = (input?.value || '').trim();
    if(!v) return;
    this.array(which).push(this.fb.nonNullable.control<string>(v));
    input.value = '';
  }
  removeChip(which:'languages'|'hospitals'|'education'|'certificates', i:number){
    this.array(which).removeAt(i);
  }

  reset(){ this.form.reset(this.form.getRawValue()); }
  save(){ /* integrate with backend later */ }

  // —— public preview API used by template (keeps your HTML unchanged) ——
  preview = () => this._preview;

  private toPreview(v:any): PreviewModel {
    return {
      name: v?.name || 'Doctor name',
      title: v?.title || 'Specialty',
      dept:  v?.department || 'General',
      exp:   v?.yearsExperience || 0,
      lic:   v?.licenseNumber || '',
      avatar: v?.avatar || '',
      about: v?.about || '',
      langs: (v?.languages ?? []) as string[],
      hosps: (v?.hospitals ?? []) as string[],
      edu:   (v?.education ?? []) as string[],
      certs: (v?.certificates ?? []) as string[],
      prices: (v?.prices ?? []) as PriceRow[],
    };
  }

  priceLabel(row: PriceRow, which:'chat'|'voice'|'video'){ return `${row[which]} ${row.currency}`; }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\schedule\schedule.html =====

<div class="sched-wrap">
  <!-- Header / filter -->
  <div class="toolbar">
    <div class="title">
      <mat-icon>calendar_today</mat-icon>
      <h2>Schedule</h2>

      <!-- ▼ Week controls (new) -->
      <div class="week-controls">
        <button mat-icon-button matTooltip="Previous week" (click)="prevWeek()">
          <mat-icon>chevron_left</mat-icon>
        </button>

        <span class="week">{{ weekLabel() }}</span>

        <button mat-icon-button matTooltip="Next week" (click)="nextWeek()">
          <mat-icon>chevron_right</mat-icon>
        </button>

        <button mat-stroked-button class="this-week" (click)="thisWeek()">This week</button>
      </div>
      <!-- ▲ Week controls -->
    </div>

    <!-- (keep your existing filters block unchanged) -->
    <mat-button-toggle-group
      class="filters"
      [value]="activeFilter()"
      (change)="setFilter($event.value)"
      aria-label="Filter by modality">
      <mat-button-toggle value="all"><mat-icon>all_inclusive</mat-icon> All</mat-button-toggle>
      <mat-button-toggle value="chat"><mat-icon>chat</mat-icon> Chat</mat-button-toggle>
      <mat-button-toggle value="voice"><mat-icon>call</mat-icon> Voice</mat-button-toggle>
      <mat-button-toggle value="video"><mat-icon>videocam</mat-icon> Video</mat-button-toggle>
    </mat-button-toggle-group>
  </div>

  <!-- Days grid (unchanged) -->
  <div class="week-grid">
    <section class="day-card" *ngFor="let d of daysIdx">
      <header class="day-head">
        <div class="name">{{ daysLabels[d] }}</div>
        <div class="legend">
          <span class="chip chat">Chat</span>
          <span class="chip voice">Voice</span>
          <span class="chip video">Video</span>
        </div>
      </header>

      <div class="slots" *ngIf="(slotsForDay(d)()).length; else emptyDay">
        <div
          class="slot"
          *ngFor="let s of slotsForDay(d)()"
          [ngClass]="classFor(s)"
          (click)="editSlot(s)"
          matTooltip="Click to edit"
        >
          <div class="time">
            <mat-icon>schedule</mat-icon>
            {{ timeRange(s) }}
          </div>
          <div class="mods">
            <span class="pill" *ngFor="let m of s.modalities">{{ m }}</span>
          </div>
        </div>
      </div>

      <ng-template #emptyDay>
        <div class="empty"><mat-icon>event_busy</mat-icon> No slots</div>
      </ng-template>

      <button mat-stroked-button class="add" (click)="addSlot(d)">
        <mat-icon>add</mat-icon>
        Add slot
      </button>
    </section>
  </div>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\schedule\schedule.scss =====

/* Page shell */
.sched-wrap {
  padding: 1rem;
}

/* Header */
/* --- add this under .toolbar (or anywhere after it) --- */
/* --- keep filters on the same row as the title/week controls --- */
.toolbar {
  /* make the left block shrink if needed, keep filters to the right */
  .title {
    flex: 1 1 auto;      /* allow it to shrink/grow */
    min-width: 0;        /* enables shrinking without wrapping */
    flex-wrap: nowrap;   /* force one line for the title area */
  }

  .filters {
    margin-left: auto;   /* push filters to the far right */
    flex: 0 0 auto;      /* don't let filters shrink into a new line */
    white-space: nowrap; /* keep the toggles together */
  }

  /* keep week controls compact */
  .title .week-controls {
    flex-wrap: nowrap;
    gap: .2rem;
  }
  .title .week { white-space: nowrap; }
}

/* optional: stack on very small screens */
@media (max-width: 720px) {
  .toolbar {
    flex-wrap: wrap;
    .title { flex: 1 1 100%; margin-bottom: .5rem; }
    .filters { margin-left: 0; }
  }
}



/* Grid of days: 3 columns desktop, 2 on tablets, 1 on phones */
.week-grid {
  display: grid;
  gap: 1rem;
  grid-template-columns: repeat(3, minmax(0, 1fr));
}
@media (max-width: 1200px) {
  .week-grid { grid-template-columns: repeat(2, minmax(0, 1fr)); }
}
@media (max-width: 720px) {
  .week-grid { grid-template-columns: 1fr; }
}

/* Day card */
.day-card {
  background: rgba(255,255,255,.02);
  border: 1px solid rgba(255,255,255,.06);
  border-radius: 16px;
  box-shadow: 0 10px 25px rgba(0,0,0,.25);
  padding: .85rem;

  .day-head {
    display: flex; align-items: center; justify-content: space-between; gap: .75rem;
    padding-bottom: .5rem; margin-bottom: .5rem;
    border-bottom: 1px dashed rgba(255,255,255,.06);

    .name { font-weight: 700; letter-spacing: .2px; }
    .legend { display: flex; gap: .4rem; flex-wrap: wrap; }
    .chip {
      font-size: .75rem; padding: .2rem .5rem; border-radius: 999px;
      border: 1px solid rgba(255,255,255,.08); background: rgba(255,255,255,.04);
      &.chat  { border-color: rgba(85,145,255,.5);  background: rgba(85,145,255,.08); }
      &.voice { border-color: rgba(66,211,146,.5);  background: rgba(66,211,146,.08); }
      &.video { border-color: rgba(183,140,255,.5); background: rgba(183,140,255,.08); }
    }
  }

  .slots { display: grid; gap: .6rem; }

  .slot {
    display: flex; align-items: center; justify-content: space-between; gap: 1rem;
    padding: .65rem .75rem; border-radius: 12px;
    border: 1px solid rgba(255,255,255,.06);
    background: rgba(255,255,255,.03);
    cursor: pointer; transition: transform .12s ease, background .12s ease, border-color .12s ease;

    .time { display: flex; align-items: center; gap: .4rem; font-weight: 600; letter-spacing: .2px; }
    .mods { display: flex; gap: .4rem; }
    .pill {
      font-size: .75rem; padding: .15rem .5rem; border-radius: 999px;
      background: rgba(255,255,255,.05); border: 1px solid rgba(255,255,255,.08);
      text-transform: capitalize;
    }

    &:hover { transform: translateY(-1px); background: rgba(255,255,255,.05); }
  }

  /* Color accents by modality */
  .slot.chat  { border-left: 3px solid #5591ff; }
  .slot.voice { border-left: 3px solid #42d392; }
  .slot.video { border-left: 3px solid #b78cff; }
  .slot.multi { border-left: 3px solid #9adcff; }

  .empty {
    display: flex; align-items: center; gap: .4rem;
    padding: .65rem .75rem; border-radius: 12px;
    border: 1px dashed rgba(255,255,255,.10); opacity: .7;
  }

  .add {
    width: 100%; margin-top: .7rem; border-radius: 12px;
  }
}

////////////////////////////////////
/* keep header and filters on one row */
/* ---------- Toolbar: keep everything on one row ---------- */
.toolbar{
  display: grid;
  grid-template-columns: 1fr auto;   /* left: title+week, right: filters */
  align-items: center;
  gap: .75rem;
  min-width: 0;                       /* prevent overflow */
}

/* Left side (icon + “Schedule” + week controls) */
.toolbar .title{
  display: flex;
  align-items: center;
  gap: .7rem;
  min-width: 0;

  /* push week controls up next to the title (no wrapping) */
  .week-controls{
    margin-left: 1rem;
    display: inline-flex;
    align-items: center;
    gap: .35rem;
    white-space: nowrap;

    /* prev/next arrow buttons */
    .mat-icon-button{
      width: 34px; height: 34px; line-height: 34px;
    }
    .mat-icon{ width: 18px; height: 18px; font-size: 18px; }

    /* date range “pill” */
    .week{
      display: inline-flex;
      align-items: center;
      padding: .32rem .6rem;
      border-radius: 7px;
      border: 1px solid rgba(255,255,255,.08);
      background: rgba(255,255,255,.05);
      font-weight: 600;
      letter-spacing: .2px;
      line-height: 1;
    }

    /* “This week” button styled to match height of the pill */
    .this-week{
      height: 34px;
      line-height: 34px;
      padding: 0 .45rem;
      border-radius: 999px;
    }
  }
}

/* Right side (toggle filters) — compact so they fit on the row */
:host ::ng-deep .filters.mat-button-toggle-group{
  border-radius: 999px;
  overflow: hidden;
}
:host ::ng-deep .filters .mat-button-toggle-button{
  height: 32px;             /* slimmer */
  padding: 0 .36rem;
}
:host ::ng-deep .filters .mat-button-toggle-label-content{
  display: inline-flex;
  align-items: center;
  gap: .28rem;
  padding: 0 .32rem;
  font-size: .85rem;
  line-height: 1;
  white-space: nowrap;
}
:host ::ng-deep .filters .mat-icon{
  width: 16px; height: 16px; font-size: 16px;
}

/* If the viewport gets very narrow, keep alignment but allow graceful wrap */
@media (max-width: 980px){
  .toolbar{ grid-template-columns: 1fr; row-gap: .5rem; }
  .toolbar .title{ flex-wrap: wrap; }
  :host ::ng-deep .filters{ justify-self: start; }
}
/////////////////////////////
/* ---------- FIX: labels cropped at the top ---------- */
/* Scope deeply into Angular Material’s MDC fields */
:host ::ng-deep .mat-mdc-form-field-infix {
  /* give the floating label room so it doesn't get shaved */
  padding-top: 14px !important;
  padding-bottom: 10px !important;
}

:host ::ng-deep .mdc-text-field--outlined .mdc-text-field__input {
  /* undo the earlier tight line-height that was causing the crop */
  line-height: normal !important;
  padding-top: 12px !important;
  padding-bottom: 12px !important;
}

/* a little breathing room under the dialog title */
mat-dialog-content.content .row:first-child {
  margin-top: 8px;
}

/* (tiny typo fix from before: remove the space so it applies) */
.mods .checks .chip { margin-right: .2rem; }



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\schedule\schedule.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Schedule } from './schedule';

describe('Schedule', () => {
  let component: Schedule;
  let fixture: ComponentFixture<Schedule>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Schedule]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Schedule);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\schedule\schedule.ts =====

import { Component, computed, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { SlotDialogComponent, SlotDialogData, SlotDialogResult, Modality } from './slot-dialog';

export interface Slot {
  id: string;
  dayIdx: number;         // 0..6 => Mon..Sun
  start: string;          // 'HH:mm'
  duration: number;       // minutes
  modalities: Modality[]; // 1..3
  notes?: string;
}

const days = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'];
const pad = (n: number) => (n < 10 ? '0' : '') + n;
const uid = () => Math.random().toString(36).slice(2, 10);

// add minutes to HH:mm
function hhmmPlus(hhmm: string, minutes: number) {
  const [h, m] = hhmm.split(':').map(Number);
  const total = h * 60 + m + minutes;
  const h2 = Math.floor(total / 60) % 24;
  const m2 = total % 60;
  return `${pad(h2)}:${pad(m2)}`;
}

// Monday of the week for a given date (local)
function mondayOf(d: Date) {
  const res = new Date(d.getFullYear(), d.getMonth(), d.getDate());
  const dow = res.getDay();               // 0 Sun .. 6 Sat
  const delta = dow === 0 ? -6 : 1 - dow; // shift back to Mon
  res.setDate(res.getDate() + delta);
  res.setHours(0,0,0,0);
  return res;
}
const iso = (x: Date) => `${x.getFullYear()}-${pad(x.getMonth()+1)}-${pad(x.getDate())}`;

@Component({
  standalone: true,
  selector: 'app-schedule',
  imports: [
    CommonModule,
    MatIconModule,
    MatButtonModule,
    MatButtonToggleModule,
    MatTooltipModule,
    MatDialogModule
  ],
  templateUrl: './schedule.html',
  styleUrls: ['./schedule.scss']
})
export class ScheduleComponent {
  private dialog = inject(MatDialog);

  daysLabels = days;
  daysIdx = [0,1,2,3,4,5,6];

  // ---- Week navigation ------------------------------------------------------
  private weekOffset = signal(0);                // 0 = this week, -1 prev, +1 next, etc.
  private weekStart = computed(() => {
    const today = new Date();
    today.setDate(today.getDate() + this.weekOffset()*7);
    return mondayOf(today);
  });
  weekLabel = computed(() => {
    const mon = this.weekStart();
    const sun = new Date(mon); sun.setDate(mon.getDate()+6);
    const fmt = (x: Date) => `${x.getFullYear()}-${pad(x.getMonth()+1)}-${pad(x.getDate())}`;
    return `${fmt(mon)} → ${fmt(sun)}`;
  });
  private weekKey = computed(() => iso(this.weekStart()));

  prevWeek(){ this.saveCurrentWeek(); this.weekOffset.update(v => v - 1); this.loadWeek(); }
  nextWeek(){ this.saveCurrentWeek(); this.weekOffset.update(v => v + 1); this.loadWeek(); }
  thisWeek(){ this.saveCurrentWeek(); this.weekOffset.set(0); this.loadWeek(true); }

  // ---- Per-week store -------------------------------------------------------
  // Key = Monday ISO date (YYYY-MM-DD), Value = slots array for that week
  private store: Record<string, Slot[]> = {};

  // working set for the *current* week in view
  private _slots = signal<Slot[]>([]);

  // Initial seed: put your existing sample slots into "this week"
  constructor() {
    const seedKey = this.weekKey();
    this.store[seedKey] = [
      { id: uid(), dayIdx: 0, start: '09:00', duration: 25, modalities: ['chat'] },
      { id: uid(), dayIdx: 0, start: '10:00', duration: 25, modalities: ['voice','video'] },
      { id: uid(), dayIdx: 3, start: '13:00', duration: 25, modalities: ['video'] }
    ];
    this.loadWeek(true);
  }

  private loadWeek(reset = false) {
    const key = this.weekKey();
    const arr = this.store[key] ?? [];
    // set a fresh array to keep signal updates clean
    this._slots.set(reset ? [...arr] : [...arr]);
  }

  private saveCurrentWeek() {
    // persist in-memory when leaving a week
    this.store[this.weekKey()] = [...this._slots()];
  }

  // ---- Filter + per-day view -----------------------------------------------
  activeFilter = signal<'all' | Modality>('all');

  slotsForDay = (d: number) => computed(() => {
    const filter = this.activeFilter();
    return this._slots()
      .filter(s => s.dayIdx === d)
      .filter(s => filter === 'all' ? true : s.modalities.includes(filter))
      .sort((a, b) => a.start.localeCompare(b.start));
  });

  timeRange(s: Slot) { return `${s.start}–${hhmmPlus(s.start, s.duration)}`; }
  classFor(s: Slot) {
    return {
      chat:  s.modalities.length === 1 && s.modalities[0] === 'chat',
      voice: s.modalities.length === 1 && s.modalities[0] === 'voice',
      video: s.modalities.length === 1 && s.modalities[0] === 'video',
      multi: s.modalities.length > 1
    };
  }

  // ---- Create / Edit / Delete ----------------------------------------------
  addSlot(dayIdx: number) {
    const sameDay = this._slots().filter(s => s.dayIdx === dayIdx).map(s => ({ start: s.start, duration: s.duration }));
    const data: SlotDialogData = { dayIdx, allSlots: sameDay };

    this.dialog.open(SlotDialogComponent, { data, panelClass: 'medtik-dialog' })
      .afterClosed()
      .subscribe((res?: SlotDialogResult) => {
        if (!res) return;
        this._slots.update(x => [...x, {
          id: uid(),
          dayIdx,
          start: res.start,
          duration: res.duration,
          modalities: res.modalities,
          notes: res.notes || ''
        }]);
        this.saveCurrentWeek();
      });
  }

  editSlot(s: Slot) {
    const sameDay = this._slots()
      .filter(k => k.dayIdx === s.dayIdx && k.id !== s.id)
      .map(k => ({ start: k.start, duration: k.duration }));

    const data: SlotDialogData = { dayIdx: s.dayIdx, slot: { ...s }, allSlots: sameDay };

    this.dialog.open(SlotDialogComponent, { data, panelClass: 'medtik-dialog' })
      .afterClosed()
      .subscribe((res?: (SlotDialogResult & { delete?: true })) => {
        if (!res) return;
        if (res.delete) {
          this._slots.update(x => x.filter(k => k.id !== s.id));
          this.saveCurrentWeek();
          return;
        }
        this._slots.update(x => x.map(k => k.id === s.id ? {
          ...k,
          start: res.start,
          duration: res.duration,
          modalities: res.modalities,
          notes: res.notes || ''
        } : k));
        this.saveCurrentWeek();
      });
  }

  setFilter(v: 'all' | Modality) { this.activeFilter.set(v); }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\schedule\slot-dialog.html =====

<h2 mat-dialog-title>
  <mat-icon>schedule</mat-icon>
  {{ data.slot ? 'Edit slot' : 'Add slot' }}
</h2>

<mat-dialog-content class="content">
  <!-- Use a form group so we can bind with formControlName -->
  <form [formGroup]="form" class="content">
    <div class="row">
      <mat-form-field appearance="outline" class="field">
        <mat-label>Start time</mat-label>
        <input matInput type="time" formControlName="start" />
      </mat-form-field>

      <mat-form-field appearance="outline" class="field">
        <mat-label>Duration (min)</mat-label>
        <input matInput type="number" min="5" max="180" formControlName="duration" />
      </mat-form-field>
    </div>

    <div class="mods">
      <label>Available modalities</label>
      <div class="checks">
        <mat-checkbox formControlName="chat">
          <mat-icon class="chip chat">chat</mat-icon> Chat
        </mat-checkbox>
        <mat-checkbox formControlName="voice">
          <mat-icon class="chip voice">call</mat-icon> Voice
        </mat-checkbox>
        <mat-checkbox formControlName="video">
          <mat-icon class="chip video">videocam</mat-icon> Video
        </mat-checkbox>
      </div>
      <div class="form-hint" *ngIf="noModSelected">Select at least one modality.</div>
      <div class="form-hint warn" *ngIf="form.hasError('overlap')">This time overlaps an existing slot.</div>
    </div>

    <mat-form-field appearance="outline" class="field full">
      <mat-label>Notes (optional)</mat-label>
      <textarea matInput rows="3" formControlName="notes"></textarea>
    </mat-form-field>
  </form>
</mat-dialog-content>

<mat-dialog-actions align="end">
  <button mat-button (click)="cancel()">Cancel</button>
  <button mat-button color="warn" *ngIf="data.slot" (click)="remove()">Delete</button>
  <button mat-flat-button color="primary" (click)="save()">Save</button>
</mat-dialog-actions>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\schedule\slot-dialog.scss =====

/* Dialog surface already made solid via .medtik-dialog in global styles */

/* Layout */
mat-dialog-content.content {
  /* push the first row down from the title so labels aren’t clipped */
  padding-top: 12px;
}

.content {
  display: grid;
  gap: 1rem;

  .row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;

    @media (max-width: 720px) {
      grid-template-columns: 1fr;
    }
  }
  .field.full { grid-column: 1 / -1; }
}

/* Fix cropped labels & input vertical rhythm (Angular Material v17) */
.mat-mdc-form-field {
  /* give the outline a bit more vertical padding so the floating label clears the top */
  --mat-form-field-container-vertical-padding: 16px;
}
.mdc-text-field--outlined .mdc-text-field__input {
  padding-top: 12px !important;
  padding-bottom: 12px !important;
  line-height: 1 !important;
}

/* Modalities row */
.mods {
  display: grid;
  gap: .5rem;

  label { color: var(--muted); font-size: .9rem; }

  .checks {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem 1.5rem;
    align-items: center;

    /* round colored icon “chips” perfectly centered */
    .chip {
      width: 26px; height: 26px;
      border-radius: 1300px;
      display: inline-grid;
      place-items: center;
      margin-right: .2rem;   /* (fixed the space in 0.2 rem) */
      font-size: 12px;
      box-shadow: 0 0 0 1px rgba(255,255,255,.08) inset;
    }
    .chat  { background: rgba(68,128,255,.18);  color: #7ea6ff; }
    .voice { background: rgba(0,176,106,.18);   color: #62d2a2; }
    .video { background: rgba(139,92,246,.18);  color: #b7a5ff; }
  }

  .form-hint { color: #ff9e66; font-size: .85rem; }
  .form-hint.warn { color: #ff7a7a; }
}

/* Buttons row */
mat-dialog-actions { margin-top: .25rem; }



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\schedule\slot-dialog.ts =====

import { Component, Inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormControl, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { MatDialogModule, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';

export type Modality = 'chat' | 'voice' | 'video';

export interface SlotDialogData {
  dayIdx: number;
  slot?: { start: string; duration: number; modalities: Modality[]; notes?: string };
  /** Only slots on the same day for overlap detection */
  allSlots?: { start: string; duration: number }[];
}

export interface SlotDialogResult {
  start: string;
  duration: number;
  modalities: Modality[];
  notes?: string;
}

/** Union so we can return a delete intent cleanly */
export type SlotDialogClose = SlotDialogResult | { delete: true };

@Component({
  standalone: true,
  selector: 'app-slot-dialog',
  templateUrl: './slot-dialog.html',
  styleUrls: ['./slot-dialog.scss'],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatDialogModule,
    MatFormFieldModule,
    MatInputModule,
    MatCheckboxModule,
    MatButtonModule,
    MatIconModule
  ]
})
export class SlotDialogComponent {
  /** keep as any-shaped form so bracket access works in template without strict errors */
  form!: FormGroup;
  /** store injected data here (with a safe fallback) */
  data!: SlotDialogData;

  constructor(
    private dialogRef: MatDialogRef<SlotDialogComponent, SlotDialogClose | undefined>,
    @Inject(MAT_DIALOG_DATA) injected: SlotDialogData | null
  ) {
    // Fallback so we never crash if no data was provided
    this.data = injected ?? { dayIdx: 0, allSlots: [] };

    // Build the form AFTER data is available
    this.form = new FormGroup({
      start: new FormControl<string>(this.data.slot?.start ?? '09:00', {
        nonNullable: true,
        validators: [Validators.required, Validators.pattern(/^\d{2}:\d{2}$/)]
      }),
      duration: new FormControl<number>(this.data.slot?.duration ?? 25, {
        nonNullable: true,
        validators: [Validators.required, Validators.min(5), Validators.max(180)]
      }),
      chat: new FormControl<boolean>(
        this.data.slot ? this.data.slot.modalities.includes('chat') : true,
        { nonNullable: true }
      ),
      voice: new FormControl<boolean>(
        this.data.slot ? this.data.slot.modalities.includes('voice') : false,
        { nonNullable: true }
      ),
      video: new FormControl<boolean>(
        this.data.slot ? this.data.slot.modalities.includes('video') : false,
        { nonNullable: true }
      ),
      notes: new FormControl<string>(this.data.slot?.notes ?? '', { nonNullable: true })
    });
  }

  // --- helpers ---
  get noModSelected(): boolean {
    const v = this.form.value as any;
    return !v.chat && !v.voice && !v.video;
  }

  private toMinutes(hhmm: string): number {
    const [h, m] = hhmm.split(':').map(Number);
    return h * 60 + m;
  }

  private overlaps(start: string, duration: number): boolean {
    const list = this.data.allSlots ?? [];
    const s1 = this.toMinutes(start);
    const e1 = s1 + duration;
    return list.some(x => {
      const s2 = this.toMinutes(x.start);
      const e2 = s2 + x.duration;
      return Math.max(s1, s2) < Math.min(e1, e2);
    });
  }

  // --- actions ---
  cancel() { this.dialogRef.close(); }

  remove() { this.dialogRef.close({ delete: true }); }

  save() {
    if (this.form.invalid) return;
    if (this.noModSelected) return;

    const v = this.form.getRawValue() as any;

    if (this.overlaps(v.start, v.duration)) {
      this.form.setErrors({ overlap: true });
      return;
    }

    const modalities: Modality[] = [];
    if (v.chat)  modalities.push('chat');
    if (v.voice) modalities.push('voice');
    if (v.video) modalities.push('video');

    const result: SlotDialogResult = {
      start: v.start,
      duration: v.duration,
      modalities,
      notes: (v.notes || '').trim()
    };
    this.dialogRef.close(result);
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\settings\settings.html =====

<div class="settings-wrap">
  <!-- Header -->
  <div class="toolbar">
    <div class="title">
      <span class="glowdot"></span>
      <h2>Settings</h2>
    </div>
  </div>

  <div class="grid">
    <!-- Change Password -->
    <section class="card neo">
      <header class="section-head">
        <mat-icon>lock_reset</mat-icon>
        <h3>Change password</h3>
      </header>

      <form [formGroup]="passwordForm" class="pwd">
        <mat-form-field appearance="outline" class="field full">
          <mat-label>Current password</mat-label>
          <input matInput [type]="'password'" formControlName="oldPassword" autocomplete="current-password">
          <mat-error *ngIf="passwordForm.controls['oldPassword'].invalid && passwordForm.controls['oldPassword'].touched">
            Required.
          </mat-error>
        </mat-form-field>

        <mat-form-field appearance="outline" class="field">
          <mat-label>New password</mat-label>
          <input matInput [type]="'password'" formControlName="newPassword" autocomplete="new-password">
          <mat-error *ngIf="passwordForm.controls['newPassword'].hasError('required') && passwordForm.controls['newPassword'].touched">
            Required.
          </mat-error>
          <mat-error *ngIf="passwordForm.controls['newPassword'].hasError('minlength') && passwordForm.controls['newPassword'].touched">
            Min 8 characters.
          </mat-error>
          <mat-error *ngIf="passwordForm.controls['newPassword'].hasError('pattern') && passwordForm.controls['newPassword'].touched">
            Use letters and numbers.
          </mat-error>
        </mat-form-field>

        <mat-form-field appearance="outline" class="field">
          <mat-label>Confirm new password</mat-label>
          <input matInput [type]="'password'" formControlName="confirm" autocomplete="new-password">
          <mat-error *ngIf="passwordForm.hasError('passwordMismatch') && passwordForm.controls['confirm'].touched">
            Passwords don’t match.
          </mat-error>
        </mat-form-field>

        <div class="actions">
          <button mat-stroked-button class="neon" (click)="changePassword()">
            <mat-icon>key</mat-icon> Update password
          </button>
        </div>
      </form>
    </section>
  </div>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\settings\settings.scss =====

.settings-wrap { padding: 1rem; }

/* Header */
.toolbar {
  display: flex; align-items: center; justify-content: space-between; gap: 1rem; margin-bottom: 1rem;
  .title { display: flex; align-items: center; gap: .6rem;
    h2 { margin: 0; font-weight: 900; letter-spacing: .3px; }
    .glowdot {
      width: 10px; height: 10px; border-radius: 50%;
      background: radial-gradient(circle at 30% 30%, #71c2ff, #3b8bd3 40%, transparent 65%);
      box-shadow: 0 0 24px rgba(59,139,211,.8);
    }
  }
}

/* Grid */
.grid { display: grid; gap: 1rem; grid-template-columns: repeat(1); }
@media (max-width: 1080px) { .grid { grid-template-columns: 1fr; } }

/* Futuristic card (neon/glass) */
.card.neo {
  position: relative;
  background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
  border: 1px solid rgba(255,255,255,.08);
  border-radius: 16px;
  box-shadow: 0 20px 60px rgba(0,0,0,.45);
  padding: .9rem;
  overflow: hidden;

  /* animated border halo */
  &::before {
    content: '';
    position: absolute; inset: -2px;
    background:
      conic-gradient(from 0deg,
        rgba(113,194,255,.75),
        rgba(183,140,255,.75),
        rgba(29,183,160,.75),
        rgba(113,194,255,.75));
    filter: blur(18px); opacity: .18;
    transition: opacity .25s var(--ease);
    z-index: 0;
  }
  &:hover::before { opacity: .28; }
}

/* section header */
.section-head {
  position: relative; z-index: 1;
  display: flex; align-items: center; gap: .6rem; margin-bottom: .55rem;
  h3 { margin: 0; font-weight: 800; letter-spacing: .2px; }
  mat-icon {
    border: 1px solid rgba(255,255,255,.10);
    background: rgba(255,255,255,.06);
    border-radius: 12px; padding: .35rem;
  }
}

/* profile layout */
.profile { position: relative; z-index: 1; display: grid; grid-template-columns: auto 1fr; gap: 1rem; align-items: start; }
.avatar {
  position: relative; width: 92px; height: 92px; border-radius: 50%;
  overflow: hidden; border: 1px solid rgba(255,255,255,.10); box-shadow: 0 10px 25px rgba(0,0,0,.35);
  img { width: 100%; height: 100%; object-fit: cover; display: block; }
  .change {
    position: absolute; right: -8px; bottom: -8px;
    width: 38px; height: 38px; border-radius: 50%;
    display: grid; place-items: center; background: rgba(255,255,255,.12);
    border: 1px solid rgba(255,255,255,.18); cursor: pointer;
    input { display: none; }
    mat-icon { font-size: 20px; width: 20px; height: 20px; }
  }
}
.form { display: grid; gap: .75rem; grid-template-columns: 1fr 1fr; }
.field.full { grid-column: 1 / -1; }
.actions { display: flex; justify-content: left; margin-top: .5rem; }

/* password */
.pwd { display: grid; gap: .75rem; grid-template-columns: 1fr 1fr; }
.pwd .field.full { grid-column: 1 / -1; }

/* notifications */
.notis .row { display: grid; gap: 1rem; grid-template-columns: 1fr 1fr; }
@media (max-width: 900px) { .notis .row { grid-template-columns: 1fr; } }
.notis .group { display: grid; gap: .35rem; }
.notis .label { font-weight: 700; letter-spacing: .2px; opacity: .95; }

/* neon buttons */
.neon {
  position: relative;
  border-radius: 12px;
  box-shadow: 0 8px 30px rgba(59,139,211,.25);
}
.neon:hover { box-shadow: 0 12px 38px rgba(59,139,211,.35); }

/* Fix cropped labels for your theme */
.mdc-text-field--outlined .mdc-text-field__input { padding-top: 12px !important; padding-bottom: 12px !important; line-height: 1 !important; }
.mat-mdc-form-field { --mat-form-field-container-vertical-padding: 15px; }



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\settings\settings.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Settings } from './settings';

describe('Settings', () => {
  let component: Settings;
  let fixture: ComponentFixture<Settings>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Settings]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Settings);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\doctor\pages\settings\settings.ts =====

import { Component, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  ReactiveFormsModule, FormGroup, FormControl, Validators, AbstractControl, ValidationErrors
} from '@angular/forms';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';

@Component({
  standalone: true,
  selector: 'app-settings',
  templateUrl: './settings.html',
  styleUrls: ['./settings.scss'],
  imports: [
    CommonModule, ReactiveFormsModule,
    // Material
    MatIconModule, MatButtonModule, MatTooltipModule,
    MatFormFieldModule, MatInputModule, MatSelectModule,
    MatSlideToggleModule, MatSnackBarModule
  ]
})
export class DoctorSettingsComponent {
  private snack = inject(MatSnackBar);

  // ---------- Profile ----------
  avatarUrl = signal<string>('https://i.pravatar.cc/120?img=13');

  countries = [
    { code: 'EG', name: 'Egypt' },
    { code: 'SA', name: 'Saudi Arabia' },
    { code: 'AE', name: 'United Arab Emirates' },
    { code: 'US', name: 'United States' },
    { code: 'GB', name: 'United Kingdom' }
  ];
  languages = [
    { code: 'en', name: 'English' },
    { code: 'ar', name: 'العربية' },
  ];
  timezones = [
    'Africa/Cairo','Asia/Riyadh','Asia/Dubai','Europe/London','America/New_York'
  ];

  profileForm = new FormGroup({
    fullName: new FormControl<string>('Sarah Ahmed', { nonNullable: true, validators: [Validators.required, Validators.minLength(3)] }),
    dob:      new FormControl<string>('1992-07-12'),
    phone:    new FormControl<string>('+20 10 1234 5678'),
    country:  new FormControl<string>('EG', { nonNullable: true }),
    language: new FormControl<string>('en', { nonNullable: true }),
    timezone: new FormControl<string>('Africa/Cairo', { nonNullable: true })
  });

  onPickAvatar(ev: Event) {
    const input = ev.target as HTMLInputElement | null;
    const file = input?.files?.[0];
    if (!file) return;
    try { URL.revokeObjectURL(this.avatarUrl()); } catch {}
    this.avatarUrl.set(URL.createObjectURL(file));
    this.snack.open('Photo updated (local preview)', 'OK', { duration: 1500 });
  }

  saveProfile() {
    if (this.profileForm.invalid) { this.profileForm.markAllAsTouched(); return; }
    // TODO: backend call
    this.snack.open('Profile saved', 'OK', { duration: 1200 });
  }

  // ---------- Change Password ----------
  passwordForm = new FormGroup(
    {
      oldPassword: new FormControl<string>('', { nonNullable: true, validators: [Validators.required] }),
      newPassword: new FormControl<string>('', {
        nonNullable: true,
        validators: [
          Validators.required,
          Validators.minLength(8),
          // at least one letter & one number (light rule for demo)
          Validators.pattern(/^(?=.*[A-Za-z])(?=.*\d).{8,}$/)
        ]
      }),
      confirm: new FormControl<string>('', { nonNullable: true, validators: [Validators.required] })
    },
    { validators: [matchPasswordValidator] } // group-level validator
  );

  changePassword() {
    if (this.passwordForm.invalid) { this.passwordForm.markAllAsTouched(); return; }

    const v = this.passwordForm.getRawValue();
    // TODO: call API with { oldPassword: v.oldPassword, newPassword: v.newPassword }
    // Here we just simulate success:
    this.passwordForm.reset({ oldPassword: '', newPassword: '', confirm: '' });
    this.snack.open('Password changed', 'OK', { duration: 1400 });
  }

  // ---------- Notifications (simplified) ----------
  notiForm = new FormGroup({
    push:      new FormControl<boolean>(true, { nonNullable: true }),
    email:     new FormControl<boolean>(true, { nonNullable: true }),
    appt:      new FormControl<boolean>(true, { nonNullable: true }),   // appointment reminders
    chat:      new FormControl<boolean>(true, { nonNullable: true }),   // chat replies
    marketing: new FormControl<boolean>(false, { nonNullable: true })   // promotions / tips
  });

  saveNotifications() {
    // TODO: backend call
    this.snack.open('Notification preferences saved', 'OK', { duration: 1200 });
  }
}

/** Cross-field validator: newPassword === confirm */
function matchPasswordValidator(group: AbstractControl): ValidationErrors | null {
  const newPass = group.get('newPassword')?.value;
  const conf    = group.get('confirm')?.value;
  if (!newPass || !conf) return null;
  return newPass === conf ? null : { passwordMismatch: true };
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\layout\patient-layout\patient-layout.html =====

<mat-sidenav-container class="shell">
  <mat-sidenav #snav mode="side" opened class="side" [@slideIn]>
    <div class="brand">
      <img class="brand-logo" [src]="logoUrl" alt="Medtik" />
      <span>Medtik</span>
    </div>

    <mat-nav-list>
      <a mat-list-item routerLink="dashboard" routerLinkActive="active">
        <mat-icon>dashboard</mat-icon><span>Dashboard</span>
      </a>
      <a mat-list-item routerLink="search" routerLinkActive="active">
        <mat-icon>search</mat-icon><span>Find Doctors</span>
      </a>
      <a mat-list-item routerLink="appointments" routerLinkActive="active">
        <mat-icon>event</mat-icon><span>Appointments</span>
      </a>
      <a mat-list-item routerLink="payments" routerLinkActive="active">
        <mat-icon>receipt_long</mat-icon><span>Payments</span>
      </a>
      <a mat-list-item routerLink="records" routerLinkActive="active">
        <mat-icon>inventory_2</mat-icon><span>Medical Records</span>
      </a>
      <a mat-list-item routerLink="reviews" routerLinkActive="active">
        <mat-icon>star</mat-icon><span>My Reviews</span>
      </a>
      <a mat-list-item routerLink="notifications" routerLinkActive="active">
        <mat-icon matBadge="3" matBadgeColor="accent">notifications</mat-icon>
        <span>Notifications</span>
      </a>
      <a mat-list-item routerLink="settings" routerLinkActive="active">
        <mat-icon>settings</mat-icon><span>Settings</span>
      </a>
      <a mat-list-item routerLink="help" routerLinkActive="active">
        <mat-icon>help</mat-icon><span>Help</span>
      </a>
    </mat-nav-list>
  </mat-sidenav>

  <mat-sidenav-content class="content">
    <mat-toolbar class="topbar">
      <button mat-icon-button (click)="snav.toggle()" class="hide-desktop">
        <mat-icon>menu</mat-icon>
      </button>
      <span class="grow"></span>
      <button mat-icon-button routerLink="/patient/notifications">
        <mat-icon>notifications</mat-icon>
      </button>
      <button mat-button class="user">
        <mat-icon>account_circle</mat-icon> Me
      </button>
    </mat-toolbar>

    <div class="page">
      <router-outlet></router-outlet>
    </div>
  </mat-sidenav-content>
</mat-sidenav-container>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\layout\patient-layout\patient-layout.scss =====

/* ========= Patient Layout ========= */

/* Let the global aurora (styles.scss) show behind the layout */
:host {
  display: block;
  min-height: 100dvh;
  background: transparent;
}

/* Shell + sidenav */
.shell { height: 100dvh; background: transparent; }

/* Side nav */
.side {
  width: 280px;
  background: rgba(255,255,255,.02);
  backdrop-filter: blur(8px);
  border-right: 1px solid rgba(255,255,255,.06);
}

/* Brand block */
.brand {
  display: flex;
  align-items: center;
  gap: .75rem;
  padding: 1rem .9rem;
}
.brand-logo {
  width: 67px;  /* bigger logo */
  height: 67px;
  object-fit: contain;
  display: block;
  filter: drop-shadow(0 6px 16px rgba(42,118,183,.45));
}
.brand span {
  font-weight: 800;
  font-size: 1.05rem;
  letter-spacing: .3px;
}

/* List and active styles */
.mat-mdc-list-item .mat-icon {
  margin-right: .5rem;
  color: var(--muted);
}
.mat-mdc-list-item.active {
  background: rgba(255,255,255,.04);
  border-left: 3px solid rgba(42,118,183,.7);
}
.mat-mdc-list-item.active .mat-icon,
.mat-mdc-list-item.active span {
  color: var(--text);
}

/* Top bar + page area */
.content .topbar {
  background: transparent;
  color: var(--text);
  border-bottom: 1px solid rgba(255,255,255,.06);
}
.hide-desktop { display: none; }
.grow { flex: 1 1 auto; }
.page { padding: 1.25rem; }

/* Responsive */
@media (max-width: 960px) {
  .hide-desktop { display: inline-flex; }
  .side { width: 260px; }
  .brand-logo { width: 44px; height: 44px; }
}

/* Remove any grey backgrounds from Material containers so the global
   aurora background from styles.scss is visible everywhere */
:host ::ng-deep .mat-drawer-container,
:host ::ng-deep .mat-drawer-content,
:host ::ng-deep .mat-sidenav-content,
:host ::ng-deep .content,
:host ::ng-deep .page,
:host ::ng-deep .topbar {
  background: transparent !important;
}
//////////////////////////////////////////////////////////
/// 
/* —— PATIENT: glassy cards so they blend with the background but stay distinct —— */
:host ::ng-deep .page .card,
:host ::ng-deep .page mat-card,
:host ::ng-deep .page .mat-mdc-card {
  position: relative;
  border-radius: 20px;
  /* subtle glass over the aurora */
  background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02)) !important;
  backdrop-filter: blur(8px) saturate(120%);
  border: 1px solid rgba(255,255,255,.08);
  box-shadow: 0 10px 40px rgba(0,0,0,.35), inset 0 1px 0 rgba(255,255,255,.04);
}

/* a gentle edge to separate from the canvas without changing color */
:host ::ng-deep .page .card::after,
:host ::ng-deep .page mat-card::after,
:host ::ng-deep .page .mat-mdc-card::after {
  content: '';
  position: absolute;
  inset: 0;
  border-radius: inherit;
  pointer-events: none;
  /* faint vignette for depth */
  box-shadow: inset 0 0 0 1px rgba(255,255,255,.02), inset 0 -20px 60px rgba(0,0,0,.20);
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\layout\patient-layout\patient-layout.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PatientLayout } from './patient-layout';

describe('PatientLayout', () => {
  let component: PatientLayout;
  let fixture: ComponentFixture<PatientLayout>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [PatientLayout]
    })
    .compileComponents();

    fixture = TestBed.createComponent(PatientLayout);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\layout\patient-layout\patient-layout.ts =====

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatListModule } from '@angular/material/list';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatBadgeModule } from '@angular/material/badge';
import { MatDividerModule } from '@angular/material/divider';
import { trigger, transition, style, animate } from '@angular/animations';

@Component({
  selector: 'app-patient-layout',
  standalone: true,
  imports: [
    CommonModule, RouterModule,
    MatSidenavModule, MatToolbarModule, MatListModule,
    MatIconModule, MatButtonModule, MatBadgeModule, MatDividerModule
  ],
  templateUrl: './patient-layout.html',
  styleUrl: './patient-layout.scss',
  animations: [
    trigger('slideIn', [
      transition(':enter', [
        style({ transform: 'translateX(-8px)', opacity: 0 }),
        animate('300ms ease-out', style({ transform: 'none', opacity: 1 }))
      ])
    ])
  ]
})
export class PatientLayoutComponent {
  // Using your remote URL explicitly
  logoUrl = 'https://ik.imagekit.io/a2wpi1kd9/imgToUrl/image-to-url_HEow9eLbR';
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\appointments\appointments.html =====

<div class="appt-wrap">
  <!-- Header -->
  <div class="toolbar">
    <div class="title">
      <mat-icon>event_note</mat-icon>
      <h2>Appointments</h2>
    </div>
  </div>

  <!-- UPCOMING -->
  <section class="block">
    <h3 class="block-title">
      <span class="glow-dot up"></span>
      <mat-icon>schedule</mat-icon> Upcoming
    </h3>

    <div *ngIf="upcoming().length; else emptyUpcoming" class="grid">
      <div class="card neon" *ngFor="let a of upcoming()">
        <div class="head">
          <img class="avatar" [src]="a.doctor.avatar" alt="">
          <div class="info">
            <div class="name">{{ a.doctor.name }}</div>
            <div class="meta">
              <span class="dept">{{ a.doctor.department }}</span>
              <span class="dot">•</span>
              <span class="when">{{ toLocal(a.startUtc) }}</span>
            </div>
          </div>
          <div class="price">
            <div class="val">{{ a.price.value }} {{ a.price.currency }}</div>
            <div class="muted">per {{ a.modality }}</div>
          </div>
        </div>

        <div class="tags">
          <span class="pill status" [ngClass]="statusClass(a)">
            <mat-icon *ngIf="a.status==='scheduled'">schedule</mat-icon>
            <mat-icon *ngIf="a.status==='completed'">check_circle</mat-icon>
            <mat-icon *ngIf="a.status==='canceled'">cancel</mat-icon>
            <mat-icon *ngIf="a.status==='no_show'">report</mat-icon>
            {{ a.status }}
          </span>
          <span class="pill modality" [ngClass]="a.modality">{{ a.modality }}</span>
          <span class="countdown" *ngIf="a.status==='scheduled'">{{ countdown(a) }}</span>
        </div>

        <div class="row-actions">
          <button
            mat-flat-button
            color="primary"
            class="join"
            [disabled]="!canJoin(a)"
            (click)="join(a)"
            matTooltip="Join becomes active 10 minutes before start">
            <mat-icon>play_circle</mat-icon>
            Join now
          </button>
          <button mat-stroked-button (click)="reschedule(a)">
            <mat-icon>calendar_month</mat-icon> Reschedule
          </button>
          <button mat-stroked-button (click)="addToCalendar(a)">
            <mat-icon>event</mat-icon> Add to calendar
          </button>
          <button mat-button color="warn" (click)="cancel(a)">
            <mat-icon>cancel</mat-icon> Cancel
          </button>
        </div>

      
      </div>
    </div>

    <ng-template #emptyUpcoming>
      <div class="empty"><mat-icon>event_busy</mat-icon> No upcoming appointments</div>
    </ng-template>
  </section>

  <mat-divider></mat-divider>

  <!-- PAST -->
  <section class="block">
    <h3 class="block-title">
      <span class="glow-dot past"></span>
      <mat-icon>history</mat-icon> Past
    </h3>

    <div *ngIf="past().length; else emptyPast" class="grid">
      <div class="card glass" *ngFor="let a of past()">
        <div class="head">
          <img class="avatar" [src]="a.doctor.avatar" alt="">
          <div class="info">
            <div class="name">{{ a.doctor.name }}</div>
            <div class="meta">
              <span class="dept">{{ a.doctor.department }}</span>
              <span class="dot">•</span>
              <span class="when">{{ toLocal(a.startUtc) }}</span>
            </div>
          </div>
          <div class="price">
            <div class="val">{{ a.price.value }} {{ a.price.currency }}</div>
            <div class="muted">per {{ a.modality }}</div>
          </div>
        </div>

        <div class="tags">
          <span class="pill status" [ngClass]="statusClass(a)">{{ a.status }}</span>
          <span class="pill modality" [ngClass]="a.modality">{{ a.modality }}</span>
        </div>

        <div class="row-actions">
          <button mat-stroked-button (click)="addToCalendar(a)" matTooltip="Save to your calendar">
            <mat-icon>event</mat-icon> Save event
          </button>
          <button mat-stroked-button matTooltip="Book again with this doctor" [routerLink]="['/patient/booking', a.doctorId]">
            <mat-icon>refresh</mat-icon> Book again
          </button>
        </div>
      </div>
    </div>

    <ng-template #emptyPast>
      <div class="empty"><mat-icon>hourglass_empty</mat-icon> No past appointments</div>
    </ng-template>
  </section>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\appointments\appointments.scss =====

.appt-wrap { padding: 1rem; }

/* Header */
.toolbar {
  display: flex; align-items: center; justify-content: space-between; gap: 1rem; margin-bottom: 1rem;
  .title { display: flex; align-items: center; gap: .6rem;
    h2 { margin: 0; font-weight: 800; letter-spacing: .2px; }
  }
}

/* Sections */
.block { margin: .25rem 0 1rem; }
.block-title {
  display: inline-flex; align-items: center; gap: .5rem; margin: 0 0 .7rem; font-weight: 700;
  .glow-dot {
    width: 8px; height: 8px; border-radius: 999px; display: inline-block;
    box-shadow: 0 0 16px currentColor;
    &.up   { background: #7ea6ff; color: #7ea6ff; }
    &.past { background: #9fa6b2; color: #9fa6b2; }
  }
}

/* Grid */
.grid { display: grid; gap: 1rem; grid-template-columns: repeat(2, minmax(0, 1fr)); }
@media (max-width: 1000px) { .grid { grid-template-columns: 1fr; } }

/* Cards */
.card {
  background: rgba(255,255,255,.02);
  border: 1px solid rgba(255,255,255,.06);
  border-radius: 16px;
  box-shadow: 0 10px 25px rgba(0,0,0,.25);
  padding: .85rem;
  transition: transform .16s ease, background .16s ease, border-color .16s ease, box-shadow .16s ease;

  &.neon  { box-shadow: 0 10px 25px rgba(0,0,0,.25), 0 0 24px rgba(85,145,255,.15) inset; }
  &.glass { backdrop-filter: blur(6px); background: linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.02)); }

  &:hover { transform: translateY(-2px); background: rgba(255,255,255,.04); border-color: rgba(255,255,255,.12); }

  .head {
    display: grid; grid-template-columns: auto 1fr auto; gap: .75rem; align-items: center;
    .avatar { width: 48px; height: 48px; border-radius: 50%; object-fit: cover; }
    .info {
      .name { font-weight: 700; }
      .meta { opacity: .85; display: flex; gap: .35rem; align-items: center; flex-wrap: wrap; }
      .dot { opacity: .5; }
    }
    .price { text-align: right; .val { font-weight: 800; } .muted { opacity: .7; font-size: .85rem; } }
  }

  .tags { display: flex; gap: .5rem; margin-top: .6rem; align-items: center; flex-wrap: wrap; }
  .pill {
    padding: .2rem .5rem; border-radius: 999px; font-size: .75rem;
    border: 1px solid rgba(255,255,255,.10); background: rgba(255,255,255,.06); text-transform: capitalize;
    &.modality.chat  { border-color: rgba(85,145,255,.5);  background: rgba(85,145,255,.12);  }
    &.modality.voice { border-color: rgba(66,211,146,.5);  background: rgba(66,211,146,.12);  }
    &.modality.video { border-color: rgba(183,140,255,.5); background: rgba(183,140,255,.12); }
  }
  .status.scheduled { border-color: rgba(85,145,255,.4);  background: rgba(85,145,255,.10); }
  .status.completed { border-color: rgba(66,211,146,.4);  background: rgba(66,211,146,.10); }
  .status.canceled  { border-color: rgba(255,120,120,.4); background: rgba(255,120,120,.10); }
  .status.no_show   { border-color: rgba(255,186,120,.4); background: rgba(255,186,120,.10); }

  .countdown { margin-left: auto; font-weight: 700; opacity: .85; }

  .row-actions {
    display: flex; flex-wrap: wrap; gap: .5rem; margin-top: .7rem;
    .join { font-weight: 700; }
  }

  .kv {
    margin-top: .5rem; display: grid; gap: .35rem; grid-template-columns: repeat(3, minmax(0, 1fr));
    .k { opacity: .75; margin-right: .35rem; }
    .v { }
    @media (max-width: 800px) { grid-template-columns: 1fr 1fr; }
    @media (max-width: 520px) { grid-template-columns: 1fr; }
  }
}

.empty {
  display: inline-flex; align-items: center; gap: .4rem;
  padding: .6rem .75rem; border-radius: 10px;
  border: 1px dashed rgba(255,255,255,.15); opacity: .8;
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\appointments\appointments.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Appointments } from './appointments';

describe('Appointments', () => {
  let component: Appointments;
  let fixture: ComponentFixture<Appointments>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Appointments]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Appointments);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\appointments\appointments.ts =====

import { Component, computed, signal, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router } from '@angular/router';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatDividerModule } from '@angular/material/divider';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';

type Modality = 'chat' | 'voice' | 'video';
type Price = { currency: 'EGP' | 'SAR' | 'AED'; value: number };

type Payment =
  | { status: 'paid' | 'pending' | 'failed' | 'refunded'; method?: 'card'|'wallet'|'cash'; last4?: string; txnId?: string }
  | { status: 'pending' | 'failed' };

type Meeting = { provider: 'internal' | 'google' | 'zoom'; joinUrl?: string; passcode?: string };

type Appointment = {
  id: string;
  doctorId: string;
  patientId: string;
  startUtc: string;     // ISO in UTC
  endUtc: string;       // ISO in UTC
  durationMin: number;
  modality: Modality;
  status: 'scheduled' | 'completed' | 'canceled' | 'no_show';
  price: Price;
  payment: Payment;
  meeting?: Meeting;
  policies: { cancellation?: string; reschedule?: string; refund?: string };
  attachments: Array<{ id: string; name: string; url: string }>;
  notesFromPatient?: string;
  createdAt: string;
  updatedAt: string;
  doctor: { name: string; department: string; avatar: string; country: string };
};

// ---------- utils ----------
const pad = (n: number) => (n < 10 ? '0' : '') + n;
const toLocal = (isoUtc: string) =>
  new Date(isoUtc).toLocaleString(undefined, {
    weekday: 'short', year: 'numeric', month: 'short', day: '2-digit',
    hour: '2-digit', minute: '2-digit'
  });
const uid = () => Math.random().toString(36).slice(2, 10);

// ---- mock list (replace with API later) ----
function mockFetchAppointments(): Appointment[] {
  const now = new Date();

  const mk = (
    offsetMin: number,
    duration: number,
    status: Appointment['status'],
    modality: Modality,
    price: Price,
    docIdx = 5
  ): Appointment => {
    const start = new Date(now);
    start.setUTCMinutes(start.getUTCMinutes() + offsetMin);
    start.setUTCSeconds(0, 0);
    const end = new Date(start);
    end.setUTCMinutes(start.getUTCMinutes() + duration);
    return {
      id: uid(),
      doctorId: 'doc-123',
      patientId: 'pat-1',
      startUtc: start.toISOString(),
      endUtc: end.toISOString(),
      durationMin: duration,
      modality,
      status,
      price,
      payment: {
        status: (status === 'scheduled' || status === 'completed') ? 'paid' : 'pending',
        method: 'card',
        last4: '4242',
        txnId: 'pay_' + uid()
      },
      meeting: { provider: 'internal', joinUrl: '/patient/chat/thread-' + uid() },
      policies: {
        cancellation: 'Free cancellation up to 2 hours before visit.',
        reschedule: 'Reschedule up to 30 minutes before visit.',
        refund: 'No-show refunds are not available.'
      },
      attachments: [],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      doctor: {
        name: docIdx % 2 ? 'Dr. Sarah Ali' : 'Dr. Omar Khaled',
        department: docIdx % 2 ? 'Pediatrics' : 'Dermatology',
        avatar: `https://i.pravatar.cc/120?img=${docIdx}`,
        country: 'EG'
      }
    };
  };

  return [
    mk(+60,  25, 'scheduled', 'video', { currency: 'EGP', value: 180 }, 5),   // upcoming
    mk(+180, 25, 'scheduled', 'voice', { currency: 'EGP', value: 120 }, 6),   // upcoming
    mk(-180, 25, 'completed', 'chat',  { currency: 'EGP', value: 80  }, 7),   // past
    mk(-1440,25, 'no_show',  'video',  { currency: 'EGP', value: 180 }, 8),   // past
    mk(-2880,25, 'canceled', 'voice',  { currency: 'EGP', value: 120 }, 9),   // past
  ];
}

@Component({
  standalone: true,
  selector: 'app-appointments',
  templateUrl: './appointments.html',
  styleUrls: ['./appointments.scss'],
  imports: [CommonModule, RouterModule, MatIconModule, MatButtonModule, MatTooltipModule, MatDividerModule, MatSnackBarModule]
})
export class AppointmentsComponent {
  private router = inject(Router);
  private snack  = inject(MatSnackBar);

  // In a real app you’d fetch on init; for now use mock data:
  all = signal<Appointment[]>(mockFetchAppointments());

  // live clock for countdown / join window
  now = signal<number>(Date.now());
  private _timer = setInterval(() => this.now.set(Date.now()), 1000);
  ngOnDestroy() { clearInterval(this._timer); }

  // sections
  upcoming = computed(() =>
    this.all()
      .filter(a => new Date(a.startUtc).getTime() >= this.now())
      .sort((a,b) => new Date(a.startUtc).getTime() - new Date(b.startUtc).getTime())
  );
  past = computed(() =>
    this.all()
      .filter(a => new Date(a.startUtc).getTime() < this.now())
      .sort((a,b) => new Date(b.startUtc).getTime() - new Date(a.startUtc).getTime())
  );

  // helpers used in template
  toLocal = toLocal;

  statusClass(a: Appointment) {
    return {
      scheduled: a.status === 'scheduled',
      completed: a.status === 'completed',
      canceled:  a.status === 'canceled',
      no_show:   a.status === 'no_show'
    };
  }

  canJoin(a: Appointment) {
    if (a.status !== 'scheduled') return false;
    const openFrom = new Date(a.startUtc).getTime() - 10 * 60 * 1000;
    const closeAt  = new Date(a.endUtc).getTime();
    const t = this.now();
    return t >= openFrom && t <= closeAt;
  }

  countdown(a: Appointment) {
    const t = this.now();
    const start = new Date(a.startUtc).getTime();
    const diff = start - t;
    if (diff <= 0) return 'Starts soon';
    const mins = Math.floor(diff / 60000);
    const secs = Math.floor((diff % 60000) / 1000);
    return `${pad(mins)}:${pad(secs)}`;
  }

  paymentDetails(a: Appointment): { method?: 'card'|'wallet'|'cash'; last4?: string; txnId?: string } | null {
    const p = a.payment as any;
    return p && (p.method || p.last4 || p.txnId) ? p : null;
    // keeps template safe from union type errors
  }

  // actions
  join(a: Appointment) {
    if (!this.canJoin(a)) return;
    const url = a.meeting?.joinUrl || '';
    if (url.startsWith('/')) this.router.navigateByUrl(url);
    else window.open(url, '_blank');
  }

  reschedule(a: Appointment) {
    this.router.navigate(['/patient/booking', a.doctorId], { queryParams: { apptId: a.id } });
  }

  cancel(a: Appointment) {
    if (!confirm('Cancel this appointment?')) return;

    // Use update + literal typing to avoid status widening to string
    this.all.update(list =>
      list.map(x =>
        x.id === a.id
          ? { ...x, status: 'canceled' as const, updatedAt: new Date().toISOString() }
          : x
      )
    );

    this.snack.open('Appointment canceled', 'OK', { duration: 1800 });
  }

  addToCalendar(a: Appointment) {
    const toICSDate = (iso: string) => {
      const d = new Date(iso);
      return (
        d.getUTCFullYear().toString() +
        pad(d.getUTCMonth() + 1) +
        pad(d.getUTCDate()) +
        'T' +
        pad(d.getUTCHours()) +
        pad(d.getUTCMinutes()) +
        pad(d.getUTCSeconds()) +
        'Z'
      );
    };

    const ics = [
      'BEGIN:VCALENDAR',
      'VERSION:2.0',
      'PRODID:-//Medtik//Appointment//EN',
      'BEGIN:VEVENT',
      `UID:${a.id}@medtik`,
      `DTSTAMP:${toICSDate(new Date().toISOString())}`,
      `DTSTART:${toICSDate(a.startUtc)}`,
      `DTEND:${toICSDate(a.endUtc)}`,
      `SUMMARY:${a.modality.toUpperCase()} with ${a.doctor.name}`,
      `DESCRIPTION:Join link: ${a.meeting?.joinUrl ?? ''}\\nNotes: ${a.notesFromPatient ?? ''}`,
      'END:VEVENT',
      'END:VCALENDAR'
    ].join('\r\n');

    const blob = new Blob([ics], { type: 'text/calendar;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const aTag = document.createElement('a');
    aTag.href = url;
    aTag.download = `appointment-${a.id}.ics`;
    aTag.click();
    URL.revokeObjectURL(url);
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\booking\booking.html =====

<div class="booking-wrap">
  <!-- Title / breadcrumbs -->
  <div class="toolbar">
    <div class="title">
      <mat-icon>event_available</mat-icon>
      <h2>Book appointment</h2>
    </div>

    <div class="week-controls">
      <button mat-icon-button matTooltip="Previous week" (click)="prevWeek()">
        <mat-icon>chevron_left</mat-icon>
      </button>

      <span class="week">{{ weekLabel() }}</span>

      <button mat-icon-button matTooltip="Next week" (click)="nextWeek()">
        <mat-icon>chevron_right</mat-icon>
      </button>

      <button mat-stroked-button class="this-week" (click)="thisWeek()">This week</button>
    </div>
  </div>

  <!-- Doctor summary / price -->
  <div class="doctor-card">
    <img class="avatar" [src]="doctor().avatar" alt="">
    <div class="info">
      <div class="name">{{ doctor().name }}</div>
      <div class="meta">
        <span class="dept">{{ doctor().department }}</span>
        <span class="dot">•</span>
        <span class="country">{{ country() }}</span>
      </div>
    </div>
    <div class="price" *ngIf="price() as p">
      <div class="val">{{ p.value }} {{ p.currency }}</div>
      <div class="muted">per {{ modality() }}</div>
    </div>
  </div>

  <!-- Stepper -->
  <div class="steps">
    <div class="step" [class.active]="step()===1"><span>1</span> Choose modality</div>
    <div class="step" [class.active]="step()===2"><span>2</span> Pick time</div>
    <div class="step" [class.active]="step()===3"><span>3</span> Review & confirm</div>
  </div>

  <!-- Step 1: modality -->
<!-- Step 1: modality (animated cards) -->
<section *ngIf="step()===1" class="card modality">
  <h3>Select a consultation type</h3>

  <div class="mod-cards" role="group" aria-label="Choose modality">
    <!-- Chat -->
    <button type="button"
            class="mod-card chat"
            [class.active]="modality()==='chat'"
            (click)="setModality('chat')">
      <span class="halo"></span>
      <div class="icon"><mat-icon>chat</mat-icon></div>
      <div class="label">
        <strong>Chat</strong>
        <small>{{ doctor().prices[country()].chat }} {{ doctor().prices[country()].currency }}</small>
      </div>
    </button>

    <!-- Voice -->
    <button type="button"
            class="mod-card voice"
            [class.active]="modality()==='voice'"
            (click)="setModality('voice')">
      <span class="halo"></span>
      <div class="icon"><mat-icon>call</mat-icon></div>
      <div class="label">
        <strong>Voice</strong>
        <small>{{ doctor().prices[country()].voice }} {{ doctor().prices[country()].currency }}</small>
      </div>
    </button>

    <!-- Video -->
    <button type="button"
            class="mod-card video"
            [class.active]="modality()==='video'"
            (click)="setModality('video')">
      <span class="halo"></span>
      <div class="icon"><mat-icon>videocam</mat-icon></div>
      <div class="label">
        <strong>Video</strong>
        <small>{{ doctor().prices[country()].video }} {{ doctor().prices[country()].currency }}</small>
      </div>
    </button>
  </div>

  <div class="policies">
    <mat-icon>gavel</mat-icon>
    <span>{{ doctor().policies.cancellation }}</span>
  </div>

  <div class="actions">
    <button mat-flat-button color="primary" (click)="next()">Next</button>
  </div>
</section>
<!-- /Step 1 -->


  <!-- Step 2: time picker -->
  <section *ngIf="step()===2" class="card">
    <h3>Choose a time</h3>

    <div class="week-grid">
      <section class="day-card" *ngFor="let d of daysIdx">
        <header class="day-head">
          <div class="name">{{ daysLabels[d] }}</div>
          <div class="legend">
            <span class="chip chat">Chat</span>
            <span class="chip voice">Voice</span>
            <span class="chip video">Video</span>
          </div>
        </header>

        <div class="slots" *ngIf="(slotsForDay(d)()).length; else none">
          <button
            class="slot"
            *ngFor="let s of slotsForDay(d)()"
            [ngClass]="classFor(s)"
            type="button"
            (click)="pickSlot(s)"
            [disabled]="classFor(s).incompatible">
            <div class="time"><mat-icon>schedule</mat-icon>{{ timeRange(s) }}</div>
            <div class="mods">
              <span class="pill" *ngFor="let m of s.modalities">{{ m }}</span>
            </div>
          </button>
        </div>
        <ng-template #none>
          <div class="empty"><mat-icon>event_busy</mat-icon> No slots</div>
        </ng-template>
      </section>
    </div>

    <div class="actions">
      <button mat-button (click)="back()">Back</button>
      <button mat-flat-button color="primary" (click)="next()">Next</button>
    </div>
  </section>

  <!-- Step 3: review -->
  <section *ngIf="step()===3" class="card">
    <h3>Review & confirm</h3>
    <div class="review">
      <div><span class="muted">Type</span> <span class="pill big">{{ modality() }}</span></div>
      <div><span class="muted">When</span>
        <span class="pill big" *ngIf="selectedSlot() as s">{{ timeRange(s) }} ({{ daysLabels[s.dayIdx] }})</span>
      </div>
      <div *ngIf="price() as p"><span class="muted">Price</span> <span class="pill big">{{ p.value }} {{ p.currency }}</span></div>
    </div>

    <!-- Wrap inputs in a form + use formControlName (fixes TS2739) -->
    <form [formGroup]="form" class="form">
      <mat-form-field appearance="outline" class="field">
        <mat-label>Reason for consultation</mat-label>
        <textarea matInput rows="3" formControlName="reason"></textarea>
        <mat-error *ngIf="form.controls['reason'].invalid && form.controls['reason'].touched">Required</mat-error>
      </mat-form-field>

      <div class="attach">
        <mat-icon>attach_file</mat-icon>
        <label>
          Attach files (optional)
          <input
            type="file"
            (change)="form.controls['attachments'].setValue($event.target?.['files'] ?? null)"
            multiple>
        </label>
      </div>

      <mat-divider></mat-divider>

      <div class="policies">
        <mat-icon>policy</mat-icon>
        <div>
          <div>{{ doctor().policies.cancellation }}</div>
          <div>{{ doctor().policies.reschedule }}</div>
          <div>{{ doctor().policies.refund }}</div>
        </div>
      </div>
    </form>

    <div class="actions">
      <button mat-button (click)="back()">Back</button>
      <button mat-flat-button color="primary" (click)="confirm()" [disabled]="form.invalid">Confirm & pay</button>
    </div>
  </section>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\booking\booking.scss =====

.booking-wrap { padding: 1rem; }

/* Header */
.toolbar {
  display: flex; align-items: center; justify-content: space-between; gap: 1rem; margin-bottom: 1rem;
  .title { display: flex; align-items: center; gap: .6rem;
    h2 { margin: 0; font-weight: 800; letter-spacing: .2px; }
  }
  .week-controls {
    display: inline-flex; align-items: center; gap: .25rem; flex-wrap: wrap;
    .week { opacity: .8; padding: .25rem .5rem; border: 1px solid rgba(255,255,255,.07); border-radius: 10px; }
    .this-week { border-radius: 999px; padding: .25rem .6rem; line-height: 1.2; }
  }
}

/* Doctor mini card */
.doctor-card {
  display: grid; grid-template-columns: auto 1fr auto; gap: 1rem;
  align-items: center; margin-bottom: 1rem;
  background: rgba(255,255,255,.02); border: 1px solid rgba(255,255,255,.06);
  border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,.25); padding: .85rem;
  .avatar { width: 56px; height: 56px; border-radius: 50%; object-fit: cover; }
  .info { .name { font-weight: 700; } .meta { opacity: .8; display: flex; gap: .4rem; } .dot { opacity: .5; } }
  .price { text-align: right; .val { font-weight: 800; } .muted { opacity: .7; font-size: .85rem; } }
}

/* Stepper */
.steps { display: grid; grid-template-columns: repeat(3, minmax(0, 1fr)); gap: .5rem; margin: .5rem 0 1rem;
  .step { background: rgba(255,255,255,.02); border: 1px solid rgba(255,255,255,.06);
    padding: .5rem .75rem; border-radius: 12px; display: flex; align-items: center; gap: .5rem; opacity: .7;
    span { width: 18px; height: 18px; border-radius: 50%; display: grid; place-items: center; background: rgba(255,255,255,.08); font-size: .8rem; }
    &.active { opacity: 1; border-color: rgba(255,255,255,.12); }
  }
}

/* Card shell */
.card { background: rgba(255,255,255,.02); border: 1px solid rgba(255,255,255,.06);
  border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,.25); padding: .85rem; }
.card h3 { margin: 0 0 .75rem; }

/* Modality toggles */
.mods { border-radius: 9999px; overflow: hidden; }

/* Week grid (reuses the schedule design) */
.week-grid { display: grid; gap: 1rem; grid-template-columns: repeat(3, minmax(0, 1fr)); }
@media (max-width: 1200px) { .week-grid { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
@media (max-width: 720px)  { .week-grid { grid-template-columns: 1fr; } }

.day-card {
  background: rgba(255,255,255,.02); border: 1px solid rgba(255,255,255,.06);
  border-radius: 16px; padding: .85rem; box-shadow: 0 10px 25px rgba(0,0,0,.25);
  .day-head { display: flex; align-items: center; justify-content: space-between; gap: .75rem;
    padding-bottom: .5rem; margin-bottom: .5rem; border-bottom: 1px dashed rgba(255,255,255,.06);
    .name { font-weight: 700; }
    .legend { display: flex; gap: .4rem; flex-wrap: wrap; }
    .chip { font-size: .75rem; padding: .2rem .5rem; border-radius: 999px;
      border: 1px solid rgba(255,255,255,.08); background: rgba(255,255,255,.04);
      &.chat  { border-color: rgba(85,145,255,.5);  background: rgba(85,145,255,.08); }
      &.voice { border-color: rgba(66,211,146,.5);  background: rgba(66,211,146,.08); }
      &.video { border-color: rgba(183,140,255,.5); background: rgba(183,140,255,.08); }
    }
  }
  .slots { display: grid; gap: .6rem; }
  .slot {
    width: 100%; text-align: left;
    display: flex; align-items: center; justify-content: space-between; gap: 1rem;
    padding: .65rem .75rem; border-radius: 12px;
    border: 1px solid rgba(255,255,255,.06);
    background: rgba(255,255,255,.03);
    cursor: pointer; transition: transform .12s ease, background .12s ease, border-color .12s ease, box-shadow .12s ease;
    .time { display: flex; align-items: center; gap: .4rem; font-weight: 600; letter-spacing: .2px; }
    .mods { display: flex; gap: .4rem; }
    .pill { font-size: .75rem; padding: .15rem .5rem; border-radius: 999px; background: rgba(255,255,255,.05); border: 1px solid rgba(255,255,255,.08); text-transform: capitalize; }
    &:hover { transform: translateY(-1px); background: rgba(255,255,255,.05); }
    &.selected { box-shadow: 0 0 0 2px rgba(85,145,255,.45) inset; }
    &.incompatible { opacity: .45; cursor: not-allowed; }
  }
  .slot.chat  { border-left: 3px solid #5591ff; }
  .slot.voice { border-left: 3px solid #42d392; }
  .slot.video { border-left: 3px solid #b78cff; }
  .slot.multi { border-left: 3px solid #9adcff; }

  .empty { display: flex; align-items: center; gap: .4rem; padding: .65rem .75rem; border-radius: 12px; border: 1px dashed rgba(255,255,255,.10); opacity: .7; }
}

/* Review + form */
.review { display: grid; gap: .5rem; grid-template-columns: repeat(3, minmax(0, 1fr)); margin-bottom: .75rem;
  .muted { opacity: .7; margin-right: .35rem; }
  .pill.big { padding: .25rem .6rem; border-radius: 999px; border: 1px solid rgba(255,255,255,.08); background: rgba(255,255,255,.04); text-transform: capitalize; }
}
.form { display: grid; gap: .75rem; }
.attach { display: flex; align-items: center; gap: .5rem;
  input[type=file] { display: block; margin-top: .25rem; }
}
.policies { display: flex; gap: .6rem; align-items: flex-start; opacity: .9; }
.actions { display: flex; justify-content: flex-end; gap: .5rem; margin-top: .75rem; }

/* Form paddings to avoid cropped labels in your theme */
.mdc-text-field--outlined .mdc-text-field__input { padding-top: 12px !important; padding-bottom: 12px !important; line-height: 1 !important; }
.mat-mdc-form-field { --mat-form-field-container-vertical-padding: 15px; }
//////////////
// Modality //
/* Keep your existing page styles … */

/* ---------- Modality cards (animated) ---------- */
.modality-section {
  background: rgba(255,255,255,.03);
  border: 1px solid rgba(255,255,255,.06);
  border-radius: 16px;
  padding: 1rem 1rem 1.25rem;
  box-shadow: 0 10px 25px rgba(0,0,0,.25);
  margin-bottom: 1rem;

  .section-title {
    margin: .25rem 0 1rem 0;
    font-weight: 700;
    letter-spacing: .2px;
  }
}

.mod-cards {
  display: grid;
  grid-template-columns: repeat(3, minmax(0, 1fr));
  gap: .75rem;

  @media (max-width: 900px) { grid-template-columns: 1fr 1fr; }
  @media (max-width: 600px) { grid-template-columns: 1fr; }
}

.mod-card {
  position: relative;
  overflow: hidden;
  border-radius: 14px;
  border: 1px solid rgba(255,255,255,.08);
  background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
  color: #eaf0ff;
  display: grid;
  grid-template-columns: 44px 1fr;
  align-items: center;
  gap: .75rem;
  padding: .9rem .9rem;
  text-align: left;
  cursor: pointer;

  /* micro-anim */
  transform: translateY(0);
  transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease, background .18s ease;

  .halo {
    content: "";
    position: absolute;
    inset: -40% -20%;
    background: radial-gradient(80% 80% at 50% 50%, currentColor 0%, transparent 60%);
    opacity: 0; pointer-events: none;
    transition: opacity .25s ease;
  }

  .icon {
    width: 44px; height: 44px;
    border-radius: 12px;
    display: grid; place-items: center;
    background: rgba(255,255,255,.06);
    border: 1px solid rgba(255,255,255,.08);

    mat-icon { font-size: 22px; width: 22px; height: 22px; }
  }

  .label {
    display: flex; flex-direction: column; gap: .15rem;
    strong { font-weight: 700; letter-spacing: .2px; }
    small  { opacity: .8; }
  }

  &:hover {
    transform: translateY(-2px);
    border-color: rgba(255,255,255,.16);
    background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.03));
    .halo { opacity: .15; }
  }

  &.active {
    transform: translateY(-1px);
    box-shadow: 0 10px 25px rgba(0,0,0,.25), 0 0 0 1px inset currentColor;
    .icon { background: rgba(255,255,255,.10); }
    .halo { opacity: .22; }
  }

  /* brand tints per modality */
  &.chat  { color: #7ea6ff; }
  &.voice { color: #65e0b9; }
  &.video { color: #bba4ff; }
}

/* helper row under cards */
.policy-line {
  display: inline-flex; align-items: center; gap: .5rem;
  margin-top: .8rem; opacity: .9;

  mat-icon { font-size: 18px; width: 18px; height: 18px; }
}

.actions-right {
  display: flex; justify-content: flex-end; margin-top: 1rem;
}

/* ---------- Make slot text white (both enabled & disabled renderers) ---------- */
/* day cards you already have */
.day-card .slot,
.day-card .slot * {
  color: #ffffff !important;
}

/* if you’re using mat-chips or mat-stroked-button for slots, force white too */
.mat-mdc-standard-chip, .mat-mdc-standard-chip * { color: #ffffff !important; }
.mat-mdc-stroked-button, .mat-mdc-stroked-button * { color: #ffffff !important; }

/* optional: dim disabled/fully booked slots but keep white text */
.slot.is-disabled {
  opacity: .55;
}

/* fix for any browser default form colors inside the dark card */
.modality-section input, .modality-section textarea {
  color: #eaf0ff;
}
//////////////////////////////////////
/* ---------- Step 1: Animated modality cards ---------- */
.card.modality { padding-top: 1rem; }

.mod-cards {
  display: grid;
  grid-template-columns: repeat(3, minmax(0, 1fr));
  gap: .75rem;

  @media (max-width: 900px) { grid-template-columns: 1fr 1fr; }
  @media (max-width: 600px) { grid-template-columns: 1fr; }
}

.mod-card {
  position: relative;
  overflow: hidden;
  border-radius: 14px;
  border: 1px solid rgba(255,255,255,.08);
  background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
  color: #eaf0ff;

  display: grid;
  grid-template-columns: 44px 1fr;
  align-items: center;
  gap: .75rem;
  padding: .9rem .95rem;
  text-align: left;
  cursor: pointer;

  /* micro–motion */
  transform: translateY(0);
  transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease, background .18s ease, filter .18s ease;

  .halo {
    content: "";
    position: absolute;
    inset: -40% -20%;
    background: radial-gradient(80% 80% at 50% 50%, currentColor 0%, transparent 60%);
    opacity: 0; pointer-events: none;
    transition: opacity .25s ease;
  }

  .icon {
    width: 44px; height: 44px; border-radius: 12px;
    display: grid; place-items: center;
    background: rgba(255,255,255,.06);
    border: 1px solid rgba(255,255,255,.08);

    mat-icon { font-size: 22px; width: 22px; height: 22px; }
  }

  .label { display: flex; flex-direction: column; gap: .15rem; }
  .label strong { font-weight: 700; letter-spacing: .2px; }
  .label small  { opacity: .8; }

  &:hover {
    transform: translateY(-2px);
    border-color: rgba(255,255,255,.16);
    background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.03));
    .halo { opacity: .16; }
  }

  &.active {
    transform: translateY(-1px);
    box-shadow: 0 10px 25px rgba(0,0,0,.25), 0 0 0 1px inset currentColor;
    .icon { background: rgba(255,255,255,.10); }
    .halo { opacity: .24; }
  }

  /* subtle entrance */
  @keyframes modPop {
    from { transform: translateY(6px) scale(.98); opacity: .0; }
    to   { transform: translateY(0)   scale(1);   opacity: 1; }
  }
  animation: modPop .25s ease both;
}

/* Brand tints */
.mod-card.chat  { color: #7ea6ff; }
.mod-card.voice { color: #65e0b9; }
.mod-card.video { color: #bba4ff; }

/* Helper row under cards (re-use your existing style if present) */
.card.modality .policies {
  display: inline-flex; align-items: center; gap: .5rem;
  margin-top: .85rem; opacity: .9;
  mat-icon { font-size: 18px; width: 18px; height: 18px; }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\booking\booking.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Booking } from './booking';

describe('Booking', () => {
  let component: Booking;
  let fixture: ComponentFixture<Booking>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Booking]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Booking);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\booking\booking.ts =====

import { Component, signal, computed, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, ActivatedRoute } from '@angular/router';
import { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatDividerModule } from '@angular/material/divider';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';

type Modality = 'chat' | 'voice' | 'video';

type Slot = {
  id: string;
  dayIdx: number;          // 0..6 => Mon..Sun (Mon first)
  start: string;           // 'HH:mm'
  duration: number;        // minutes
  modalities: Modality[];  // available for this slot
  notes?: string;
};

function pad(n: number) { return (n < 10 ? '0' : '') + n; }
function hhmmPlus(hhmm: string, minutes: number) {
  const [h, m] = hhmm.split(':').map(Number);
  const total = h * 60 + m + minutes;
  const h2 = Math.floor(total / 60) % 24;
  const m2 = total % 60;
  return `${pad(h2)}:${pad(m2)}`;
}
const days = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'];
const uid = () => Math.random().toString(36).slice(2, 10);

// -----------------------------
// Mock doctor + mock slots (replace with API later)
// -----------------------------
const MOCK_DOC = {
  id: 'doc-123',
  name: 'Dr. Sarah Ali',
  department: 'Pediatrics',
  avatar: 'https://i.pravatar.cc/120?img=5',
  prices: {
    EG: { currency: 'EGP', chat: 80, voice: 120, video: 180 },
    SA: { currency: 'SAR', chat: 90, voice: 140, video: 200 },
    AE: { currency: 'AED', chat: 60, voice: 95,  video: 150 },
  },
  policies: {
    cancellation: 'Free cancellation up to 2 hours before visit.',
    refund:       'No-show refunds are not available.',
    reschedule:   'Reschedule up to 30 minutes before visit.',
  }
};

function makeSlotsForWeek(seedOffset = 0): Slot[] {
  // simple demo set; vary a bit with week index
  return [
    { id: uid(), dayIdx: (0 + seedOffset) % 7, start: '09:00', duration: 25, modalities: ['chat','voice'] as Modality[] },
    { id: uid(), dayIdx: (0 + seedOffset) % 7, start: '10:00', duration: 25, modalities: ['video'] as Modality[] },
    { id: uid(), dayIdx: (3 + seedOffset) % 7, start: '13:00', duration: 25, modalities: ['video'] as Modality[] },
    { id: uid(), dayIdx: (4 + seedOffset) % 7, start: '16:00', duration: 25, modalities: ['chat','video'] as Modality[] },
  ];
}

@Component({
  standalone: true,
  selector: 'app-booking',
  templateUrl: './booking.html',
  styleUrls: ['./booking.scss'],
  imports: [
    CommonModule, RouterModule, ReactiveFormsModule,

    // Material
    MatIconModule, MatButtonModule, MatButtonToggleModule,
    MatFormFieldModule, MatInputModule, MatTooltipModule,
    MatDividerModule, MatSnackBarModule
  ]
})
export class BookingComponent {
  private route = inject(ActivatedRoute);
  private snack = inject(MatSnackBar);

  // doctor id (wired for API later)
  doctorId = this.route.snapshot.paramMap.get('doctorId') ?? MOCK_DOC.id;

  // doctor signal
  doctor = signal(MOCK_DOC);

  // ------------ Week navigation ------------
  private today = new Date();
  weekIndex = signal(0); // 0 = this week, -1 prev, +1 next

  weekLabel = computed(() => {
    const start = this.mondayOfWeek(this.weekIndex());
    const end = new Date(start);
    end.setDate(start.getDate() + 6);
    return `${start.getFullYear()}-${pad(start.getMonth() + 1)}-${pad(start.getDate())} → ` +
           `${end.getFullYear()}-${pad(end.getMonth() + 1)}-${pad(end.getDate())}`;
  });

  prevWeek() { this.weekIndex.update(n => n - 1); }
  nextWeek() { this.weekIndex.update(n => n + 1); }
  thisWeek() { this.weekIndex.set(0); }

  private mondayOfWeek(weekIdx: number) {
    const base = new Date(this.today);
    const day = base.getDay() || 7; // Sun=0 => 7
    const mon = new Date(base);
    mon.setDate(base.getDate() - day + 1 + (weekIdx * 7));
    mon.setHours(0,0,0,0);
    return mon;
  }

  // ------------ Slots for the visible week ------------
  slots = computed<Slot[]>(() => makeSlotsForWeek(Math.abs(this.weekIndex()) % 2));

  daysIdx = [0,1,2,3,4,5,6];
  daysLabels = days;

  slotsForDay = (d: number) => computed(() =>
    this.slots()
      .filter(s => s.dayIdx === d)
      .sort((a,b) => a.start.localeCompare(b.start))
  );

  // ------------ Wizard state ------------
  step = signal<1 | 2 | 3>(1);
  modality = signal<Modality | null>(null);
  selectedSlot = signal<Slot | null>(null);

  // Intake form
  form: FormGroup;
  constructor() {
    this.form = new FormGroup({
      reason: new FormControl<string>('', { validators: [Validators.required], nonNullable: true }),
      attachments: new FormControl<FileList | null>(null)
    });
  }

  setModality(m: Modality) {
    this.modality.set(m);
    const s = this.selectedSlot();
    if (s && !s.modalities.includes(m)) this.selectedSlot.set(null);
  }

  pickSlot(s: Slot) {
    if (!this.modality()) {
      this.snack.open('Choose modality first', 'OK', { duration: 1600 });
      return;
    }
    if (!s.modalities.includes(this.modality()!)) {
      this.snack.open('This slot does not support the selected modality.', 'OK', { duration: 1800 });
      return;
    }
    this.selectedSlot.set(s);
  }

  // price (country can be wired from user later; EG as default demo)
  readonly country = signal<'EG' | 'SA' | 'AE'>('EG');
  price = computed(() => {
    const m = this.modality();
    if (!m) return null;
    const p = this.doctor().prices[this.country()];
    return { currency: p.currency, value: p[m] };
  });

  // ------------- Actions -------------
  next() {
    if (this.step() === 1) {
      if (!this.modality()) { this.snack.open('Select a modality to continue', 'OK', { duration: 1600 }); return; }
      this.step.set(2);
    } else if (this.step() === 2) {
      if (!this.selectedSlot()) { this.snack.open('Pick a time slot to continue', 'OK', { duration: 1600 }); return; }
      this.step.set(3);
    }
  }
  back() {
    if (this.step() === 2) this.step.set(1);
    else if (this.step() === 3) this.step.set(2);
  }

  confirm() {
    if (this.form.invalid) { this.form.markAllAsTouched(); return; }
    const s = this.selectedSlot()!;
    const m = this.modality()!;
    const pr = this.price();
    console.log('BOOK', {
      doctorId: this.doctorId, slotId: s.id, modality: m,
      reason: this.form.get('reason')!.value, country: this.country(),
      price: pr
    });
    this.snack.open('Appointment confirmed 🎉', 'OK', { duration: 2000 });
    // TODO: navigate to /appointments/:id after backend
  }

  // ------------- Helpers for template -------------
  timeRange(s: Slot) { return `${s.start}–${hhmmPlus(s.start, s.duration)}`; }
  classFor(s: Slot) {
    const m = this.modality();
    return {
      selected: this.selectedSlot()?.id === s.id,
      chat: s.modalities.length === 1 && s.modalities[0] === 'chat',
      voice: s.modalities.length === 1 && s.modalities[0] === 'voice',
      video: s.modalities.length === 1 && s.modalities[0] === 'video',
      multi: s.modalities.length > 1,
      incompatible: m != null && !s.modalities.includes(m)
    };
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\chat\chat.html =====

<div class="chat-vert">
  <!-- TOP: conversations strip -->
  <section class="strip-panel card">
    <div class="strip-header">
      <div class="title">
        <mat-icon>forum</mat-icon>
        <h2>Messages</h2>
      </div>

      <div class="search">
        <input
          class="search-input"
          placeholder="Search doctors or messages…"
          [value]="query()"
          (input)="query.set($any($event.target).value)" />
        <mat-icon class="search-ico">search</mat-icon>
      </div>
    </div>

    <div class="strip" tabindex="0" aria-label="Conversations">
      <button
        class="tile"
        *ngFor="let t of filteredThreads(); trackBy: trackById"
        [class.active]="activeThread().id === t.id"
        (click)="select(t)">
        <img [src]="t.avatar" class="avatar" alt="" />
        <div class="meta">
          <div class="name">{{ t.name }}</div>
          <div class="sub">{{ t.spec }}</div>
        </div>
        <span class="time" *ngIf="t.lastAt">{{ t.lastAt | date:'shortTime' }}</span>
        <span class="badge" *ngIf="t.unread">{{ t.unread }}</span>
      </button>
    </div>
  </section>

  <!-- BOTTOM: chat canvas -->
  <section class="conversation card panel">
    <header class="conv-header">
      <div class="doc">
        <span class="presence" *ngIf="activeThread().online"></span>
        <img class="avatar" [src]="activeThread().avatar" alt="" />
        <div>
          <div class="name">{{ activeThread().name }}</div>
          <div class="sub">{{ activeThread().spec }}</div>
        </div>
      </div>

      <input
        class="inline-search"
        placeholder="Search in chat…"
        [value]="chatQuery()"
        (input)="chatQuery.set($any($event.target).value)" />
    </header>

    <button class="load" mat-stroked-button (click)="loadEarlier()">Load earlier</button>

    <div class="conv-body" #scrollArea>
      <ng-container *ngFor="let m of messages(); trackBy: trackById">
        <div class="msg" [class.me]="m.from === 'me'">
          <div class="stamp" *ngIf="m.showStamp">{{ m.ts | date:'hh:mm a' }}</div>
          <div class="bubble">{{ m.text }}</div>
          <div class="meta">
            <span>{{ m.ts | date:'shortTime' }}</span>
            <span *ngIf="m.from === 'me' && m.seen"> • seen</span>
          </div>
        </div>
      </ng-container>
    </div>

    <footer class="composer">
      <button mat-icon-button class="ghost" (click)="attach()">
        <mat-icon>attach_file</mat-icon>
      </button>
      <input
        class="draft"
        placeholder="Type your message…"
        [value]="draft()"
        (keydown.enter)="send()"
        (input)="draft.set($any($event.target).value)" />
      <button mat-flat-button color="primary" (click)="send()">
        <mat-icon>send</mat-icon>
        Send
      </button>
    </footer>
  </section>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\chat\chat.scss =====

/* ======== Layout: vertical strip on top, wide chat under ======== */

.chat-vert {
  max-width: var(--container);
  margin: 0 auto;
  padding: 12px 12px 28px;
  display: grid;
  gap: 18px;
}

/* --- Conversations strip (sticks to top while page scrolls) --- */
.strip-panel.card {
  position: sticky;
  top: 8px;                     /* keep visible while page scrolls */
  z-index: 5;
  padding: 14px;
  border-radius: var(--radius-xl);
  background: var(--surface);
  border: 1px solid var(--border);
  box-shadow: var(--shadow-sm);
}

.strip-header {
  display: grid;
  grid-template-columns: auto 1fr;
  gap: 14px;
  align-items: center;
  margin-bottom: 10px;
}

.strip-header .title {
  display: flex;
  align-items: center;
  gap: 10px;
}
.strip-header .title h2 { margin: 0; }

.strip-header .search {
  position: relative;
}
.search-input {
  width: 100%;
  height: 42px;
  padding: 0 40px 0 14px;
  border-radius: 14px;
  border: 1px solid var(--border);
  background: rgba(255,255,255,.04);
  color: var(--text);
}
.search-ico {
  position: absolute;
  right: 10px;
  top: 50%;
  translate: 0 -50%;
  opacity: .7;
}

/* pill-like conversation tiles */
.strip {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: max-content;
  gap: 14px;
  overflow-x: auto;
  padding-bottom: 4px;
  scrollbar-width: thin;
}

.tile {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 8px 14px;
  border-radius: 999px;
  border: 1px solid var(--border);
  background: rgba(255,255,255,.03);
  color: var(--text);
  cursor: pointer;
  white-space: nowrap;
}
.tile.active {
  background: linear-gradient(180deg, rgba(29,183,160,.14), rgba(59,139,211,.10));
  box-shadow: 0 8px 20px rgba(59,139,211,.18);
}
.tile .avatar { width: 34px; height: 34px; border-radius: 50%; object-fit: cover; }
.tile .meta { display: grid; line-height: 1.1; }
.tile .name { font-weight: 700; letter-spacing: .2px; }
.tile .sub  { font-size: 12px; opacity: .8; }
.tile .time { margin-left: 6px; font-size: 12px; opacity: .75; }
.tile .badge{ margin-left: 8px; font-size: 12px; background: var(--brand-600); color: #fff; padding: 2px 8px; border-radius: 999px; }

/* --- Conversation panel (no fixed height; page scrolls) --- */
.conversation.card.panel {
  display: grid;
  gap: 14px;
  padding: 0 0 12px;
  border-radius: var(--radius-xl);
  border: 1px solid var(--border);
  background: var(--surface);
  box-shadow: var(--shadow);
}

/* sticky chat header inside the panel */
.conv-header {
  position: sticky;
  top: 0;
  z-index: 4;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 12px;
  padding: 14px 16px;
  border-bottom: 1px solid var(--border);
  background: linear-gradient(180deg, rgba(10,14,22,.95), rgba(10,14,22,.80));
  backdrop-filter: blur(6px);
  border-top-left-radius: var(--radius-xl);
  border-top-right-radius: var(--radius-xl);
}
.conv-header .doc { display: flex; align-items: center; gap: 12px; }
.conv-header .avatar { width: 40px; height: 40px; border-radius: 50%; object-fit: cover; }
.conv-header .name { font-weight: 800; margin-bottom: 2px; }
.conv-header .sub { font-size: 12.5px; opacity: .85; }
.conv-header .presence {
  width: 9px; height: 9px; border-radius: 50%; background: #22c55e; display: inline-block;
  box-shadow: 0 0 0 3px rgba(34,197,94,.18);
}

.inline-search {
  width: min(360px, 42vw);
  height: 38px;
  border-radius: 12px;
  border: 1px solid var(--border);
  padding: 0 12px;
  background: rgba(255,255,255,.05);
  color: var(--text);
}

/* Load earlier button block */
.load { align-self: center; width: max-content; margin: 10px auto 0; }

/* Conversation body grows naturally; page handles scrolling */
.conv-body {
  display: grid;
  gap: 10px;
  padding: 8px 16px 18px;
  /* give a tall default so the window looks bigger */
  min-height: 62vh;
}

/* message */
.msg { display: grid; justify-content: start; gap: 6px; }
.msg.me { justify-content: end; }

.msg .stamp {
  place-self: center;
  font-size: 12px;
  opacity: .8;
  background: rgba(255,255,255,.06);
  padding: 2px 10px;
  border-radius: 999px;
}

.bubble {
  max-width: 70ch;
  padding: 12px 14px;
  border-radius: 16px;
  border: 1px solid var(--border);
  background: rgba(255,255,255,.05);
  line-height: 1.35;
}
.msg.me .bubble {
  background: linear-gradient(180deg, rgba(59,139,211,.18), rgba(29,183,160,.12));
  border-color: rgba(59,139,211,.25);
}

.msg .meta {
  font-size: 12px;
  opacity: .8;
  margin-top: 2px;
  text-align: right;
}

/* sticky composer at the bottom of the viewport for comfort */
.composer {
  position: sticky;
  bottom: 8px;
  z-index: 3;
  display: grid;
  grid-template-columns: auto 1fr auto;
  align-items: center;
  gap: 10px;
  padding: 10px 12px;
  margin: 0 12px 8px;
  border-radius: 16px;
  border: 1px solid var(--border);
  background: linear-gradient(180deg, rgba(10,14,22,.90), rgba(10,14,22,.86));
  backdrop-filter: blur(6px);
}
.composer .draft {
  height: 44px;
  border-radius: 12px;
  border: 1px solid var(--border);
  background: rgba(255,255,255,.04);
  color: var(--text);
  padding: 0 12px;
}
.composer .ghost { opacity: .8; }
///////////////////
/* --- Conversation panel: internal scroll --- */
:root { --chat-offset: 180px; } /* tweak if your top area gets taller/shorter */

.conversation.card.panel {
  display: grid;
  grid-template-rows: auto minmax(0, 1fr) auto; /* header | body(scroll) | composer */
  gap: 14px;
  padding: 0 0 12px;
  border-radius: var(--radius-xl);
  border: 1px solid var(--border);
  background: var(--surface);
  box-shadow: var(--shadow);

  /* viewport-bounded height so the body can scroll inside */
  height: calc(100vh - var(--chat-offset));
  max-height: 92vh;
  overflow: hidden; /* no page scroll “bleed” */
}

/* sticky header stays pinned within the panel */
.conv-header {
  position: sticky;
  top: 0;
  z-index: 4;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 12px;
  padding: 14px 16px;
  border-bottom: 1px solid var(--border);
  background: linear-gradient(180deg, rgba(10,14,22,.95), rgba(10,14,22,.80));
  backdrop-filter: blur(6px);
  border-top-left-radius: var(--radius-xl);
  border-top-right-radius: var(--radius-xl);
}

/* conversation body is the vertical scroller */
.conv-body {
  display: grid;
  gap: 10px;
  padding: 8px 16px 18px;
  overflow-y: auto;       /* <- scrolls inside here */
  overflow-x: hidden;
  overscroll-behavior: contain;
  scrollbar-gutter: stable both-edges;
}

/* composer sits in the bottom grid row (NOT sticky now) */
.composer {
  position: relative;     /* remove sticky behavior */
  bottom: auto;
  z-index: 3;
  display: grid;
  grid-template-columns: auto 1fr auto;
  align-items: center;
  gap: 10px;
  padding: 10px 12px;
  margin: 0 12px 8px;
  border-radius: 16px;
  border: 1px solid var(--border);
  background: linear-gradient(180deg, rgba(10,14,22,.90), rgba(10,14,22,.86));
  backdrop-filter: blur(6px);
}
/* ===== FIX: confine scrolling to the chat body; keep top areas fixed ===== */

/* Make the whole chat page fill the viewport and stop page scrolling */
.chat-vert{
  height: 100dvh;                 /* dynamic viewport height (mobile-safe) */
  overflow: hidden;               /* prevent page scroll; we'll scroll inside the chat */
  display: grid;
  grid-template-rows: auto 1fr;   /* strip on top, conversation fills the rest */
}

/* Strip already sticky; just ensure it overlays correctly */
.strip-panel.card{
  position: sticky;
  top: 8px;
  z-index: 8;                     /* above chat body while you scroll */
}

/* Conversation panel fills the remaining height and owns its internal scroll */
.conversation.card.panel{
  height: 100%;
  overflow: hidden;               /* no outer scrolling */
  display: grid;
  grid-template-rows: auto minmax(0,1fr) auto;  /* header | body(scroll) | composer */
  gap: 14px;
}

/* Header remains pinned inside the panel */
.conv-header{
  position: sticky;
  top: 0;
  z-index: 4;
}

/* 👉 Only this area scrolls */
.conv-body{
  overflow-y: auto;               /* internal vertical scroll */
  overflow-x: hidden;
  min-height: 0;                  /* allow grid area to actually shrink */
  padding: 8px 16px 18px;
  scrollbar-gutter: stable both-edges;
  overscroll-behavior: contain;
}

/* Composer anchored at the bottom row (not sticky) */
.composer{
  position: relative;             /* ensure it doesn’t float over messages */
  bottom: auto;
  margin: 0 12px 8px;
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\chat\chat.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Chat } from './chat';

describe('Chat', () => {
  let component: Chat;
  let fixture: ComponentFixture<Chat>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Chat]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Chat);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\chat\chat.ts =====

import { Component, computed, signal, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, ActivatedRoute } from '@angular/router';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';

type Thread = {
  id: string;
  name: string;
  spec: string;
  avatar: string;
  lastAt?: Date;
  unread?: number;
  online?: boolean;
};

type Message = {
  id: string;
  from: 'me' | 'doc';
  text: string;
  ts: Date;
  seen?: boolean;
  showStamp?: boolean;
};

const uid = () => Math.random().toString(36).slice(2, 10);

@Component({
  standalone: true,
  selector: 'app-chat',
  templateUrl: './chat.html',
  styleUrls: ['./chat.scss'],
  imports: [CommonModule, RouterModule, MatIconModule, MatButtonModule]
})
export class ChatComponent {
  private route = inject(ActivatedRoute);

  // ── State
  query = signal<string>('');      // search in conversations strip
  chatQuery = signal<string>('');  // search inside the open chat
  draft = signal<string>('');      // composer value

  threads = signal<Thread[]>([
    { id: 't-1', name: 'Dr. Sarah A.', spec: 'Pediatrics',    avatar: 'https://i.pravatar.cc/120?img=12', lastAt: new Date(), online: true },
    { id: 't-2', name: 'Dr. Dina K.',  spec: 'Dermatology',   avatar: 'https://i.pravatar.cc/120?img=5',  lastAt: new Date(Date.now() - 3600_000), unread: 1 },
    { id: 't-3', name: 'Dr. Omar N.',  spec: 'Cardiology',    avatar: 'https://i.pravatar.cc/120?img=52', lastAt: new Date(Date.now() - 7200_000) }
  ]);

  private initialId = this.route.snapshot.paramMap.get('threadId')
                   || this.route.snapshot.paramMap.get('t')
                   || 't-1';
  selectedId = signal<string>(this.initialId);

  activeThread = computed<Thread>(() =>
    this.threads().find(t => t.id === this.selectedId()) || this.threads()[0]
  );

  filteredThreads = computed<Thread[]>(() => {
    const q = this.query().trim().toLowerCase();
    if (!q) return this.threads();
    return this.threads().filter(t =>
      t.name.toLowerCase().includes(q) || t.spec.toLowerCase().includes(q)
    );
  });

  // Mock message store
  private store: Record<string, Message[]> = {
    't-1': [
      { id: uid(), from: 'doc', text: 'Hi! How are you feeling today?', ts: new Date(Date.now() - 1000 * 60 * 30) },
      { id: uid(), from: 'me',  text: 'Hi doctor! Little better, still light cough.', ts: new Date(Date.now() - 1000 * 60 * 28), seen: true },
      { id: uid(), from: 'doc', text: 'Great. Keep the meds and rest. Any fever?', ts: new Date(Date.now() - 1000 * 60 * 26) }
    ],
    't-2': [
      { id: uid(), from: 'doc', text: 'Your results look fine 👍', ts: new Date(Date.now() - 1000 * 60 * 90) }
    ],
    't-3': [
      { id: uid(), from: 'doc', text: 'Please send the latest ECG.', ts: new Date(Date.now() - 1000 * 60 * 120) }
    ]
  };

  // bump to recompute after store mutation
  private version = signal(0);

  messages = computed<Message[]>(() => {
    this.version(); // dependency
    const id = this.activeThread().id;
    const raw = this.store[id] || [];
    const q = this.chatQuery().trim().toLowerCase();

    const list = q ? raw.filter(m => m.text.toLowerCase().includes(q)) : raw;

    // compute "showStamp" relative to previous (in filtered list)
    return list.map((m, i) => {
      const prev = list[i - 1];
      const gap = prev ? m.ts.getTime() - prev.ts.getTime() : Infinity;
      return { ...m, showStamp: gap > 1000 * 60 * 20 };
    });
  });

  // ── Actions
  trackById = (_: number, item: { id: string }) => item.id;

  select(t: Thread) {
    this.selectedId.set(t.id);
    this.threads.set(this.threads().map(x => x.id === t.id ? { ...x, unread: 0 } : x));
  }

  loadEarlier() {
    const id = this.activeThread().id;
    const earlier: Message[] = [
      { id: uid(), from: 'doc', text: 'Previous notes…', ts: new Date(Date.now() - 1000 * 60 * 60 * 5) }
    ];
    this.store[id] = [...earlier, ...(this.store[id] || [])];
    this.version.set(this.version() + 1);
  }

  attach() {
    alert('Attachment picker coming soon');
  }

  send() {
    const text = this.draft().trim();
    if (!text) return;
    const id = this.activeThread().id;
    const list = this.store[id] || [];
    const msg: Message = { id: uid(), from: 'me', text, ts: new Date(), seen: false };
    this.store[id] = [...list, msg];
    this.draft.set('');
    this.version.set(this.version() + 1);

    setTimeout(() => { msg.seen = true; this.version.set(this.version() + 1); }, 900);
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\dashboard\dashboard.html =====



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\dashboard\dashboard.scss =====



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\dashboard\dashboard.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Dashboard } from './dashboard';

describe('Dashboard', () => {
  let component: Dashboard;
  let fixture: ComponentFixture<Dashboard>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Dashboard]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Dashboard);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\dashboard\dashboard.ts =====

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { RouterModule } from '@angular/router';
import { trigger, transition, style, animate, query, stagger } from '@angular/animations';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [CommonModule, RouterModule, MatCardModule, MatButtonModule, MatIconModule],
  template: `
<div class="grid" @stagger>
  <mat-card class="card" *ngIf="nextAppt" [@fadeUp]>
    <div class="head">
      <h2>Next appointment</h2>
      <span class="badge">{{ nextAppt.package | titlecase }}</span>
    </div>
    <p>{{ nextAppt.doctor }} · {{ nextAppt.date }} · {{ nextAppt.time }}</p>
    <div class="actions">
      <button mat-flat-button color="primary" [routerLink]="['/patient/chat', nextAppt.threadId]">Open Chat</button>
      <button mat-stroked-button [routerLink]="['/patient/appointments']">Details</button>
    </div>
  </mat-card>

  <mat-card class="card" [@fadeUp]>
    <h2>Quick actions</h2>
    <div class="qa">
      <button mat-stroked-button color="primary" routerLink="/patient/search"><mat-icon>search</mat-icon> Find a doctor</button>
      <button mat-stroked-button routerLink="/patient/appointments"><mat-icon>event</mat-icon> My appointments</button>
      <button mat-stroked-button routerLink="/patient/payments"><mat-icon>receipt_long</mat-icon> Payments</button>
    </div>
  </mat-card>

  <mat-card class="card" [@fadeUp]>
    <h2>Recent chats</h2>
    <div class="empty" *ngIf="recentChats.length===0">No recent chats</div>
    <div class="chats" *ngIf="recentChats.length">
      <div class="chat" *ngFor="let c of recentChats" [routerLink]="['/patient/chat', c.threadId]">
        <mat-icon>forum</mat-icon>
        <div>
          <strong>{{ c.doctor }}</strong>
          <div class="small">Last message · {{ c.last }}</div>
        </div>
      </div>
    </div>
  </mat-card>
</div>
`,
  styles: [`
.grid {
  display:grid; gap: 1rem;
  grid-template-columns: repeat(12, 1fr);
}
.card:nth-child(1){ grid-column: span 6; }
.card:nth-child(2){ grid-column: span 6; }
.card:nth-child(3){ grid-column: span 12; }
@media (max-width: 960px){
  .card{ grid-column: span 12 !important; }
}
.head{ display:flex; align-items:center; gap:.5rem; }
.head h2{ margin:0; }
.badge{
  margin-left:auto; background: rgba(42,118,183,.25);
  border: 1px solid rgba(42,118,183,.45);
  padding: .15rem .5rem; border-radius: 999px; font-size: .85rem;
}
.actions{ display:flex; gap:.5rem; margin-top:.75rem; }
.qa{ display:flex; flex-wrap: wrap; gap:.5rem; margin-top:.5rem; }
.chats .chat{
  display:flex; align-items:center; gap:.75rem; padding:.5rem; border-radius: 12px;
  border:1px solid rgba(255,255,255,.06); cursor:pointer;
}
.small{ color: var(--muted); font-size:.9rem; }
.empty{ color: var(--muted); }
`],
  animations: [
    trigger('stagger', [
      transition(':enter', [
        query('.card', [
          style({ opacity: 0, transform: 'translateY(8px)' }),
          stagger(80, animate('300ms ease-out', style({ opacity: 1, transform: 'none' })))
        ])
      ])
    ]),
    trigger('fadeUp', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(6px)' }),
        animate('280ms ease-out', style({ opacity: 1, transform: 'none' }))
      ])
    ])
  ]
})
export class DashboardComponent {
  nextAppt = {
    doctor: 'Dr. Sarah Ali',
    package: 'video',
    date: 'Tue, Sep 02',
    time: '10:30',
    threadId: 't-123'
  };
  recentChats = [
    { doctor: 'Dr. Omar N.', last: '2h ago', threadId: 't-98' },
    { doctor: 'Dr. Dina K.', last: 'yesterday', threadId: 't-77' }
  ];
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\doctor-profile\doctor-profile.html =====

<div class="doc-wrap">
  <!-- Hero -->
  <section class="hero card">
    <div class="left">
      <div class="avatar-wrap">
        <img class="avatar" [src]="doctor().avatar" alt="" />
        <span class="glow"></span>
      </div>
      <div class="id">
        <div class="name">{{ doctor().name }}</div>
        <div class="meta">
          <span class="dept">{{ doctor().department }}</span>
          <span class="dot">•</span>
          <span class="exp">{{ doctor().yearsExp }} yrs</span>
          <span class="dot">•</span>
          <span class="loc">{{ doctor().country }}</span>
        </div>
        <div class="rating">
          <mat-icon>star</mat-icon>
          <span>{{ doctor().rating.avg | number:'1.1-1' }}</span>
          <span class="muted">({{ doctor().rating.count }})</span>
        </div>

        <div class="langs">
          <span class="pill" *ngFor="let l of doctor().languages">{{ l }}</span>
        </div>
      </div>
    </div>

    <div class="right">
      <div class="next" *ngIf="nextAvailable() as n; else noNext">
        <div class="muted">Next available</div>
        <div class="val">{{ daysLabels[n.dayIdx] }} • {{ timeRange(n) }}</div>
      </div>
      <ng-template #noNext>
        <div class="muted">Next available</div>
        <div class="val">No slots this week</div>
      </ng-template>

      <div class="cta">
        <button mat-flat-button color="primary" (click)="bookNow()">
          <mat-icon>event_available</mat-icon> Book now
        </button>
      </div>
    </div>
  </section>

  <!-- Pricing by modality -->
  <section class="card pricing">
    <h3>Consultation types & fees</h3>
    <div class="mods">
      <button class="mod-card chat" type="button" (click)="pickModality('chat')"
              [class.active]="selectedModality()==='chat'">
        <div class="icon"><mat-icon>chat</mat-icon></div>
        <div class="label">
          <strong>Chat</strong>
          <small>{{ price().value }} {{ price().currency }}</small>
        </div>
        <div class="go"><mat-icon>arrow_forward</mat-icon></div>
      </button>

      <button class="mod-card voice" type="button" (click)="pickModality('voice')"
              [class.active]="selectedModality()==='voice'">
        <div class="icon"><mat-icon>call</mat-icon></div>
        <div class="label">
          <strong>Voice</strong>
          <small>{{ price().value }} {{ price().currency }}</small>
        </div>
        <div class="go"><mat-icon>arrow_forward</mat-icon></div>
      </button>

      <button class="mod-card video" type="button" (click)="pickModality('video')"
              [class.active]="selectedModality()==='video'">
        <div class="icon"><mat-icon>videocam</mat-icon></div>
        <div class="label">
          <strong>Video</strong>
          <small>{{ price().value }} {{ price().currency }}</small>
        </div>
        <div class="go"><mat-icon>arrow_forward</mat-icon></div>
      </button>
    </div>

    <div class="actions">
      <button mat-stroked-button (click)="bookNow(selectedModality())">
        <mat-icon>calendar_month</mat-icon> Continue to booking
      </button>
    </div>
  </section>

  <!-- Availability -->
  <section class="card availability">
    <div class="toolbar">
      <div class="title">
        <mat-icon>schedule</mat-icon>
        <h3>Availability</h3>
        <div class="week-controls">
          <button mat-icon-button (click)="prevWeek()" matTooltip="Previous week"><mat-icon>chevron_left</mat-icon></button>
          <span class="week">{{ weekLabel() }}</span>
          <button mat-icon-button (click)="nextWeek()" matTooltip="Next week"><mat-icon>chevron_right</mat-icon></button>
          <button mat-stroked-button class="this-week" (click)="thisWeek()">This week</button>
        </div>
      </div>
    </div>

    <div class="week-grid">
      <section class="day-card" *ngFor="let d of daysIdx">
        <header class="day-head">
          <div class="name">{{ daysLabels[d] }}</div>
          <div class="legend">
            <span class="chip chat">Chat</span>
            <span class="chip voice">Voice</span>
            <span class="chip video">Video</span>
          </div>
        </header>

        <div class="slots" *ngIf="(slotsForDay(d)()).length; else emptyDay">
          <div class="slot"
               *ngFor="let s of slotsForDay(d)()"
               [ngClass]="classFor(s)"
               matTooltip="Pick time on the booking page">
            <div class="time"><mat-icon>schedule</mat-icon> {{ timeRange(s) }}</div>
            <div class="mods">
              <span class="pill" *ngFor="let m of s.modalities">{{ m }}</span>
            </div>
          </div>
        </div>

        <ng-template #emptyDay>
          <div class="empty"><mat-icon>event_busy</mat-icon> No slots</div>
        </ng-template>
      </section>
    </div>
  </section>

  <!-- About -->
  <section class="card about">
    <h3>About {{ doctor().name.split(' ')[0] }}</h3>
    <p class="bio">{{ doctor().bio }}</p>

    <div class="cols">
      <div>
        <h4>Subspecialties</h4>
        <div class="chips">
          <span class="pill" *ngFor="let s of doctor().subspecialties">{{ s }}</span>
        </div>
      </div>
      <div>
        <h4>Common conditions</h4>
        <div class="chips">
          <span class="pill" *ngFor="let c of doctor().conditions">{{ c }}</span>
        </div>
      </div>
    </div>

    <div class="policies">
      <h4>Policies</h4>
      <ul>
        <li><mat-icon>gavel</mat-icon> {{ doctor().policies.cancellation }}</li>
        <li><mat-icon>event_repeat</mat-icon> {{ doctor().policies.reschedule }}</li>
        <li><mat-icon>policy</mat-icon> {{ doctor().policies.refund }}</li>
      </ul>
    </div>
  </section>

  <!-- Reviews teaser -->
  <section class="card reviews">
    <div class="head">
      <h3>Patient reviews</h3>
      <button mat-stroked-button (click)="seeAllReviews()">
        <mat-icon>rate_review</mat-icon> See all
      </button>
    </div>

    <div class="review-list">
      <div class="rev" *ngFor="let r of doctor().reviews">
        <div class="r-head">
          <div class="author">{{ r.name }}</div>
          <div class="stars">
            <mat-icon *ngFor="let s of [1,2,3,4,5]">{{ s <= r.rating ? 'star' : 'star_border' }}</mat-icon>
          </div>
        </div>
        <div class="text">{{ r.text }}</div>
        <div class="date muted">{{ r.date | date:'mediumDate' }}</div>
      </div>
    </div>
  </section>

  <!-- Sticky bottom bar -->
  <div class="sticky-cta">
    <div class="price">
      <span class="muted">Selected</span>
      <span class="pill mod">{{ selectedModality() }}</span>
      <span class="val">{{ price().value }} {{ price().currency }}</span>
    </div>
    <button mat-flat-button color="primary" (click)="bookNow(selectedModality())">
      <mat-icon>event_available</mat-icon> Book {{ selectedModality() }}
    </button>
  </div>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\doctor-profile\doctor-profile.scss =====

.doc-wrap { padding: 1rem; display: grid; gap: 1rem; }

/* ---------- Hero ---------- */
.hero {
  display: grid; grid-template-columns: 1fr auto; gap: 1rem; align-items: center;
  background: radial-gradient(120% 120% at 0% 0%, rgba(59,139,211,.18), transparent 60%),
              radial-gradient(120% 120% at 100% 0%, rgba(29,183,160,.12), transparent 60%),
              var(--surface);
  position: relative; overflow: hidden;

  .left { display: grid; grid-template-columns: auto 1fr; gap: 1rem; align-items: center; }
  .avatar-wrap { position: relative; }
  .avatar { width: 82px; height: 82px; border-radius: 18px; object-fit: cover; box-shadow: var(--shadow-sm); }
  .glow { position:absolute; inset:-8px; border-radius: 22px; pointer-events:none;
          background: conic-gradient(from 180deg, rgba(59,139,211,.25), rgba(29,183,160,.25), transparent 40%);
          filter: blur(18px); opacity:.6; }

  .id .name { font-size: var(--fs-2xl); font-weight: 800; letter-spacing: .2px; }
  .meta { display:flex; gap:.5rem; flex-wrap:wrap; opacity:.9; }
  .dot { opacity:.5; }
  .rating { display:flex; align-items:center; gap:.25rem; margin-top:.25rem;
    mat-icon { font-size:18px; width:18px; height:18px; color:#ffd166; }
    .muted { margin-left:.25rem; }
  }
  .langs { margin-top:.4rem; display:flex; gap:.4rem; flex-wrap: wrap; }
  .pill { padding:.2rem .5rem; border-radius:999px; border:1px solid var(--border); background: rgba(255,255,255,.04); }

  .right { display:grid; gap:.6rem; justify-items:end; text-align:right; }
  .next .muted { opacity:.8; }
  .next .val { font-weight:800; letter-spacing:.2px; }
}

/* ---------- Pricing ---------- */
.pricing h3 { margin: 0 0 .75rem; }
.mods {
  display:grid; grid-template-columns: repeat(3, minmax(0,1fr)); gap:.75rem;
}
.mod-card {
  position: relative; display:grid; grid-template-columns: 44px 1fr auto; align-items:center; gap:.75rem;
  border:1px solid rgba(255,255,255,.08); border-radius: 14px; padding:.85rem .9rem;
  background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
  cursor: pointer; text-align:left;
  transition: transform var(--dur-2) var(--ease), box-shadow var(--dur-2) var(--ease), border-color var(--dur-2) var(--ease);

  .icon { display:grid; place-items:center; width:44px; height:44px; border-radius:12px;
          background: rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.08);
          mat-icon { font-size:22px; width:22px; height:22px; } }
  .label { display:flex; flex-direction:column; gap:.1rem; strong{font-weight:800;} small{opacity:.85;} }
  .go { opacity:.6; }

  &:hover { transform: translateY(-2px); border-color: rgba(255,255,255,.16); }
  &.active { box-shadow: 0 0 0 1px inset currentColor; }

  &.chat  { color: #7ea6ff; }
  &.voice { color: #65e0b9; }
  &.video { color: #bba4ff; }
}
.pricing .actions { display:flex; justify-content:flex-end; margin-top:.75rem; }

/* ---------- Availability ---------- */
.availability .toolbar .title {
  display:flex; align-items:center; gap:.6rem; flex-wrap:wrap;
  .week-controls { display:inline-flex; align-items:center; gap:.25rem; margin-left:.5rem; }
  .week { opacity:.8; padding:.25rem .5rem; border:1px solid var(--border); border-radius:10px; }
  .this-week { border-radius:999px; padding:.25rem .6rem; line-height:1.2; }
}

/* Reuse your schedule layout */
.week-grid { display:grid; gap:1rem; grid-template-columns: repeat(3, minmax(0, 1fr)); }
@media (max-width: 1200px) { .week-grid { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
@media (max-width: 720px)  { .week-grid { grid-template-columns: 1fr; } }

.day-card {
  background: rgba(255,255,255,.02);
  border: 1px solid rgba(255,255,255,.06);
  border-radius: 16px;
  padding: .85rem; box-shadow: var(--shadow-sm);

  .day-head { display:flex; align-items:center; justify-content:space-between; gap:.75rem;
    padding-bottom:.5rem; margin-bottom:.5rem; border-bottom:1px dashed rgba(255,255,255,.06);
    .name { font-weight:700; }
    .legend { display:flex; gap:.4rem; flex-wrap:wrap; }
    .chip { font-size:.75rem; padding:.2rem .5rem; border-radius:999px; border:1px solid var(--border); background: rgba(255,255,255,.04);
      &.chat  { border-color: rgba(85,145,255,.5);  background: rgba(85,145,255,.08); }
      &.voice { border-color: rgba(66,211,146,.5);  background: rgba(66,211,146,.08); }
      &.video { border-color: rgba(183,140,255,.5); background: rgba(183,140,255,.08); }
    }
  }

  .slots { display:grid; gap:.6rem; }
  .slot {
    display:flex; align-items:center; justify-content:space-between; gap:1rem;
    padding:.65rem .75rem; border-radius:12px;
    border:1px solid rgba(255,255,255,.06); background: rgba(255,255,255,.03);
    .time { display:flex; align-items:center; gap:.4rem; font-weight:600; letter-spacing:.2px; }
    .mods { display:flex; gap:.4rem; }
    .pill { font-size:.75rem; padding:.15rem .5rem; border-radius:999px; background: rgba(255,255,255,.05); border: 1px solid rgba(255,255,255,.08); text-transform:capitalize; }
  }
  .slot.chat  { border-left: 3px solid #5591ff; }
  .slot.voice { border-left: 3px solid #42d392; }
  .slot.video { border-left: 3px solid #b78cff; }
  .slot.multi { border-left: 3px solid #9adcff; }

  .empty { display:flex; align-items:center; gap:.4rem; padding:.65rem .75rem; border-radius:12px; border:1px dashed rgba(255,255,255,.10); opacity:.7; }
}

/* ---------- About ---------- */
.about h3 { margin:0 0 .5rem; }
.about .bio { opacity:.95; }
.about .cols { display:grid; grid-template-columns: 1fr 1fr; gap:1rem; margin-top:.75rem; }
@media (max-width: 860px) { .about .cols { grid-template-columns: 1fr; } }
.about h4 { margin:.25rem 0 .35rem; }
.about .chips { display:flex; gap:.4rem; flex-wrap:wrap; }
.about .pill { padding:.2rem .5rem; border-radius:999px; border:1px solid var(--border); background: rgba(255,255,255,.04); }
.about .policies ul { list-style:none; padding:0; margin:.5rem 0 0; display:grid; gap:.4rem; }
.about .policies li { display:flex; gap:.5rem; align-items:flex-start; }

/* ---------- Reviews ---------- */
.reviews .head { display:flex; align-items:center; justify-content:space-between; margin-bottom:.5rem; }
.review-list { display:grid; gap:.6rem; }
.rev { border:1px solid rgba(255,255,255,.08); border-radius:12px; padding:.6rem .7rem; background: rgba(255,255,255,.03); }
.rev .r-head { display:flex; align-items:center; justify-content:space-between; }
.rev .author { font-weight:700; }
.rev .stars mat-icon { font-size:18px; width:18px; height:18px; color:#ffd166; }

/* ---------- Sticky bottom CTA ---------- */
.sticky-cta {
  position: sticky; bottom: .5rem; display:flex; align-items:center; justify-content:space-between;
  gap: .75rem; padding:.6rem .7rem; border-radius: 14px; border:1px solid var(--border);
  background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
  box-shadow: var(--shadow-sm);
  .price { display:flex; align-items:center; gap:.5rem; }
  .pill.mod { padding:.2rem .55rem; border-radius:999px; border:1px solid var(--border); background: rgba(255,255,255,.04); text-transform: capitalize; }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\doctor-profile\doctor-profile.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DoctorProfile } from './doctor-profile';

describe('DoctorProfile', () => {
  let component: DoctorProfile;
  let fixture: ComponentFixture<DoctorProfile>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DoctorProfile]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DoctorProfile);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\doctor-profile\doctor-profile.ts =====

import { Component, computed, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatDividerModule } from '@angular/material/divider';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';

type Modality = 'chat' | 'voice' | 'video';

type PriceSheet = {
  currency: 'EGP' | 'SAR' | 'AED';
  chat: number;
  voice: number;
  video: number;
};

type Review = { id: string; name: string; rating: number; text: string; date: string };

type Doctor = {
  id: string;
  name: string;
  department: string;
  avatar: string;
  country: 'EG' | 'SA' | 'AE';
  yearsExp: number;
  languages: string[];
  subspecialties: string[];
  conditions: string[];
  bio: string;
  prices: Record<'EG' | 'SA' | 'AE', PriceSheet>;
  policies: { cancellation: string; reschedule: string; refund: string };
  rating: { avg: number; count: number };
  reviews: Review[];
};

type Slot = {
  id: string;
  dayIdx: number;    // 0..6 (Mon..Sun)
  start: string;     // 'HH:mm'
  duration: number;  // minutes
  modalities: Modality[];
};

const days = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'];
const pad = (n: number) => (n < 10 ? '0' : '') + n;
const uid = () => Math.random().toString(36).slice(2, 10);
const hhmmPlus = (hhmm: string, minutes: number) => {
  const [h, m] = hhmm.split(':').map(Number);
  const total = h * 60 + m + minutes;
  const h2 = Math.floor(total / 60) % 24;
  const m2 = total % 60;
  return `${pad(h2)}:${pad(m2)}`;
};

// --------- Mock fetch (swap with API later) ----------
function mockFetchDoctor(id: string): Doctor {
  return {
    id,
    name: 'Dr. Sarah Ali',
    department: 'Pediatrics',
    avatar: 'https://i.pravatar.cc/160?img=5',
    country: 'EG',
    yearsExp: 12,
    languages: ['Arabic', 'English'],
    subspecialties: ['Neonatology', 'Pediatric Respiratory'],
    conditions: ['Fever', 'Cough', 'Allergies', 'Asthma'],
    bio: 'Board-certified pediatrician focused on preventative care and family-centered treatment. Former fellow at Cairo Children’s Hospital.',
    prices: {
      EG: { currency: 'EGP', chat: 80, voice: 120, video: 180 },
      SA: { currency: 'SAR', chat: 90, voice: 140, video: 200 },
      AE: { currency: 'AED', chat: 60, voice: 95,  video: 150 },
    },
    policies: {
      cancellation: 'Free cancellation up to 2 hours before visit.',
      reschedule: 'Reschedule up to 30 minutes before visit.',
      refund: 'No-show refunds are not available.'
    },
    rating: { avg: 4.8, count: 218 },
    reviews: [
      { id: uid(), name: 'Noura', rating: 5, text: 'Very kind and clear. My kid felt comfortable.', date: new Date(Date.now()-86400000*2).toISOString() },
      { id: uid(), name: 'Hassan', rating: 5, text: 'Quick diagnosis, solid advice.', date: new Date(Date.now()-86400000*6).toISOString() },
      { id: uid(), name: 'Reem', rating: 4, text: 'On time and helpful.', date: new Date(Date.now()-86400000*10).toISOString() },
    ]
  };
}

function makeSlotsForWeek(seedOffset = 0): Slot[] {
  // simple deterministic demo set
  return [
    { id: uid(), dayIdx: (0 + seedOffset) % 7, start: '09:00', duration: 25, modalities: ['chat','voice'] },
    { id: uid(), dayIdx: (0 + seedOffset) % 7, start: '10:30', duration: 25, modalities: ['video'] },
    { id: uid(), dayIdx: (2 + seedOffset) % 7, start: '14:00', duration: 25, modalities: ['voice','video'] },
    { id: uid(), dayIdx: (3 + seedOffset) % 7, start: '16:30', duration: 25, modalities: ['chat'] },
    { id: uid(), dayIdx: (5 + seedOffset) % 7, start: '18:00', duration: 25, modalities: ['chat','video'] },
  ];
}

@Component({
  standalone: true,
  selector: 'app-doctor-profile',
  templateUrl: './doctor-profile.html',
  styleUrls: ['./doctor-profile.scss'],
  imports: [
    CommonModule, RouterModule,
    MatIconModule, MatButtonModule, MatTooltipModule, MatDividerModule, MatSnackBarModule
  ]
})
export class DoctorProfileComponent {
  private route = inject(ActivatedRoute);
  private router = inject(Router);
  private snack  = inject(MatSnackBar);

  // -------- state --------
  doctorId = this.route.snapshot.paramMap.get('id') ?? 'doc-123';
  doctor = signal<Doctor>(mockFetchDoctor(this.doctorId));

  country = signal<'EG'|'SA'|'AE'>(this.doctor().country);
  selectedModality = signal<Modality>('video');

  // week navigation
  weekIndex = signal(0); // 0=this, +1 next, -1 prev
  prevWeek() { this.weekIndex.update(w => w - 1); }
  nextWeek() { this.weekIndex.update(w => w + 1); }
  thisWeek() { this.weekIndex.set(0); }

  // labels
  daysIdx = [0,1,2,3,4,5,6];
  daysLabels = days;

  // compute week label (Mon..Sun)
  private today = new Date();
  private mondayOf(weekIdx: number) {
    const base = new Date(this.today);
    const dow = base.getDay() || 7; // Sun=0 -> 7
    const mon = new Date(base);
    mon.setDate(base.getDate() - dow + 1 + (weekIdx*7));
    mon.setHours(0,0,0,0);
    return mon;
  }
  weekLabel = computed(() => {
    const start = this.mondayOf(this.weekIndex());
    const end = new Date(start); end.setDate(start.getDate()+6);
    return `${start.getFullYear()}-${pad(start.getMonth()+1)}-${pad(start.getDate())} → ${end.getFullYear()}-${pad(end.getMonth()+1)}-${pad(end.getDate())}`;
  });

  // slots for current visible week
  slots = computed<Slot[]>(() => makeSlotsForWeek(Math.abs(this.weekIndex()) % 2));

  slotsForDay = (d: number) => computed(() =>
    this.slots()
      .filter(s => s.dayIdx === d)
      .sort((a,b) => a.start.localeCompare(b.start))
  );

  // next available (search this & next week)
  nextAvailable = computed(() => {
    const lists = [
      makeSlotsForWeek(Math.abs(this.weekIndex()) % 2),
      makeSlotsForWeek((Math.abs(this.weekIndex())+1) % 2)
    ].flat();

    // crude “soonest” by dayIdx then start
    const sorted = lists.sort((a,b) =>
      a.dayIdx - b.dayIdx || a.start.localeCompare(b.start)
    );
    return sorted[0] ?? null;
  });

  // price view for selected modality
  price = computed(() => {
    const p = this.doctor().prices[this.country()];
    const m = this.selectedModality();
    return { currency: p.currency, value: p[m] };
  });

  pickModality(m: Modality) {
    this.selectedModality.set(m);
    this.snack.open(`Selected ${m}`, undefined, { duration: 900 });
  }

  // helpers
  timeRange(s: Slot) { return `${s.start}–${hhmmPlus(s.start, s.duration)}`; }
  classFor(s: Slot) {
    const m = this.selectedModality();
    return {
      chat: s.modalities.length === 1 && s.modalities[0] === 'chat',
      voice: s.modalities.length === 1 && s.modalities[0] === 'voice',
      video: s.modalities.length === 1 && s.modalities[0] === 'video',
      multi: s.modalities.length > 1,
      incompatible: m != null && !s.modalities.includes(m)
    };
  }

  // actions
  bookNow(mod?: Modality) {
    if (mod) this.selectedModality.set(mod);
    this.router.navigate(['/patient/booking', this.doctor().id], { queryParams: { m: this.selectedModality() } });
  }

  seeAllReviews() {
    this.router.navigate(['/patient/reviews'], { queryParams: { doctorId: this.doctor().id } });
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\help\help.html =====

<div class="help-wrap container">
  <header class="hero">
    <div class="title">
      <div class="glow"></div>
      <mat-icon>headset_mic</mat-icon>
      <h2>Help & Support</h2>
    </div>
    <p class="tagline">We’re here every day, 9:00–22:00 EET.</p>
  </header>

  <section class="cards">
    <!-- Hotline -->
    <article class="card channel">
      <div class="icon aura"><mat-icon>call</mat-icon></div>
      <div class="body">
        <h3>Support Hotline</h3>
        <div class="value">{{ hotline }}</div>
        <div class="actions">
          <button mat-flat-button color="primary" (click)="call(hotline)">
            <mat-icon>call</mat-icon><span>Call</span>
          </button>
          <button mat-stroked-button (click)="copy(hotline)" matTooltip="Copy number">
            <mat-icon>content_copy</mat-icon><span>Copy</span>
          </button>
        </div>
      </div>
    </article>

    <!-- WhatsApp -->
    <article class="card channel">
      <div class="icon aura"><mat-icon>chat</mat-icon></div>
      <div class="body">
        <h3>WhatsApp</h3>
        <div class="value">{{ whatsapp }}</div>
        <div class="actions">
          <button mat-flat-button color="primary" (click)="openWhatsApp(whatsapp)">
            <mat-icon>open_in_new</mat-icon><span>Open</span>
          </button>
          <button mat-stroked-button (click)="copy(whatsapp)" matTooltip="Copy number">
            <mat-icon>content_copy</mat-icon><span>Copy</span>
          </button>
        </div>
      </div>
    </article>

    <!-- Email -->
    <article class="card channel">
      <div class="icon aura"><mat-icon>mail</mat-icon></div>
      <div class="body">
        <h3>Email</h3>
        <div class="value">{{ email }}</div>
        <div class="actions">
          <button mat-flat-button color="primary" (click)="emailTo(email)">
            <mat-icon>mail</mat-icon><span>Email</span>
          </button>
          <button mat-stroked-button (click)="copy(email)" matTooltip="Copy email">
            <mat-icon>content_copy</mat-icon><span>Copy</span>
          </button>
        </div>
      </div>
    </article>
  </section>

  <footer class="foot">
    <mat-icon>verified_user</mat-icon>
    <span>Response time typically under 10 minutes during hours.</span>
  </footer>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\help\help.scss =====

.help-wrap {
  padding: 18px 12px 40px;
}

.hero {
  display: grid;
  gap: 6px;
  margin-bottom: 12px;
}

.title {
  position: relative;
  display: flex;
  align-items: center;
  gap: 10px;
  h2 { margin: 0; }
  mat-icon { font-size: 22px; height: 22px; width: 22px; opacity: .9; }
}

.title .glow {
  position: absolute; inset: -18px -12px -12px -12px;
  pointer-events: none;
  background:
    radial-gradient(60% 60% at 10% 40%, rgba(29,183,160,.15), transparent 60%),
    radial-gradient(60% 60% at 80% 20%, rgba(59,139,211,.18), transparent 60%);
  filter: blur(12px); opacity: .8;
}

.tagline { color: var(--muted); margin: 0; }

.cards {
  display: grid;
  gap: 14px;
  grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
}

.card.channel {
  display: grid;
  grid-template-columns: auto 1fr;
  align-items: center;
  gap: 14px;
  padding: 16px;
  border: 1px solid var(--border);
  border-radius: var(--radius-xl);
  background:
    linear-gradient(180deg, rgba(255,255,255,.02), rgba(255,255,255,.01)),
    var(--surface);
  box-shadow: var(--shadow-sm);
  transition: transform var(--dur-3) var(--ease), box-shadow var(--dur-3) var(--ease);
}
.card.channel:hover {
  transform: translateY(-2px);
  box-shadow: 0 18px 60px rgba(0,0,0,.45);
}

.icon {
  width: 52px; height: 52px; border-radius: 16px;
  display: grid; place-items: center;
  background: rgba(255,255,255,.04);
  border: 1px solid var(--border);
  mat-icon { font-size: 24px; width: 24px; height: 24px; }
  position: relative; overflow: hidden;
}
.icon.aura::after {
  content: ""; position: absolute; inset: -40%;
  background: radial-gradient(60% 60% at 30% 30%, rgba(29,183,160,.25), transparent 60%),
              radial-gradient(60% 60% at 70% 70%, rgba(59,139,211,.22), transparent 60%);
  filter: blur(14px); opacity: .9;
}

.body { display: grid; gap: 8px; }
.body h3 { margin: 0; font-weight: 800; letter-spacing: .2px; }
.value { font-family: var(--font-sans); font-size: 15px; opacity: .95; }

.actions {
  display: flex; flex-wrap: wrap; gap: 8px;
  button { height: 36px; border-radius: 12px; }
  mat-icon { margin-right: 6px; }
}

.foot {
  display: flex; align-items: center; gap: 8px;
  margin-top: 10px; color: var(--muted);
  mat-icon { font-size: 18px; width: 18px; height: 18px; opacity: .8; }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\help\help.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Help } from './help';

describe('Help', () => {
  let component: Help;
  let fixture: ComponentFixture<Help>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Help]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Help);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\help\help.ts =====

import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';

@Component({
  standalone: true,
  selector: 'app-help',
  templateUrl: './help.html',
  styleUrls: ['./help.scss'],
  imports: [CommonModule, MatIconModule, MatButtonModule, MatTooltipModule, MatSnackBarModule]
})
export class HelpComponent {
  private snack = inject(MatSnackBar);

  // Edit these in one place
  readonly hotline = '+20 106 555 1212';
  readonly whatsapp = '+20 106 555 1212';
  readonly email = 'support@medtik.app';

  call(num: string) {
    const tel = this.onlyDigits(num);
    window.open(`tel:${tel}`);
  }

  openWhatsApp(num: string) {
    const phone = this.onlyDigits(num);
    const msg = encodeURIComponent('Hi Medtik Support — I need help with...');
    window.open(`https://wa.me/${phone}?text=${msg}`, '_blank');
  }

  emailTo(addr: string) {
    window.location.href = `mailto:${addr}`;
  }

  async copy(text: string) {
    try {
      if (navigator.clipboard?.writeText) {
        await navigator.clipboard.writeText(text);
      } else {
        const ta = document.createElement('textarea');
        ta.value = text;
        document.body.appendChild(ta);
        ta.select();
        document.execCommand('copy');
        document.body.removeChild(ta);
      }
      this.snack.open('Copied to clipboard', 'OK', { duration: 1400 });
    } catch {
      this.snack.open('Copy failed', 'OK', { duration: 1600 });
    }
  }

  private onlyDigits(v: string) {
    return (v || '').replace(/\D+/g, '');
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\notifications\notifications.html =====

<div class="notif-wrap">
  <!-- Header -->
  <div class="toolbar">
    <div class="title">
      <mat-icon>notifications_active</mat-icon>
      <h2>Notifications</h2>
    </div>

    <div class="tools">
      <div class="search">
        <input
          type="text"
          [value]="query()"
          (input)="query.set($any($event.target).value)"
          placeholder="Search notifications…" />
        <mat-icon>search</mat-icon>
      </div>

      <button mat-stroked-button (click)="markAllRead()" matTooltip="Mark all as read">
        <mat-icon>done_all</mat-icon> Mark all read
      </button>
      <button mat-stroked-button (click)="clearOlderThan(30)" matTooltip="Archive items older than 30 days">
        <mat-icon>cleaning_services</mat-icon> Clear 30d
      </button>
      <button mat-flat-button color="primary" (click)="openSettings()">
        <mat-icon>tune</mat-icon> Settings
      </button>
    </div>
  </div>

  <!-- Filters -->
  <div class="filters card">
    <mat-button-toggle-group [value]="filter()" (change)="filter.set($event.value)">
      <mat-button-toggle value="all">
        <mat-icon>all_inclusive</mat-icon>
        All
        <span class="badge" *ngIf="counts().all">{{ counts().all }}</span>
      </mat-button-toggle>
      <mat-button-toggle value="appointment">
        <mat-icon>event_available</mat-icon>
        Appointments
        <span class="badge" *ngIf="counts().appointment">{{ counts().appointment }}</span>
      </mat-button-toggle>
      <mat-button-toggle value="message">
        <mat-icon>chat</mat-icon>
        Messages
        <span class="badge" *ngIf="counts().message">{{ counts().message }}</span>
      </mat-button-toggle>
      <mat-button-toggle value="payment">
        <mat-icon>receipt_long</mat-icon>
        Payments
        <span class="badge" *ngIf="counts().payment">{{ counts().payment }}</span>
      </mat-button-toggle>
      <mat-button-toggle value="record">
        <mat-icon>folder_shared</mat-icon>
        Records
        <span class="badge" *ngIf="counts().record">{{ counts().record }}</span>
      </mat-button-toggle>
      <mat-button-toggle value="system">
        <mat-icon>notifications</mat-icon>
        System
        <span class="badge" *ngIf="counts().system">{{ counts().system }}</span>
      </mat-button-toggle>
    </mat-button-toggle-group>
  </div>

  <!-- Groups -->
  <div class="group" *ngIf="groups().today.length">
    <div class="head">Today</div>
    <div class="list">
      <div class="item" *ngFor="let n of groups().today" [class.unread]="n.status==='unread'">
        <div class="icon" [ngClass]="n.kind"><mat-icon>{{ icon(n.kind) }}</mat-icon></div>

        <div class="content" (click)="open(n)">
          <div class="row1">
            <div class="title">{{ n.title }}</div>
            <span class="pill" *ngIf="n.pill">{{ n.pill }}</span>
          </div>
          <div class="row2" *ngIf="n.body">{{ n.body }}</div>
          <div class="meta">
            <span class="kind" [ngClass]="n.kind">{{ n.kind }}</span>
            <span class="dot">•</span>
            <span class="ts">{{ when(n) }}</span>
          </div>
        </div>

        <div class="actions">
          <button mat-stroked-button *ngIf="n.cta" (click)="open(n)">{{ n.cta.label }}</button>
          <button mat-icon-button [matMenuTriggerFor]="menu" matTooltip="More">
            <mat-icon>more_horiz</mat-icon>
          </button>
          <mat-menu #menu="matMenu">
            <button mat-menu-item (click)="toggleRead(n)">
              <mat-icon>{{ n.status==='unread' ? 'mark_email_read' : 'mark_email_unread' }}</mat-icon>
              <span>{{ n.status==='unread' ? 'Mark read' : 'Mark unread' }}</span>
            </button>
            <button mat-menu-item (click)="archive(n)"><mat-icon>archive</mat-icon><span>Archive</span></button>
          </mat-menu>
        </div>
      </div>
    </div>
  </div>

  <div class="group" *ngIf="groups().week.length">
    <div class="head">This week</div>
    <div class="list">
      <div class="item" *ngFor="let n of groups().week" [class.unread]="n.status==='unread'">
        <div class="icon" [ngClass]="n.kind"><mat-icon>{{ icon(n.kind) }}</mat-icon></div>

        <div class="content" (click)="open(n)">
          <div class="row1">
            <div class="title">{{ n.title }}</div>
            <span class="pill" *ngIf="n.pill">{{ n.pill }}</span>
          </div>
          <div class="row2" *ngIf="n.body">{{ n.body }}</div>
          <div class="meta">
            <span class="kind" [ngClass]="n.kind">{{ n.kind }}</span>
            <span class="dot">•</span>
            <span class="ts">{{ when(n) }}</span>
          </div>
        </div>

        <div class="actions">
          <button mat-stroked-button *ngIf="n.cta" (click)="open(n)">{{ n.cta.label }}</button>
          <button mat-icon-button [matMenuTriggerFor]="menu" matTooltip="More">
            <mat-icon>more_horiz</mat-icon>
          </button>
          <mat-menu #menu="matMenu">
            <button mat-menu-item (click)="toggleRead(n)">
              <mat-icon>{{ n.status==='unread' ? 'mark_email_read' : 'mark_email_unread' }}</mat-icon>
              <span>{{ n.status==='unread' ? 'Mark read' : 'Mark unread' }}</span>
            </button>
            <button mat-menu-item (click)="archive(n)"><mat-icon>archive</mat-icon><span>Archive</span></button>
          </mat-menu>
        </div>
      </div>
    </div>
  </div>

  <div class="group" *ngIf="groups().earlier.length">
    <div class="head">Earlier</div>
    <div class="list">
      <div class="item" *ngFor="let n of groups().earlier" [class.unread]="n.status==='unread'">
        <div class="icon" [ngClass]="n.kind"><mat-icon>{{ icon(n.kind) }}</mat-icon></div>

        <div class="content" (click)="open(n)">
          <div class="row1">
            <div class="title">{{ n.title }}</div>
            <span class="pill" *ngIf="n.pill">{{ n.pill }}</span>
          </div>
          <div class="row2" *ngIf="n.body">{{ n.body }}</div>
          <div class="meta">
            <span class="kind" [ngClass]="n.kind">{{ n.kind }}</span>
            <span class="dot">•</span>
            <span class="ts">{{ when(n) }}</span>
          </div>
        </div>

        <div class="actions">
          <button mat-stroked-button *ngIf="n.cta" (click)="open(n)">{{ n.cta.label }}</button>
          <button mat-icon-button [matMenuTriggerFor]="menu" matTooltip="More">
            <mat-icon>more_horiz</mat-icon>
          </button>
          <mat-menu #menu="matMenu">
            <button mat-menu-item (click)="toggleRead(n)">
              <mat-icon>{{ n.status==='unread' ? 'mark_email_read' : 'mark_email_unread' }}</mat-icon>
              <span>{{ n.status==='unread' ? 'Mark read' : 'Mark unread' }}</span>
            </button>
            <button mat-menu-item (click)="archive(n)"><mat-icon>archive</mat-icon><span>Archive</span></button>
          </mat-menu>
        </div>
      </div>
    </div>
  </div>

  <div class="empty card" *ngIf="!groups().today.length && !groups().week.length && !groups().earlier.length">
    <mat-icon>inbox</mat-icon>
    <div>You're all caught up</div>
    <div class="muted">No notifications match your filters.</div>
  </div>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\notifications\notifications.scss =====

.notif-wrap { padding: 1rem; }

/* Toolbar */
.toolbar {
  display:flex; align-items:center; justify-content:space-between; gap:.75rem; margin-bottom:.75rem;

  .title { display:flex; align-items:center; gap:.6rem;
    h2 { margin:0; font-weight:800; letter-spacing:.2px; }
  }

  .tools { display:flex; align-items:center; gap:.5rem; flex-wrap:wrap; }

  .search {
    position: relative;
    input {
      width: min(540px, 75vw);
      padding: .55rem 2.2rem .55rem .9rem;
      border: 1px solid rgba(255,255,255,.08);
      border-radius: 12px;
      background: rgba(255,255,255,.02);
      color: var(--text);
      outline: none;
    }
    mat-icon {
      position:absolute; right:.5rem; top:50%; transform:translateY(-50%);
      opacity:.7;
    }
  }
}

/* Filters strip */
.filters {
  display:flex; align-items:center; justify-content:space-between;
  border-radius: 16px; margin-bottom: .9rem;

  .mat-button-toggle-group { border:none; background:transparent; }
  .mat-button-toggle {
    border-radius: 999px !important;
    margin-right: .35rem;
    border:1px solid rgba(255,255,255,.08) !important;
    background: rgba(255,255,255,.02);
  }
  .mat-button-toggle-checked { background: rgba(255,255,255,.06) !important; }
  .badge {
    margin-left:.35rem; font-size:.75rem; padding:.05rem .4rem; border-radius:999px;
    background: rgba(255,255,255,.12);
  }
}

/* Groups */
.group { margin-top: .5rem; }

.group .head {
  font-weight: 800; letter-spacing:.2px; opacity:.9; margin:.5rem 0 .35rem;
}

.list { display:grid; gap:.5rem; }

.item {
  display:grid; grid-template-columns: 44px 1fr auto; gap:.75rem;
  padding: .7rem .75rem; border:1px solid rgba(255,255,255,.08); border-radius:14px;
  background: rgba(255,255,255,.02);
  transition: transform .14s var(--ease), background .14s var(--ease), border-color .14s var(--ease);

  &:hover { transform: translateY(-1px); background: rgba(255,255,255,.04); border-color: rgba(255,255,255,.12); }
  &.unread { box-shadow: 0 0 0 2px rgba(85,145,255,.25) inset; }
}

.icon {
  width: 44px; height:44px; border-radius:12px; display:grid; place-items:center;
  background: rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.08);
  &.appointment { color:#7ea6ff; }
  &.message     { color:#65e0b9; }
  &.payment     { color:#ffd17a; }
  &.record      { color:#bba4ff; }
  &.system      { color:#a7b4c5; }
}

.content {
  cursor:pointer; display:grid; gap:.25rem;
  .row1 { display:flex; align-items:center; gap:.5rem; }
  .title { font-weight:700; letter-spacing:.2px; }
  .row2 { opacity:.9; }
  .meta { opacity:.75; display:flex; align-items:center; gap:.4rem; }
  .dot { opacity:.5; }
}

.pill {
  font-size:.75rem; padding:.1rem .5rem; border-radius:999px;
  border:1px solid rgba(255,255,255,.12); background: rgba(255,255,255,.05);
}

.kind {
  font-size:.75rem; text-transform:capitalize; padding:.05rem .45rem; border-radius:999px;
  border:1px solid rgba(255,255,255,.10);
  &.appointment { background: rgba(85,145,255,.10);  border-color: rgba(85,145,255,.30); }
  &.message     { background: rgba(66,211,146,.10);  border-color: rgba(66,211,146,.30); }
  &.payment     { background: rgba(245,158,11,.12);  border-color: rgba(245,158,11,.30); }
  &.record      { background: rgba(183,164,255,.12); border-color: rgba(183,164,255,.30); }
  &.system      { background: rgba(167,180,197,.12); border-color: rgba(167,180,197,.30); }
}

.actions {
  display:flex; align-items:center; gap:.25rem;
}

/* Empty */
.empty {
  display:grid; place-items:center; gap:.25rem; padding: 2rem 1rem; text-align:center;
  border-radius:16px; opacity:.9;
  mat-icon { font-size: 40px; width:40px; height:40px; opacity:.8; }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\notifications\notifications.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Notifications } from './notifications';

describe('Notifications', () => {
  let component: Notifications;
  let fixture: ComponentFixture<Notifications>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Notifications]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Notifications);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\notifications\notifications.ts =====

import { Component, inject, computed, signal, Inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterModule } from '@angular/router';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatMenuModule } from '@angular/material/menu';
import { MatDividerModule } from '@angular/material/divider';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { MatDialog, MatDialogModule, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { FormsModule } from '@angular/forms';

type NotiKind   = 'appointment' | 'message' | 'payment' | 'record' | 'system';
type NotiStatus = 'unread' | 'read' | 'archived';

type CTA = { label: string; route?: any[]; external?: string };

type NotificationItem = {
  id: string;
  kind: NotiKind;
  status: NotiStatus;
  title: string;
  body?: string;
  ts: string;       // ISO
  pill?: string;    // small type pill, e.g., “Video”, “Invoice”
  cta?: CTA;
  meta?: Record<string, any>;
};

// ---------- utils ----------
const uid = () => Math.random().toString(36).slice(2, 10);
const startOfToday = () => { const d = new Date(); d.setHours(0,0,0,0); return d; };
const mondayOfWeek = (d = new Date()) => {
  const day = d.getDay() || 7;
  const m = new Date(d);
  m.setDate(d.getDate() - day + 1);
  m.setHours(0,0,0,0);
  return m;
};
const rel = (iso: string) => {
  const now = new Date().getTime();
  const t   = new Date(iso).getTime();
  const diff = Math.max(0, now - t);
  const s = Math.floor(diff / 1000);
  if (s < 60)  return `${s}s ago`;
  const m = Math.floor(s / 60);
  if (m < 60)  return `${m}m ago`;
  const h = Math.floor(m / 60);
  if (h < 24)  return `${h}h ago`;
  const d = Math.floor(h / 24);
  if (d === 1) return 'Yesterday';
  return `${d}d ago`;
};

// ---------- mock feed (replace with API later) ----------
function mockFeed(): NotificationItem[] {
  const now = new Date();
  const mk = (
    minsAgo: number, kind: NotiKind, status: NotiStatus, title: string,
    body?: string, pill?: string, cta?: CTA, meta?: any
  ): NotificationItem => {
    const t = new Date(now);
    t.setMinutes(t.getMinutes() - minsAgo);
    return { id: uid(), kind, status, title, body, pill, cta, ts: t.toISOString(), meta };
  };

  return [
    mk(5,   'appointment', 'unread', 'Your video visit starts soon', 'Join in 5–10 minutes.', 'Video', { label: 'Join', route: ['/patient/appointments'] }),
    mk(18,  'message',     'unread', 'Dr. Sarah replied', 'Please share the lab result image.', 'Chat', { label: 'Open chat', route: ['/patient/chat', 'thread-987'] }, { threadId: 'thread-987' }),
    mk(65,  'payment',     'read',   'Invoice paid', 'EGP 180 for video visit', 'Paid', { label: 'View payments', route: ['/patient/payments'] }),
    mk(220, 'record',      'read',   'New record uploaded', 'X-ray Chest.png', 'Imaging', { label: 'Open records', route: ['/patient/records'] }),
    mk(1500,'system',      'read',   'Security reminder', 'Enable two-factor authentication for extra protection.'),
    mk(2880,'appointment', 'read',   'Visit completed', 'Thanks for visiting Dr. Sarah.', 'Completed'),
    mk(4320,'payment',     'read',   'Refund processed', 'EGP 80 refund has been issued', 'Refunded', { label: 'View payments', route: ['/patient/payments'] }),
    mk(6000,'record',      'read',   'Record archived', 'Derm Rx.pdf was archived', 'Record'),
  ];
}

// ---------- settings ----------
type Digest = 'off' | 'daily' | 'weekly';
type NotiSettings = {
  categories: Record<NotiKind, boolean>;
  sound: boolean;
  desktop: boolean;
  emailDigest: Digest;
};

const DEFAULT_SETTINGS: NotiSettings = {
  categories: { appointment: true, message: true, payment: true, record: true, system: true },
  sound: true,
  desktop: false,
  emailDigest: 'daily',
};

function loadSettings(): NotiSettings {
  try {
    const raw = localStorage.getItem('notif:settings');
    return raw ? (JSON.parse(raw) as NotiSettings) : DEFAULT_SETTINGS;
  } catch {
    return DEFAULT_SETTINGS;
  }
}

@Component({
  standalone: true,
  selector: 'app-notifications',
  templateUrl: './notifications.html',
  styleUrls: ['./notifications.scss'],
  imports: [
    CommonModule, RouterModule, FormsModule,
    MatIconModule, MatButtonModule, MatTooltipModule,
    MatButtonToggleModule, MatMenuModule, MatDividerModule,
    MatSnackBarModule, MatDialogModule, MatSlideToggleModule
  ]
})
export class NotificationsComponent {
  private router = inject(Router);
  private snack = inject(MatSnackBar);
  private dialog = inject(MatDialog);

  // Data
  all = signal<NotificationItem[]>(mockFeed());

  // Local settings (persist)
  settings = signal<NotiSettings>(loadSettings());

  saveSettings(v: NotiSettings) {
    this.settings.set(v);
    try { localStorage.setItem('notif:settings', JSON.stringify(v)); } catch {}
    this.snack.open('Notification preferences saved', 'OK', { duration: 1200 });
  }

  // Search & filter
  query = signal('');
  filter = signal<'all' | NotiKind>('all');

  // Visible list
  visible = computed(() => {
    const q = this.query().toLowerCase().trim();
    const f = this.filter();
    const allows = this.settings().categories;

    return this.all()
      .filter(n => n.status !== 'archived')
      .filter(n => allows[n.kind])
      .filter(n => (f === 'all' ? true : n.kind === f))
      .filter(n => !q || n.title.toLowerCase().includes(q) || (n.body ?? '').toLowerCase().includes(q))
      .sort((a,b) => new Date(b.ts).getTime() - new Date(a.ts).getTime());
  });

  // Group into Today / This week / Earlier
  groups = computed(() => {
    const today = startOfToday().getTime();
    const week0 = mondayOfWeek(new Date()).getTime();
    const g = { today: [] as NotificationItem[], week: [] as NotificationItem[], earlier: [] as NotificationItem[] };
    for (const n of this.visible()) {
      const t = new Date(n.ts).getTime();
      if (t >= today) g.today.push(n);
      else if (t >= week0) g.week.push(n);
      else g.earlier.push(n);
    }
    return g;
  });

  // Unread counts
  counts = computed(() => {
    const byKind: Record<'all' | NotiKind, number> = { all: 0, appointment: 0, message: 0, payment: 0, record: 0, system: 0 };
    for (const n of this.all()) {
      if (n.status === 'unread') { byKind.all++; byKind[n.kind]++; }
    }
    return byKind;
  });

  // Helpers
  icon(kind: NotiKind) {
    switch (kind) {
      case 'appointment': return 'event_available';
      case 'message':     return 'chat';
      case 'payment':     return 'receipt_long';
      case 'record':      return 'folder_shared';
      case 'system':      return 'notifications';
    }
  }
  when(n: NotificationItem) { return rel(n.ts); }

  // Actions
  open(n: NotificationItem) {
    this.markRead(n);
    if (n.cta?.route) this.router.navigate(n.cta.route);
    else if (n.cta?.external) window.open(n.cta.external, '_blank');
  }
  markRead(n: NotificationItem) {
    if (n.status === 'read') return;
    this.all.update(list => list.map(x => x.id === n.id ? { ...x, status: 'read' } : x));
  }
  toggleRead(n: NotificationItem) {
    this.all.update(list => list.map(x => x.id === n.id ? { ...x, status: x.status === 'unread' ? 'read' : 'unread' } : x));
  }
  archive(n: NotificationItem) {
    this.all.update(list => list.map(x => x.id === n.id ? { ...x, status: 'archived' } : x));
    this.snack.open('Archived', 'Undo', { duration: 1500 })
      .onAction().subscribe(() =>
        this.all.update(list => list.map(x => x.id === n.id ? { ...x, status: 'read' } : x))
      );
  }
  markAllRead() {
    this.all.update(list => list.map(x => x.status === 'unread' ? { ...x, status: 'read' } : x));
  }
  clearOlderThan(days = 30) {
    const cutoff = Date.now() - days * 86400000;
    this.all.update(list => list.map(x => new Date(x.ts).getTime() < cutoff ? { ...x, status: 'archived' } : x));
    this.snack.open(`Cleared items older than ${days}d`, 'OK', { duration: 1200 });
  }

  openSettings() {
    const data: NotiSettings = JSON.parse(JSON.stringify(this.settings()));
    const ref = this.dialog.open(NotificationsSettingsDialogComponent, {
      panelClass: 'medtik-dialog',
      width: 'min(92vw, 720px)',
      data
    });
    ref.afterClosed().subscribe((v?: NotiSettings) => { if (v) this.saveSettings(v); });
  }
}

// ---------------- Settings Dialog ----------------
@Component({
  standalone: true,
  selector: 'app-notifications-settings-dialog',
  template: `
  <h2 mat-dialog-title>
    <mat-icon>tune</mat-icon>
    Notifications settings
  </h2>

  <mat-dialog-content class="dlg">
    <div class="section">
      <h4>Categories</h4>
      <div class="toggles">
        <mat-slide-toggle [(ngModel)]="model.categories.appointment">Appointments</mat-slide-toggle>
        <mat-slide-toggle [(ngModel)]="model.categories.message">Messages</mat-slide-toggle>
        <mat-slide-toggle [(ngModel)]="model.categories.payment">Payments</mat-slide-toggle>
        <mat-slide-toggle [(ngModel)]="model.categories.record">Records</mat-slide-toggle>
        <mat-slide-toggle [(ngModel)]="model.categories.system">System</mat-slide-toggle>
      </div>
    </div>

    <mat-divider></mat-divider>

    <div class="section">
      <h4>Delivery</h4>
      <div class="toggles">
        <mat-slide-toggle [(ngModel)]="model.desktop">Desktop push</mat-slide-toggle>
        <mat-slide-toggle [(ngModel)]="model.sound">Sound</mat-slide-toggle>
      </div>
    </div>

    <div class="section">
      <h4>Email digest</h4>
      <mat-button-toggle-group [(ngModel)]="model.emailDigest" aria-label="Digest frequency">
        <mat-button-toggle value="off">Off</mat-button-toggle>
        <mat-button-toggle value="daily">Daily</mat-button-toggle>
        <mat-button-toggle value="weekly">Weekly</mat-button-toggle>
      </mat-button-toggle-group>
    </div>
  </mat-dialog-content>

  <mat-dialog-actions align="end">
    <button mat-button mat-dialog-close>Cancel</button>
    <button mat-flat-button color="primary" (click)="save()">Save</button>
  </mat-dialog-actions>
  `,
  styles: [`
    .dlg { display:grid; gap:1rem; }
    .section h4 { margin:.2rem 0 .5rem; font-weight:700; }
    .toggles { display:grid; gap:.5rem; grid-template-columns: repeat(2, minmax(0, 1fr)); }
    @media (max-width: 640px) { .toggles { grid-template-columns: 1fr; } }
  `],
  imports: [
    CommonModule, FormsModule,
    MatDialogModule, MatIconModule, MatButtonModule, MatDividerModule,
    MatSlideToggleModule, MatButtonToggleModule
  ]
})
export class NotificationsSettingsDialogComponent {
  model: NotiSettings;
  constructor(
    private ref: MatDialogRef<NotificationsSettingsDialogComponent, NotiSettings | undefined>,
    @Inject(MAT_DIALOG_DATA) public data: NotiSettings
  ) {
    this.model = data ? JSON.parse(JSON.stringify(data)) : JSON.parse(JSON.stringify(DEFAULT_SETTINGS));
  }
  save() { this.ref.close(this.model); }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\payments\payments.html =====

<div class="pay-wrap">
  <!-- Header -->
  <div class="toolbar">
    <div class="title">
      <mat-icon>receipt_long</mat-icon>
      <h2>Payments & Invoices</h2>
      <span class="muted">({{ unpaidCount() }} unpaid)</span>
    </div>

    <mat-button-toggle-group
      class="filters"
      [value]="status()"
      (change)="setFilter($event.value)"
      aria-label="Filter invoices"
    >
      <mat-button-toggle value="all"><mat-icon>all_inclusive</mat-icon> All</mat-button-toggle>
      <mat-button-toggle value="unpaid"><mat-icon>warning</mat-icon> Unpaid</mat-button-toggle>
      <mat-button-toggle value="paid"><mat-icon>check_circle</mat-icon> Paid</mat-button-toggle>
      <mat-button-toggle value="refunded"><mat-icon>redeem</mat-icon> Refunded</mat-button-toggle>
    </mat-button-toggle-group>
  </div>

  <!-- Content -->
  <ng-container *ngIf="status() !== 'all'; else grouped">
    <div class="grid">
      <section class="inv-card" *ngFor="let i of filtered()">
        <div class="left">
          <img class="avatar" [src]="i.doctor.avatar" alt="" />
          <div class="meta">
            <div class="doc">
              <div class="name">{{ i.doctor.name }}</div>
              <div class="dept muted">{{ i.doctor.department }}</div>
            </div>
            <div class="when muted">{{ toLocal(i.createdAt) }}</div>
          </div>
        </div>

        <div class="right">
          <div class="amount">
            <div class="val">{{ i.amount.value }} {{ i.amount.currency }}</div>
            <div class="pill modality" [ngClass]="i.modality"><mat-icon>{{ modalityIcon(i.modality) }}</mat-icon>{{ i.modality }}</div>
          </div>

          <div class="actions">
            <button mat-flat-button color="primary" *ngIf="i.status==='unpaid'" (click)="payNow(i)">
              <mat-icon>payments</mat-icon> Pay now
            </button>
            <button mat-stroked-button (click)="downloadReceipt(i)">
              <mat-icon>download</mat-icon> Receipt
            </button>
            <button mat-button (click)="viewAppointment(i)">
              <mat-icon>event</mat-icon> Appointment
            </button>
          </div>

          <div class="status chip" [ngClass]="i.status">{{ i.status }}</div>
        </div>
      </section>
    </div>
  </ng-container>

  <!-- Grouped (All) -->
  <ng-template #grouped>
    <div class="section" *ngIf="unpaid().length">
      <h3><mat-icon>warning</mat-icon> Unpaid</h3>
      <div class="grid">
        <section class="inv-card" *ngFor="let i of unpaid()">
          <div class="left">
            <img class="avatar" [src]="i.doctor.avatar" alt="" />
            <div class="meta">
              <div class="doc">
                <div class="name">{{ i.doctor.name }}</div>
                <div class="dept muted">{{ i.doctor.department }}</div>
              </div>
              <div class="when muted">{{ toLocal(i.createdAt) }}</div>
            </div>
          </div>

          <div class="right">
            <div class="amount">
              <div class="val">{{ i.amount.value }} {{ i.amount.currency }}</div>
              <div class="pill modality" [ngClass]="i.modality"><mat-icon>{{ modalityIcon(i.modality) }}</mat-icon>{{ i.modality }}</div>
            </div>
            <div class="actions">
              <button mat-flat-button color="primary" (click)="payNow(i)"><mat-icon>payments</mat-icon> Pay now</button>
              <button mat-stroked-button (click)="downloadReceipt(i)"><mat-icon>download</mat-icon> Receipt</button>
              <button mat-button (click)="viewAppointment(i)"><mat-icon>event</mat-icon> Appointment</button>
            </div>
            <div class="status chip unpaid">unpaid</div>
          </div>
        </section>
      </div>
    </div>

    <div class="section" *ngIf="paid().length">
      <h3><mat-icon>check_circle</mat-icon> Paid</h3>
      <div class="grid">
        <section class="inv-card" *ngFor="let i of paid()">
          <div class="left">
            <img class="avatar" [src]="i.doctor.avatar" alt="" />
            <div class="meta">
              <div class="doc">
                <div class="name">{{ i.doctor.name }}</div>
                <div class="dept muted">{{ i.doctor.department }}</div>
              </div>
              <div class="when muted">{{ toLocal(i.createdAt) }}</div>
            </div>
          </div>

          <div class="right">
            <div class="amount">
              <div class="val">{{ i.amount.value }} {{ i.amount.currency }}</div>
              <div class="pill modality" [ngClass]="i.modality"><mat-icon>{{ modalityIcon(i.modality) }}</mat-icon>{{ i.modality }}</div>
            </div>
            <div class="actions">
              <button mat-stroked-button (click)="downloadReceipt(i)"><mat-icon>download</mat-icon> Receipt</button>
              <button mat-button (click)="viewAppointment(i)"><mat-icon>event</mat-icon> Appointment</button>
            </div>
            <div class="status chip paid">paid</div>
          </div>
        </section>
      </div>
    </div>

    <div class="section" *ngIf="refunded().length">
      <h3><mat-icon>redeem</mat-icon> Refunded</h3>
      <div class="grid">
        <section class="inv-card" *ngFor="let i of refunded()">
          <div class="left">
            <img class="avatar" [src]="i.doctor.avatar" alt="" />
            <div class="meta">
              <div class="doc">
                <div class="name">{{ i.doctor.name }}</div>
                <div class="dept muted">{{ i.doctor.department }}</div>
              </div>
              <div class="when muted">{{ toLocal(i.createdAt) }}</div>
            </div>
          </div>

          <div class="right">
            <div class="amount">
              <div class="val">{{ i.amount.value }} {{ i.amount.currency }}</div>
              <div class="pill modality" [ngClass]="i.modality"><mat-icon>{{ modalityIcon(i.modality) }}</mat-icon>{{ i.modality }}</div>
            </div>
            <div class="actions">
              <button mat-stroked-button (click)="downloadReceipt(i)"><mat-icon>download</mat-icon> Receipt</button>
              <button mat-button (click)="viewAppointment(i)"><mat-icon>event</mat-icon> Appointment</button>
            </div>
            <div class="status chip refunded">refunded</div>
          </div>
        </section>
      </div>
    </div>
  </ng-template>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\payments\payments.scss =====

.pay-wrap { padding: 1rem; }

/* Header */
.toolbar {
  display: flex; align-items: center; justify-content: space-between; gap: 1rem; margin-bottom: 1rem;

  .title { display: flex; align-items: center; gap: .6rem;
    h2 { margin: 0; font-weight: 800; letter-spacing: .2px; }
    .muted { opacity: .75; font-size: .9rem; }
  }

  .filters {
    border-radius: 999px; overflow: hidden;
    :host ::ng-deep .mat-button-toggle-button { padding: .38rem .75rem; }
  }
}

/* Sections */
.section { margin-top: 1rem;
  h3 { display: flex; align-items: center; gap: .4rem; margin: 0 0 .5rem; font-weight: 700; }
}

/* Grid of invoice cards */
.grid {
  display: grid; gap: 1rem;
  grid-template-columns: repeat(2, minmax(0, 1fr));
}
@media (max-width: 1100px) { .grid { grid-template-columns: 1fr; } }

/* Invoice card */
.inv-card {
  display: grid;
  grid-template-columns: 1fr auto;
  gap: 1rem;
  background: rgba(255,255,255,.02);
  border: 1px solid rgba(255,255,255,.06);
  border-radius: 16px;
  box-shadow: 0 10px 25px rgba(0,0,0,.25);
  padding: .85rem;

  .left {
    display: grid; grid-template-columns: auto 1fr; gap: .75rem; align-items: center;
    .avatar { width: 56px; height: 56px; border-radius: 50%; object-fit: cover; }
    .meta {
      .name { font-weight: 700; letter-spacing: .2px; }
      .dept { opacity: .8; }
      .when { opacity: .8; font-size: .9rem; margin-top: .15rem; }
    }
  }

  .right {
    display: grid; align-content: space-between; gap: .5rem; justify-items: end; text-align: right;

    .amount {
      display: grid; gap: .25rem; justify-items: end;
      .val { font-weight: 800; }
      .modality.pill {
        display: inline-flex; align-items: center; gap: .35rem;
        padding: .15rem .5rem; border-radius: 999px; border: 1px solid rgba(255,255,255,.08);
        background: rgba(255,255,255,.04); text-transform: capitalize;
        mat-icon { font-size: 18px; width: 18px; height: 18px; }
        &.chat  { border-left: 3px solid #5591ff; }
        &.voice { border-left: 3px solid #42d392; }
        &.video { border-left: 3px solid #b78cff; }
      }
    }

    .actions { display: flex; gap: .5rem; flex-wrap: wrap; justify-content: flex-end; }

    .status.chip {
      display: inline-block; padding: .15rem .5rem; border-radius: 999px;
      border: 1px solid rgba(255,255,255,.10); background: rgba(255,255,255,.04);
      text-transform: capitalize; font-size: .85rem;
      &.unpaid   { border-left: 3px solid #ffb84d; }
      &.paid     { border-left: 3px solid #42d392; }
      &.refunded { border-left: 3px solid #7ea6ff; }
      &.failed   { border-left: 3px solid #ff7a7a; }
    }
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\payments\payments.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Payments } from './payments';

describe('Payments', () => {
  let component: Payments;
  let fixture: ComponentFixture<Payments>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Payments]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Payments);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\payments\payments.ts =====

import { Component, computed, signal, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router } from '@angular/router';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';

type Modality = 'chat' | 'voice' | 'video';
type Currency = 'EGP' | 'SAR' | 'AED';
type InvoiceStatus = 'unpaid' | 'paid' | 'refunded' | 'failed';

type Invoice = {
  id: string;
  appointmentId: string;
  createdAt: string; // ISO
  modality: Modality;
  amount: { currency: Currency; value: number };
  status: InvoiceStatus;
  // optional payment fields (kept for future use; NOT shown on UI now)
  method?: 'card' | 'wallet' | 'cash';
  last4?: string;
  txnId?: string;
  doctor: { name: string; department: string; avatar: string };
};

const pad = (n: number) => (n < 10 ? '0' : '') + n;
const toLocal = (iso: string) =>
  new Date(iso).toLocaleString(undefined, {
    weekday: 'short', year: 'numeric', month: 'short', day: '2-digit',
    hour: '2-digit', minute: '2-digit'
  });

const uid = () => Math.random().toString(36).slice(2, 10);

// --- mock list (replace with API later) ---
function mockFetchInvoices(): Invoice[] {
  const now = new Date();
  const mk = (offsetMin: number, status: InvoiceStatus, modality: Modality, value: number, img = 5): Invoice => {
    const d = new Date(now);
    d.setUTCMinutes(d.getUTCMinutes() + offsetMin);
    d.setUTCSeconds(0, 0);
    return {
      id: uid(),
      appointmentId: 'appt_' + uid(),
      createdAt: d.toISOString(),
      modality,
      amount: { currency: 'EGP', value },
      status,
      doctor: {
        name: img % 2 ? 'Dr. Sarah Ali' : 'Dr. Omar Khaled',
        department: img % 2 ? 'Pediatrics' : 'Dermatology',
        avatar: `https://i.pravatar.cc/120?img=${img}`
      }
    };
  };

  return [
    mk(+240, 'unpaid',   'voice', 120, 6),
    mk(+60,  'unpaid',   'video', 180, 7),
    mk(-180, 'paid',     'chat',   80, 8),
    mk(-1440,'refunded', 'video', 180, 9),
    mk(-2880,'paid',     'voice', 120, 10),
  ];
}

@Component({
  standalone: true,
  selector: 'app-payments',
  templateUrl: './payments.html',
  styleUrls: ['./payments.scss'],
  imports: [
    CommonModule, RouterModule,
    MatIconModule, MatButtonModule, MatButtonToggleModule,
    MatTooltipModule, MatSnackBarModule
  ]
})
export class PaymentsComponent {
  private router = inject(Router);
  private snack  = inject(MatSnackBar);

  // data
  all = signal<Invoice[]>(mockFetchInvoices());

  // filters
  status = signal<'all' | InvoiceStatus>('all');

  // derived lists
  filtered = computed(() => {
    const s = this.status();
    return this.all()
      .filter(i => s === 'all' ? true : i.status === s)
      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
  });

  // groups (when "All" is active)
  unpaid   = computed(() =>
    this.all()
      .filter(i => i.status === 'unpaid')
      .sort((a,b)=> new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())
  );
  paid     = computed(() =>
    this.all()
      .filter(i => i.status === 'paid')
      .sort((a,b)=> new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
  );
  refunded = computed(() =>
    this.all()
      .filter(i => i.status === 'refunded')
      .sort((a,b)=> new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()) // ← ✅ getTime()
  );

  // header counts
  unpaidCount = computed(() => this.all().filter(i => i.status === 'unpaid').length);

  // helpers
  toLocal = toLocal;
  modalityIcon(m: Modality) { return m === 'chat' ? 'chat' : m === 'voice' ? 'call' : 'videocam'; }

  // actions
  payNow(i: Invoice) {
    if (i.status !== 'unpaid') return;
    // keep array type as Invoice[] by narrowing the literal type
    this.all.update(list =>
      list.map(x =>
        x.id === i.id
          ? ({ ...x, status: 'paid' as InvoiceStatus, txnId: 'pay_' + uid() })
          : x
      )
    );
    this.snack.open('Payment successful', 'OK', { duration: 1800 });
  }

  downloadReceipt(i: Invoice) {
    const html = `
<!doctype html>
<meta charset="utf-8">
<title>Receipt ${i.id}</title>
<style>
  body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial;padding:24px;background:#0c1018;color:#eaf0ff}
  .card{max-width:640px;margin:auto;border:1px solid #1e2633;border-radius:12px;padding:20px;background:#0f1520}
  h1{margin:0 0 10px;font-size:18px}
  .kv{display:grid;grid-template-columns:140px 1fr;row-gap:8px;column-gap:10px}
  .k{opacity:.75}
  .total{margin-top:12px;padding-top:12px;border-top:1px dashed #2a3446;font-weight:700}
  .pill{display:inline-block;padding:2px 8px;border-radius:999px;border:1px solid #2a3446;background:#121a27}
</style>
<div class="card">
  <h1>Receipt</h1>
  <div class="kv">
    <div class="k">Invoice</div><div>${i.id}</div>
    <div class="k">Appointment</div><div>${i.appointmentId}</div>
    <div class="k">Date</div><div>${toLocal(i.createdAt)}</div>
    <div class="k">Doctor</div><div>${i.doctor.name} — ${i.doctor.department}</div>
    <div class="k">Type</div><div><span class="pill">${i.modality}</span></div>
    <div class="k total">Total</div><div class="total">${i.amount.value} ${i.amount.currency}</div>
  </div>
</div>`;
    const blob = new Blob([html], { type: 'text/html;charset=utf-8' });
    const url  = URL.createObjectURL(blob);
    const a    = document.createElement('a');
    a.href = url; a.download = `receipt-${i.id}.html`; a.click();
    URL.revokeObjectURL(url);
  }

  viewAppointment(i: Invoice) {
    this.router.navigate(['/patient/appointments']); // or `/patient/appointments/${i.appointmentId}`
  }

  setFilter(v: 'all' | InvoiceStatus) { this.status.set(v); }
}

export default PaymentsComponent;



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\records\records.html =====

<div class="rec-wrap">
  <!-- Header -->
  <div class="toolbar">
    <div class="title">
      <mat-icon>folder_shared</mat-icon>
      <h2>Medical records</h2>
    </div>

    <div class="controls">
      <mat-form-field appearance="outline" class="search">
        <mat-label>Search records</mat-label>
        <input
          matInput
          placeholder="Title, notes, type..."
          [value]="query()"
          (input)="query.set($any($event.target).value)" />
      </mat-form-field>

      <mat-button-toggle-group
        class="filters"
        [value]="filter()"
        (change)="filter.set($event.value)"
        aria-label="Filter by type">
        <mat-button-toggle value="all"><mat-icon>all_inclusive</mat-icon> All</mat-button-toggle>
        <mat-button-toggle value="report"><mat-icon>description</mat-icon> Reports</mat-button-toggle>
        <mat-button-toggle value="prescription"><mat-icon>medical_services</mat-icon> Prescriptions</mat-button-toggle>
        <mat-button-toggle value="lab"><mat-icon>biotech</mat-icon> Labs</mat-button-toggle>
        <mat-button-toggle value="imaging"><mat-icon>image</mat-icon> Imaging</mat-button-toggle>
        <mat-button-toggle value="other"><mat-icon>insert_drive_file</mat-icon> Other</mat-button-toggle>
      </mat-button-toggle-group>

      <button mat-flat-button color="primary" class="add" (click)="openAdd()">
        <mat-icon>add</mat-icon> Add record
      </button>
    </div>
  </div>

  <!-- Grid -->
  <div class="grid">
    <div class="card" *ngFor="let r of filtered()" (click)="preview(r)" matTooltip="Click to preview">
      <div class="thumb" [class.is-img]="!!r.thumb" [class.is-pdf]="isPDF(r.mime)">
        <!-- Prefer a generated thumbnail if present; otherwise icons -->
        <img *ngIf="r.thumb" [src]="r.thumb" alt="" />
        <ng-container *ngIf="!r.thumb">
          <mat-icon *ngIf="isPDF(r.mime)">picture_as_pdf</mat-icon>
          <mat-icon *ngIf="!isPDF(r.mime)">insert_drive_file</mat-icon>
        </ng-container>
        <span class="pill type" [ngClass]="pillClass(r.type)">{{ r.type }}</span>
      </div>

      <div class="info">
        <div class="name">{{ r.name }}</div>
        <div class="meta">
          <span>{{ dateLabel(r.createdAt) }}</span>
          <span class="dot">•</span>
          <span>{{ r.sizeKB }} KB</span>
        </div>
        <div class="notes" *ngIf="r.notes">{{ r.notes }}</div>
      </div>

      <div class="actions" (click)="$event.stopPropagation()">
        <button mat-icon-button [matMenuTriggerFor]="m" matTooltip="More">
          <mat-icon>more_horiz</mat-icon>
        </button>
        <mat-menu #m="matMenu">
          <button mat-menu-item (click)="preview(r)"><mat-icon>visibility</mat-icon><span>Preview</span></button>
          <button mat-menu-item (click)="download(r)"><mat-icon>download</mat-icon><span>Download</span></button>
          <button mat-menu-item (click)="openEdit(r)"><mat-icon>edit</mat-icon><span>Edit</span></button>
          <button mat-menu-item (click)="delete(r)" class="warn"><mat-icon>delete</mat-icon><span>Delete</span></button>
        </mat-menu>
      </div>
    </div>

    <div class="empty" *ngIf="!filtered().length">
      <mat-icon>inbox</mat-icon>
      <div>No records found</div>
      <button mat-stroked-button (click)="openAdd()"><mat-icon>add</mat-icon> Add your first record</button>
    </div>
  </div>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\records\records.scss =====

.rec-wrap { padding: 1rem; }

/* Header */
.toolbar {
  display: grid;
  gap: .75rem;
  margin-bottom: .75rem;

  .title {
    display: flex; align-items: center; gap: .6rem;
    h2 { margin: 0; font-weight: 800; letter-spacing: .2px; }
  }

  /* controls row */
  .controls {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center; /* center everything by default */
    gap: .6rem;

    /* BIG centered search: grows to 860px and sits centered */
    .search {
      flex: 1 1 860px;
      max-width: 860px;
      min-width: min(100%, 860px);
      margin: 0 auto;
    }

    .filters {
      border-radius: 999px;
      overflow: hidden;
      white-space: nowrap;
    }

    .add { border-radius: 12px; }
  }
}

/* Grid */
.grid {
  display: grid;
  gap: 1rem;
  grid-template-columns: repeat(3, minmax(0, 1fr));
}
@media (max-width: 1200px) { .grid { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
@media (max-width: 720px)  { .grid { grid-template-columns: 1fr; } }

.card {
  background: rgba(255,255,255,.02);
  border: 1px solid rgba(255,255,255,.06);
  border-radius: 16px;
  box-shadow: 0 10px 25px rgba(0,0,0,.25);
  padding: .85rem;
  position: relative;
  cursor: pointer;
  transition: transform .12s ease, background .12s ease, border-color .12s ease;

  &:hover { transform: translateY(-1px); background: rgba(255,255,255,.04); }

  .thumb {
    height: 160px;
    border-radius: 12px;
    border: 1px dashed rgba(255,255,255,.10);
    background: rgba(255,255,255,.03);
    display: grid; place-items: center;
    overflow: hidden; position: relative;

    &.is-img img { width: 100%; height: 100%; object-fit: cover; }
    mat-icon { font-size: 46px; width: 46px; height: 46px; opacity: .85; }

    .type {
      position: absolute; top: .5rem; left: .5rem;
      font-size: .75rem; padding: .15rem .5rem; border-radius: 999px;
      border: 1px solid rgba(255,255,255,.10); background: rgba(255,255,255,.06);
      &.report { border-color: rgba(85,145,255,.5);  background: rgba(85,145,255,.10); }
      &.prescription { border-color: rgba(0,200,155,.5); background: rgba(0,200,155,.10); }
      &.lab { border-color: rgba(255,205,60,.5); background: rgba(255,205,60,.10); }
      &.imaging { border-color: rgba(183,140,255,.5); background: rgba(183,140,255,.10); }
      &.other { border-color: rgba(255,255,255,.2); background: rgba(255,255,255,.08); }
    }
  }

  .info {
    padding-top: .6rem;
    .name { font-weight: 700; }
    .meta { opacity: .85; display: flex; gap: .4rem; align-items: center; }
    .dot { opacity: .5; }
    .notes { opacity: .85; margin-top: .25rem; }
  }

  .actions {
    position: absolute; top: .35rem; right: .25rem;
  }
}

/* Empty state */
.empty {
  grid-column: 1 / -1;
  border: 1px dashed rgba(255,255,255,.12);
  border-radius: 16px;
  padding: 2rem;
  text-align: center;
  display: grid; gap: .5rem; place-items: center;
  mat-icon { font-size: 36px; width: 36px; height: 36px; opacity: .85; }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\records\records.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Records } from './records';

describe('Records', () => {
  let component: Records;
  let fixture: ComponentFixture<Records>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Records]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Records);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\records\records.ts =====

import { Component, Inject, computed, signal, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormGroup, FormControl } from '@angular/forms';
import { RouterModule } from '@angular/router';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatMenuModule } from '@angular/material/menu';
import { MatDialog, MatDialogModule, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';

type RecordType = 'report' | 'prescription' | 'lab' | 'imaging' | 'other';

type MedRecord = {
  id: string;
  name: string;
  type: RecordType;
  createdAt: string;     // ISO string
  sizeKB: number;
  notes?: string;
  url: string;           // object URL for now
  mime: string;
  thumb?: string | null; // data URL / image URL used only for the card preview
};

const uid = () => Math.random().toString(36).slice(2, 10);
const toLocalDate = (iso: string) =>
  new Date(iso).toLocaleString(undefined, { year: 'numeric', month: 'short', day: '2-digit' });

/* ---------------- pdf.js (UMD) lazy loader ---------------- */
async function getPdfJs(): Promise<any> {
  const w = window as any;
  if (w.pdfjsLib) return w.pdfjsLib;

  await new Promise<void>((resolve, reject) => {
    const s = document.createElement('script');
    // UMD build exposes window.pdfjsLib (stable 3.x)
    s.src = 'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/build/pdf.min.js';
    s.async = true;
    s.onload = () => resolve();
    s.onerror = () => reject(new Error('Failed to load pdf.js'));
    document.head.appendChild(s);
  });

  const pdfjs = (window as any).pdfjsLib;
  // Set worker (UMD)
  pdfjs.GlobalWorkerOptions.workerSrc =
    'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/build/pdf.worker.min.js';
  return pdfjs;
}

/* ---- Render first page of a PDF file to a PNG data URL ---- */
async function pdfFirstPageToDataUrl(file: File, maxW = 640, maxH = 420): Promise<string | null> {
  try {
    const pdfjs = await getPdfJs();
    const data = await file.arrayBuffer();
    const pdf = await pdfjs.getDocument({ data }).promise;
    const page = await pdf.getPage(1);

    const viewport1 = page.getViewport({ scale: 1 });
    const scale = Math.min(maxW / viewport1.width, maxH / viewport1.height, 2);
    const viewport = page.getViewport({ scale: scale > 0 ? scale : 1 });

    const canvas = document.createElement('canvas');
    canvas.width = Math.floor(viewport.width);
    canvas.height = Math.floor(viewport.height);
    const ctx = canvas.getContext('2d')!;
    await page.render({ canvasContext: ctx, viewport }).promise;

    return canvas.toDataURL('image/png');
  } catch (e) {
    console.warn('PDF thumbnail generation failed:', e);
    return null;
  }
}

/* ---------------- Mock data ---------------- */
function mockRecords(): MedRecord[] {
  const mk = (
    name: string,
    type: RecordType,
    daysAgo = 0,
    sizeKB = 320,
    mime = 'application/pdf',
    url = '#',
    thumb: string | null = null
  ): MedRecord => {
    const d = new Date();
    d.setDate(d.getDate() - daysAgo);
    return {
      id: uid(),
      name,
      type,
      createdAt: d.toISOString(),
      sizeKB,
      notes: '',
      url,
      mime,
      thumb
    };
  };

  return [
    mk('CBC Result.pdf', 'lab', 1, 210), // pdf (no thumb yet)
    mk(
      'X-ray Chest.png',
      'imaging',
      3,
      540,
      'image/png',
      // image URL doubles as thumbnail
      'https://images.unsplash.com/photo-1526256262350-7da7584cf5eb?auto=format&fit=crop&w=1400&q=60',
      'https://images.unsplash.com/photo-1526256262350-7da7584cf5eb?auto=format&fit=crop&w=600&q=50'
    ),
    mk('Derm Rx.pdf', 'prescription', 8, 95),
    mk('Discharge Summary.pdf', 'report', 15, 780),
    mk('Allergy Note.txt', 'other', 20, 12, 'text/plain')
  ];
}

function guessTypeByMime(mime: string): RecordType {
  if (mime.startsWith('image/')) return 'imaging';
  if (mime === 'application/pdf') return 'report';
  return 'other';
}

@Component({
  standalone: true,
  selector: 'app-records',
  templateUrl: './records.html',
  styleUrls: ['./records.scss'],
  imports: [
    CommonModule, RouterModule, ReactiveFormsModule,
    MatIconModule, MatButtonModule, MatButtonToggleModule,
    MatFormFieldModule, MatInputModule, MatTooltipModule,
    MatMenuModule, MatDialogModule, MatSnackBarModule
  ]
})
export class RecordsComponent {
  private dialog = inject(MatDialog);
  private snack = inject(MatSnackBar);

  all = signal<MedRecord[]>(mockRecords());

  // seed demo imaging cover if empty (kept from your version)
  constructor() {
    const updated = this.all().map(r =>
      r.type === 'imaging' && r.mime.startsWith('image/') && r.url === '#'
        ? {
            ...r,
            url: 'https://images.unsplash.com/photo-1526256262350-7da7584cf5eb?auto=format&fit=crop&w=1400&q=60',
            thumb: 'https://images.unsplash.com/photo-1526256262350-7da7584cf5eb?auto=format&fit=crop&w=600&q=50'
          }
        : r
    );
    this.all.set(updated);
  }

  // filters
  query = signal('');
  filter = signal<RecordType | 'all'>('all');

  filtered = computed(() => {
    const q = this.query().trim().toLowerCase();
    const f = this.filter();
    return this.all()
      .filter(r => (f === 'all' ? true : r.type === f))
      .filter(r => {
        if (!q) return true;
        return (
          r.name.toLowerCase().includes(q) ||
          (r.notes ?? '').toLowerCase().includes(q) ||
          r.type.toLowerCase().includes(q)
        );
      })
      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
  });

  /* ---------------- Actions ---------------- */

  openAdd() {
    const ref = this.dialog.open(AddEditRecordDialogComponent, {
      panelClass: 'medtik-dialog',
      data: { mode: 'add' } as AddEditData,
      width: 'min(92vw, 700px)'
    });

    ref.afterClosed().subscribe(async (res?: AddEditResult) => {
      if (!res) return;
      if (!res.file) { this.snack.open('File is required.', 'OK', { duration: 1400 }); return; }

      const file = res.file as File;
      const url = URL.createObjectURL(file);
      const now = res.date ? new Date(res.date) : new Date();

      // build thumbnail
      let thumb: string | null = null;
      if (file.type.startsWith('image/')) {
        thumb = url;
      } else if (file.type === 'application/pdf') {
        thumb = await pdfFirstPageToDataUrl(file);
      }

      const rec: MedRecord = {
        id: uid(),
        name: (res.name || file.name).trim(),
        type: res.type || guessTypeByMime(file.type),
        createdAt: now.toISOString(),
        sizeKB: Math.max(1, Math.round(file.size / 1024)),
        notes: (res.notes || '').trim(),
        url,
        mime: file.type || 'application/octet-stream',
        thumb
      };
      this.all.update(list => [rec, ...list]);
      this.snack.open('Record added', 'OK', { duration: 1400 });
    });
  }

  openEdit(r: MedRecord) {
    const ref = this.dialog.open(AddEditRecordDialogComponent, {
      panelClass: 'medtik-dialog',
      data: { mode: 'edit', record: { ...r } } as AddEditData,
      width: 'min(92vw, 700px)'
    });

    ref.afterClosed().subscribe(async (res?: AddEditResult) => {
      if (!res) return;

      const list = this.all().slice();
      const idx = list.findIndex(x => x.id === r.id);
      if (idx < 0) return;

      const x = list[idx];
      let url = x.url;
      let mime = x.mime;
      let sizeKB = x.sizeKB;
      let thumb: string | null | undefined = x.thumb;

      if (res.file) {
        try { if (x.url.startsWith('blob:')) URL.revokeObjectURL(x.url); } catch {}
        url = URL.createObjectURL(res.file);
        mime = res.file.type || x.mime;
        sizeKB = Math.max(1, Math.round(res.file.size / 1024));

        if (mime.startsWith('image/')) thumb = url;
        else if (mime === 'application/pdf') thumb = await pdfFirstPageToDataUrl(res.file);
        else thumb = null;
      }

      list[idx] = {
        ...x,
        name: (res.name || x.name).trim(),
        type: res.type || x.type,
        notes: (res.notes || '').trim(),
        createdAt: res.date ? new Date(res.date).toISOString() : x.createdAt,
        url, mime, sizeKB, thumb
      };
      this.all.set(list);

      this.snack.open('Record updated', 'OK', { duration: 1200 });
    });
  }

  preview(r: MedRecord) {
    this.dialog.open(PreviewDialogComponent, {
      panelClass: 'medtik-dialog',
      data: { record: r } as PreviewData,
      width: 'min(92vw, 900px)',
      maxHeight: '90vh'
    });
  }

  download(r: MedRecord) {
    const a = document.createElement('a');
    a.href = r.url;
    a.download = r.name || 'record';
    a.click();
  }

  delete(r: MedRecord) {
    if (!confirm(`Delete "${r.name}"?`)) return;
    this.all.update(list => list.filter(x => x.id !== r.id));
    try { if (r.url.startsWith('blob:')) URL.revokeObjectURL(r.url); } catch {}
    this.snack.open('Record deleted', 'OK', { duration: 1200 });
  }

  // Helpers
  pillClass(t: RecordType) {
    return {
      report: t === 'report',
      prescription: t === 'prescription',
      lab: t === 'lab',
      imaging: t === 'imaging',
      other: t === 'other'
    };
  }
  dateLabel(iso: string) { return toLocalDate(iso); }
  isPDF(mime: string) { return mime === 'application/pdf'; }
}

/* ---------------- Add / Edit Dialog ---------------- */

type AddEditMode = 'add' | 'edit';
type AddEditData =
  | { mode: 'add' }
  | { mode: 'edit'; record: MedRecord };

type AddEditResult = {
  name: string;
  type: RecordType;
  date: string | null;
  notes?: string;
  file: File | null;   // required when mode = add
};

@Component({
  standalone: true,
  selector: 'app-add-edit-record-dialog',
  template: `
  <h2 mat-dialog-title>
    <mat-icon>{{ data.mode === 'add' ? 'upload_file' : 'edit' }}</mat-icon>
    {{ data.mode === 'add' ? 'Add record' : 'Edit record' }}
  </h2>

  <mat-dialog-content>
    <form [formGroup]="form" class="dlg-form">
      <mat-form-field appearance="outline" class="field">
        <mat-label>Title</mat-label>
        <input matInput formControlName="name" placeholder="e.g., CBC Result" />
      </mat-form-field>

      <mat-form-field appearance="outline" class="field">
        <mat-label>Type</mat-label>
        <select matNativeControl formControlName="type">
          <option value="report">Report</option>
          <option value="prescription">Prescription</option>
          <option value="lab">Lab</option>
          <option value="imaging">Imaging</option>
          <option value="other">Other</option>
        </select>
      </mat-form-field>

      <mat-form-field appearance="outline" class="field">
        <mat-label>Date</mat-label>
        <input matInput type="date" formControlName="date" />
      </mat-form-field>

      <mat-form-field appearance="outline" class="field full">
        <mat-label>Notes</mat-label>
        <textarea matInput rows="3" formControlName="notes"></textarea>
      </mat-form-field>

      <div class="uploader" [class.error]="fileRequired() && !form.controls['file'].value">
        <mat-icon>attach_file</mat-icon>
        <label>
          {{ data.mode === 'add' ? 'Choose a file' : 'Replace file (optional)' }}
          <input type="file" (change)="onFile($event)" />
        </label>
        <div class="file-name" *ngIf="fileName()">{{ fileName() }}</div>
        <div class="hint" *ngIf="fileRequired() && !form.controls['file'].value">File is required.</div>
      </div>
    </form>
  </mat-dialog-content>

  <mat-dialog-actions align="end">
    <button mat-button (click)="close()">Cancel</button>
    <button mat-flat-button color="primary" (click)="save()">Save</button>
  </mat-dialog-actions>
  `,
  styles: [`
  .dlg-form { display:grid; gap:.75rem; grid-template-columns: 1fr 1fr; }
  .field.full { grid-column: 1 / -1; }
  .uploader {
    grid-column: 1 / -1;
    display:flex; align-items:center; gap:.6rem;
    border:1px dashed rgba(255,255,255,.15); padding:.75rem; border-radius: 12px;
  }
  .uploader.error { border-color:#ff7a7a; }
  .uploader input[type=file] { display:block; margin-top:.15rem; }
  .file-name { opacity:.85; font-size:.9rem; }
  .hint { color:#ff7a7a; font-size:.85rem; }
  .mdc-text-field--outlined .mdc-text-field__input { padding-top: 12px !important; padding-bottom: 12px !important; line-height: 1 !important; }
  .mat-mdc-form-field { --mat-form-field-container-vertical-padding: 15px; }
  `],
  imports: [
    CommonModule, ReactiveFormsModule,
    MatDialogModule, MatIconModule, MatButtonModule,
    MatFormFieldModule, MatInputModule
  ]
})
export class AddEditRecordDialogComponent {
  form: FormGroup;

  constructor(
    private dialogRef: MatDialogRef<AddEditRecordDialogComponent, AddEditResult | undefined>,
    @Inject(MAT_DIALOG_DATA) public data: AddEditData
  ) {
    // initialize form first with safe defaults
    this.form = new FormGroup({
      name: new FormControl<string>('', { nonNullable: true }),
      type: new FormControl<RecordType>('report', { nonNullable: true }),
      date: new FormControl<string | null>(null),
      notes: new FormControl<string>('', { nonNullable: true }),
      file: new FormControl<File | null>(null)
    });

    // if editing, patch values from the incoming record
    const defaults = (data as any).record as MedRecord | undefined;
    if (defaults) {
      this.form.patchValue({
        name: defaults.name,
        type: defaults.type,
        date: defaults.createdAt.slice(0, 10),
        notes: defaults.notes ?? ''
      });
    }
  }

  fileRequired() { return this.data.mode === 'add'; }
  fileName() { return this.form.controls['file'].value?.name ?? ''; }

  onFile(e: Event) {
    const input = e.target as HTMLInputElement | null;
    const file = input?.files?.[0] ?? null;
    this.form.controls['file'].setValue(file);
    if (file && !this.form.controls['name'].value) {
      this.form.controls['name'].setValue(file.name.replace(/\.[^.]+$/, ''));
    }
  }

  close() { this.dialogRef.close(); }

  save() {
    if (this.fileRequired() && !this.form.controls['file'].value) return;
    const v = this.form.getRawValue();
    const result: AddEditResult = {
      name: v.name,
      type: v.type,
      date: v.date,
      notes: v.notes,
      file: v.file
    };
    this.dialogRef.close(result);
  }
}

/* ---------------- Preview Dialog ---------------- */

type PreviewData = { record: MedRecord };

@Component({
  standalone: true,
  selector: 'app-record-preview-dialog',
  template: `
  <h2 mat-dialog-title>
    <mat-icon>visibility</mat-icon>
    Preview
  </h2>

  <mat-dialog-content class="pv">
    <div class="pv-meta">
      <div class="name">{{ data.record.name }}</div>
      <div class="sub">
        <span class="pill" [ngClass]="data.record.type">{{ data.record.type }}</span>
        <span class="dot">•</span>
        <span>{{ data.record.sizeKB }} KB</span>
        <span class="dot">•</span>
        <span>{{ data.record.createdAt | date: 'mediumDate' }}</span>
      </div>
    </div>

    <div class="pv-view" *ngIf="isImage(); else notImg">
      <img [src]="data.record.url" alt="" />
    </div>

    <ng-template #notImg>
      <div class="pv-view pdf" *ngIf="isPDF(); else generic">
        <!-- Use SafeResourceUrl so PDFs actually render -->
        <iframe [src]="safeUrl" width="100%" height="100%" style="border:0;"></iframe>
      </div>
    </ng-template>

    <ng-template #generic>
      <div class="generic">
        <mat-icon>insert_drive_file</mat-icon>
        <div>No inline preview. Use download.</div>
      </div>
    </ng-template>
  </mat-dialog-content>

  <mat-dialog-actions align="end">
    <a mat-stroked-button [href]="data.record.url" [attr.download]="data.record.name">
      <mat-icon>download</mat-icon> Download
    </a>
    <button mat-button mat-dialog-close>Close</button>
  </mat-dialog-actions>
  `,
  styles: [`
  .pv { display:grid; gap:.75rem; }
  .pv-meta .name { font-weight:800; letter-spacing:.2px; }
  .pv-meta .sub { opacity:.85; display:flex; align-items:center; gap:.5rem; flex-wrap:wrap; }
  .pv-meta .dot { opacity:.5; }
  .pv-view { height: 60vh; border:1px solid rgba(255,255,255,.08); border-radius:12px; overflow:hidden; background:#0f131b; display:grid; place-items:center; }
  .pv-view img { width:100%; height:100%; object-fit:contain; }
  .pv-view.pdf { background:#0f131b; }
  .generic { display:grid; gap:.25rem; place-items:center; opacity:.85; }
  `],
  imports: [CommonModule, MatDialogModule, MatIconModule, MatButtonModule]
})
export class PreviewDialogComponent {
  safeUrl: SafeResourceUrl;

  constructor(
    @Inject(MAT_DIALOG_DATA) public data: PreviewData,
    private sanitizer: DomSanitizer
  ) {
    // Important for blob: and file: URLs
    this.safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.data.record.url);
  }

  isImage() { return this.data.record.mime.startsWith('image/'); }
  isPDF()   { return this.data.record.mime === 'application/pdf'; }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\reviews\reviews.html =====

<div class="reviews-wrap">
  <!-- Header / Search -->
  <div class="toolbar">
    <div class="title">
      <mat-icon>reviews</mat-icon>
      <h2>My Reviews</h2>
    </div>

    <mat-form-field appearance="outline" class="search">
      <mat-label>Search reviews</mat-label>
      <input
        matInput
        placeholder="Doctor name, comment…"
        [value]="query()"
        (input)="query.set($any($event.target).value)" />
    </mat-form-field>
  </div>

  <!-- Summary -->
  <section class="card summary" *ngIf="count() as c">
    <div class="left">
      <div class="avg">{{ avg() | number:'1.1-1' }}</div>
      <div class="stars">
        <mat-icon *ngFor="let s of stars" [class.active]="s <= roundedAvg()">star</mat-icon>
      </div>
      <div class="muted">{{ c }} review{{ c>1 ? 's' : '' }}</div>
    </div>

    <div class="dist">
      <div class="row" *ngFor="let s of stars.slice().reverse()">
        <span class="label">{{ s }}★</span>
        <div class="bar">
          <span [style.width.%]="distPercent(s)"></span>
        </div>
        <span class="pct">{{ distPercent(s) }}%</span>
      </div>
    </div>
  </section>

  <!-- Empty state -->
  <div class="empty" *ngIf="!filtered().length">
    <mat-icon>inbox</mat-icon>
    <div>No reviews found</div>
  </div>

  <!-- Reviews list -->
  <div class="list" *ngIf="filtered().length">
    <article class="card item" *ngFor="let r of filtered()">
      <div class="head">
        <img class="avatar" [src]="r.doctorAvatar" alt="" />
        <div class="who">
          <div class="name">{{ r.doctorName }}</div>
          <div class="meta">
            <span class="stars">
              <mat-icon *ngFor="let s of stars" [class.active]="s <= r.rating">star</mat-icon>
            </span>
            <span class="dot">•</span>
            <span class="date">{{ dateLabel(r.createdAt) }}</span>
          </div>
        </div>
      </div>

      <div class="body">
        <div class="title" *ngIf="r.title">{{ r.title }}</div>
        <p class="comment">{{ r.comment }}</p>
      </div>
    </article>
  </div>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\reviews\reviews.scss =====

.rev-wrap { padding: 1rem; }

/* Header */
.toolbar {
  display:flex; align-items:center; justify-content:space-between; gap:1rem; margin-bottom: 1rem;

  .title { display:flex; align-items:center; gap:.6rem;
    h2 { margin:0; font-weight:800; letter-spacing:.2px; }
  }

  .filters {
    display:flex; align-items:center; gap:.5rem; flex-wrap: wrap;

    .doctor, .search { min-width: 220px; }
    .rating { border-radius: 999px; overflow: hidden; }
  }
}

/* Summary card */
.summary {
  display:grid; grid-template-columns: 220px 1fr; gap: 1rem;
  background: rgba(255,255,255,.02);
  border: 1px solid rgba(255,255,255,.06);
  border-radius: 16px;
  box-shadow: 0 10px 25px rgba(0,0,0,.25);

  .left {
    display:grid; place-items:center; gap:.25rem; padding:.75rem;
    .avg { font-size: 42px; line-height: 1; font-weight: 800; letter-spacing:.2px; }
    .stars { display:flex; gap:.1rem;
      mat-icon { opacity:.35; }
      mat-icon.active { opacity:1; }
    }
  }

  .dist {
    display:grid; gap:.45rem; padding:.8rem .8rem .9rem;
    .row { display:grid; grid-template-columns: 44px 1fr 44px; align-items:center; gap:.6rem; }
    .label { opacity:.8; }
    .bar {
      height: 10px; border-radius:999px; background: rgba(255,255,255,.06); overflow:hidden;
      span { display:block; height:100%; background: linear-gradient(90deg, #2A76B7, #1DB7A0); }
    }
    .pct { text-align:right; opacity:.9; }
  }
}

/* Pending strip */
.pending {
  margin-top: 1rem;

  h3 { margin: 0 0 .6rem; }

  .strip {
    display:grid; grid-auto-flow: column; grid-auto-columns: minmax(260px, 1fr);
    gap: .75rem; overflow-x: auto; padding-bottom: .25rem;
  }

  .pcard {
    display:grid; align-content:start; gap:.75rem;
    background: rgba(255,255,255,.02); border:1px solid rgba(255,255,255,.06);
    border-radius: 16px; padding: .85rem; box-shadow: 0 10px 25px rgba(0,0,0,.25);

    .doc { display:flex; align-items:center; gap:.65rem; }
    .avatar { width:44px; height:44px; border-radius:50%; object-fit:cover; }
    .name { font-weight:700; }
    .sub { font-size:.9rem; }
    button { justify-self:flex-start; }
  }
}

/* Reviews list */
.list { display:grid; gap: .9rem; margin-top: 1rem; }
.item {
  background: rgba(255,255,255,.02); border:1px solid rgba(255,255,255,.06);
  border-radius: 16px; padding: .9rem; box-shadow: 0 10px 25px rgba(0,0,0,.25);

  .head {
    display:flex; align-items:center; justify-content:space-between; gap:.75rem;
    .doc { display:flex; align-items:center; gap:.6rem;
      .avatar { width:40px; height:40px; border-radius:50%; object-fit:cover; }
      .name { font-weight:700; }
      .sub { font-size:.9rem; }
    }
    .stars { display:flex; gap:.1rem;
      mat-icon { opacity:.35; }
      mat-icon.active { opacity:1; }
    }
  }

  .body { margin-top: .5rem;
    .title { font-weight:700; margin-bottom:.2rem; }
    .text { opacity:.95; }
  }

  .tail {
    margin-top: .6rem; display:flex; align-items:center; justify-content:space-between; gap:.75rem;
    .actions { display:flex; gap:.4rem; }
  }
}

.empty {
  display:grid; place-items:center; gap:.4rem;
  padding: 1.5rem; border: 1px dashed rgba(255,255,255,.10); border-radius: 16px; opacity:.8;
}

/* Inputs rhythm fix */
.mdc-text-field--outlined .mdc-text-field__input { padding-top: 12px !important; padding-bottom: 12px !important; line-height: 1 !important; }
.mat-mdc-form-field { --mat-form-field-container-vertical-padding: 15px; }



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\reviews\reviews.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Reviews } from './reviews';

describe('Reviews', () => {
  let component: Reviews;
  let fixture: ComponentFixture<Reviews>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Reviews]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Reviews);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\reviews\reviews.ts =====

import { Component, computed, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';

type Star = 1 | 2 | 3 | 4 | 5;

type Review = {
  id: string;
  doctorName: string;
  doctorAvatar: string;
  rating: Star;
  title?: string;
  comment: string;
  createdAt: string; // ISO
};

const uid = () => Math.random().toString(36).slice(2, 10);

// ---- mock data (replace with API later) ----
function mockReviews(): Review[] {
  const now = new Date();
  const mk = (daysAgo: number, rating: Star, name: string, comment: string): Review => {
    const d = new Date(now);
    d.setDate(d.getDate() - daysAgo);
    return {
      id: uid(),
      doctorName: name,
      doctorAvatar: `https://i.pravatar.cc/120?img=${Math.floor(Math.random() * 70) + 1}`,
      rating,
      title: undefined,
      comment,
      createdAt: d.toISOString(),
    };
  };

  return [
    mk(1, 5, 'Dr. Sarah Ali', 'Great experience. Listened carefully and gave practical advice.'),
    mk(3, 4, 'Dr. Omar Khaled', 'Helpful visit, slight delay but worth it.'),
    mk(10, 5, 'Dr. Sarah Ali', 'Very attentive and professional.'),
    mk(18, 3, 'Dr. Mai Hassan', 'Okay overall, expected a bit more follow-up.'),
    mk(25, 4, 'Dr. Omar Khaled', 'Clear explanation and good bedside manner.'),
  ];
}

@Component({
  standalone: true,
  selector: 'app-reviews',
  templateUrl: './reviews.html',
  styleUrls: ['./reviews.scss'],
  imports: [
    CommonModule, RouterModule,
    MatIconModule, MatButtonModule,
    MatFormFieldModule, MatInputModule,
  ],
})
export class ReviewsComponent {
  // Data
  all = signal<Review[]>(mockReviews());

  // UI state
  query = signal<string>('');
  stars: Star[] = [1, 2, 3, 4, 5];

  // Filters (extend later as needed)
  filtered = computed(() => {
    const q = this.query().trim().toLowerCase();
    return this.all()
      .filter((r) => {
        if (!q) return true;
        return (
          r.doctorName.toLowerCase().includes(q) ||
          (r.comment ?? '').toLowerCase().includes(q) ||
          (r.title ?? '').toLowerCase().includes(q)
        );
      })
      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
  });

  // Stats (based on *all* reviews; change to this.filtered() if you want filtered stats)
  count = computed(() => this.all().length);

  avg = computed(() => {
    const c = this.count();
    if (!c) return 0;
    const sum = this.all().reduce((acc, r) => acc + r.rating, 0);
    // one decimal average
    return Math.round((sum / c) * 10) / 10;
  });

  // ✅ helper so template doesn’t call Math.round(...)
  roundedAvg = computed(() => Math.round(this.avg()));

  dist = computed(() => {
    const d: Record<Star, number> = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };
    for (const r of this.all()) d[r.rating]++;
    return d;
  });

  // ✅ template-friendly wrapper (no "as any" in HTML)
  distPercent(n: number): number {
    const total = this.count();
    if (!total) return 0;
    const d = this.dist();
    return Math.round(((d[n as Star] || 0) / total) * 100);
  }

  // Helpers
  dateLabel(iso: string) {
    return new Date(iso).toLocaleString(undefined, {
      year: 'numeric', month: 'short', day: '2-digit',
    });
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\search\search.html =====

<form class="search-shell" [formGroup]="form" (submit)="$event.preventDefault()">
  <!-- HERO TOOLBAR -->
  <header class="toolbar hero card">
    <mat-form-field appearance="outline" class="field-glass field-hero w-100">
      <mat-label>Search doctors or departments</mat-label>
      <input matInput formControlName="q" placeholder="e.g., cardiology, Sarah Ali" />
      <button mat-icon-button matSuffix type="button" (click)="openFilters()" aria-label="Filters">
        <mat-icon>tune</mat-icon>
      </button>
    </mat-form-field>

    <div class="toolbar-right">
      <mat-form-field appearance="outline" class="field-glass field-hero">
        <mat-label>Sort by</mat-label>
        <mat-select [value]="sort()" (valueChange)="onSortChange($event)">
          <mat-option [value]="'relevance'">Relevance</mat-option>
          <mat-option [value]="'rating'">Rating</mat-option>
          <mat-option [value]="'price'">Price</mat-option>
          <mat-option [value]="'soonest'">Earliest slot</mat-option>
        </mat-select>
      </mat-form-field>

      <button mat-stroked-button color="primary" class="btn-filters" type="button" (click)="openFilters()">
        <mat-icon>tune</mat-icon>
        Filters
      </button>
    </div>
  </header>

  <!-- RESULTS GRID -->
  <section class="cards-grid">
    <!-- loading -->
    <ng-container *ngIf="loading(); else loaded">
      <div class="card skeleton" *ngFor="let x of [1,2,3,4,5,6]"></div>
    </ng-container>

    <!-- loaded -->
    <ng-template #loaded>
      <div class="empty card" *ngIf="result().length === 0">
        <mat-icon class="icon">search</mat-icon>
        <div class="title">No results</div>
        <div class="sub">Try a different keyword or adjust your filters.</div>
        <button mat-stroked-button color="primary" type="button" (click)="clearFilters()">Clear filters</button>
      </div>

      <article
        class="doc-card card"
        *ngFor="let d of result()"
        [style.--accent]="deptAccent(d.department)"
      >
        <!-- header -->
        <header class="doc-head">
          <img class="avatar-lg" [src]="d.avatar" alt="" />
          <div class="titles">
            <h3>{{ d.name }}</h3>
            <!-- specialty only (no duplicate department) -->
            <div class="subtitle">{{ d.title }}</div>
          </div>
          <span class="status" [class.online]="d.online">
            <span class="dot"></span>{{ d.online ? 'Online' : 'Offline' }}
          </span>
        </header>

        <!-- meta -->
        <div class="meta">
          <span class="rating">
            <mat-icon>star</mat-icon>{{ d.rating | number:'1.1-1' }}
            <span class="muted">({{ d.ratingCount }})</span>
          </span>

          <span class="badge badge--dept">
            <span class="dot"></span>{{ d.department }}
          </span>

          <span class="chip">{{ d.languages.join(' · ') }}</span>

          <!-- availability (single calc, then class + icon + label) -->
          <ng-container *ngIf="availabilityInfo(d.nextAvailable) as ai">
            <span class="next" [ngClass]="ai.cls">
              <ng-container [ngSwitch]="ai.cls">
                <mat-icon *ngSwitchCase="'now'">flash_on</mat-icon>
                <mat-icon *ngSwitchCase="'soon'">schedule</mat-icon>
                <mat-icon *ngSwitchCase="'today'">schedule</mat-icon>
                <mat-icon *ngSwitchCase="'later'">event</mat-icon>
                <mat-icon *ngSwitchDefault>event_busy</mat-icon>
              </ng-container>
              {{ ai.label }}
            </span>
          </ng-container>
        </div>

        <!-- prices -->
        <div class="price-tiles">
          <div class="tile">
            <mat-icon>chat</mat-icon>
            <div class="label">Chat</div>
            <div class="value">{{ d.price.chat }} {{ d.price.currency }}</div>
          </div>
          <div class="tile">
            <mat-icon>call</mat-icon>
            <div class="label">Voice</div>
            <div class="value">{{ d.price.voice }} {{ d.price.currency }}</div>
          </div>
          <div class="tile">
            <mat-icon>videocam</mat-icon>
            <div class="label">Video</div>
            <div class="value">{{ d.price.video }} {{ d.price.currency }}</div>
          </div>
        </div>

        <!-- actions -->
        <footer class="actions">
          <a mat-stroked-button color="primary" [routerLink]="['/patient/doctor', d.id]">
            <mat-icon>open_in_new</mat-icon> Profile
          </a>
          <a mat-flat-button color="primary" [routerLink]="['/patient/booking', d.id]">Book</a>
        </footer>
      </article>
    </ng-template>
  </section>

  <!-- FILTERS PANEL -->
  <div class="filters-overlay" [class.open]="filtersOpen()" (click)="closeFilters()"></div>
  <aside class="filters" [class.open]="filtersOpen()">
    <header>
      <h3>Filters</h3>
      <button mat-icon-button type="button" (click)="closeFilters()" aria-label="Close filters">
        <mat-icon>close</mat-icon>
      </button>
    </header>

    <div class="body">
      <mat-form-field appearance="outline" class="field-glass field-compact w-100">
        <mat-label>Department</mat-label>
        <mat-select formControlName="department">
          <mat-option value="">Any</mat-option>
          <mat-option value="Cardiology">Cardiology</mat-option>
          <mat-option value="Dermatology">Dermatology</mat-option>
          <mat-option value="Pediatrics">Pediatrics</mat-option>
          <mat-option value="Psychiatry">Psychiatry</mat-option>
        </mat-select>
      </mat-form-field>

      <mat-form-field appearance="outline" class="field-glass field-compact w-100">
        <mat-label>Modality</mat-label>
        <mat-select formControlName="modality">
          <mat-option value="">Any</mat-option>
          <mat-option value="chat">Chat</mat-option>
          <mat-option value="voice">Voice</mat-option>
          <mat-option value="video">Video</mat-option>
        </mat-select>
      </mat-form-field>

      <mat-form-field appearance="outline" class="field-glass field-compact w-100">
        <mat-label>Max price</mat-label>
        <input matInput type="number" formControlName="maxPrice" placeholder="0 = no limit" />
      </mat-form-field>

      <mat-form-field appearance="outline" class="field-glass field-compact w-100">
        <mat-label>Minimum rating</mat-label>
        <mat-select formControlName="minRating">
          <mat-option [value]="0">Any</mat-option>
          <mat-option [value]="4">4+</mat-option>
          <mat-option [value]="4.5">4.5+</mat-option>
        </mat-select>
      </mat-form-field>

      <mat-slide-toggle formControlName="availableToday">Available today</mat-slide-toggle>
      <mat-slide-toggle formControlName="onlineNow">Online now</mat-slide-toggle>
    </div>

    <footer>
      <button mat-stroked-button type="button" (click)="clearFilters()">Clear</button>
      <button mat-flat-button color="primary" type="button" (click)="closeFilters()">Apply</button>
    </footer>
  </aside>
</form>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\search\search.scss =====

/* ====== HERO TOOLBAR ====== */
.toolbar.hero {
  display: grid;
  grid-template-columns: 1fr auto;
  gap: 1rem;
  align-items: center;
  padding: 1rem;
}

.toolbar-right { display: inline-flex; gap: .6rem; align-items: center; }
.btn-filters mat-icon { margin-right: .35rem; }

/* Glassy fields */
:host ::ng-deep .field-glass .mdc-text-field--outlined {
  background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.03));
  border-radius: 16px;
  backdrop-filter: blur(10px) saturate(120%);
  border: 1px solid rgba(255,255,255,.10);
  box-shadow: inset 0 1px 0 rgba(255,255,255,.04);
}
:host ::ng-deep .field-hero .mdc-text-field--outlined { height: 54px; }
:host ::ng-deep .field-glass .mdc-notched-outline__leading,
:host ::ng-deep .field-glass .mdc-notched-outline__trailing,
:host ::ng-deep .field-glass .mdc-notched-outline__notch { border: 0 !important; }

/* ====== RESULTS GRID ====== */
.cards-grid {
  margin-top: .75rem;
  display: grid;
  gap: 1rem;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
}

/* Card look */
.card {
  position: relative;
  border-radius: 20px;
  background: linear-gradient(180deg, rgba(255,255,255,.05), rgba(255,255,255,.025));
  border: 1px solid rgba(255,255,255,.08);
  backdrop-filter: blur(8px);
  box-shadow: 0 10px 40px rgba(0,0,0,.35), inset 0 1px 0 rgba(255,255,255,.04);
  transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease;
}
.card:hover {
  transform: translateY(-2px);
  border-color: rgba(142,196,255,.35);
  box-shadow: 0 16px 50px rgba(26,86,160,.25), inset 0 1px 0 rgba(255,255,255,.06);
}

/* Accent strip from department color */
.doc-card { padding: 1rem; display: grid; gap: .9rem; }
.doc-card::before {
  content: "";
  position: absolute; top: 0; left: 0; right: 0; height: 4px;
  border-top-left-radius: 20px; border-top-right-radius: 20px;
  background: linear-gradient(90deg, transparent, var(--accent, #2a76b7), transparent);
  opacity: .85;
}

/* Skeleton placeholder */
.skeleton { height: 280px; opacity: .65; }

/* Header */
.doc-head {
  display: grid; grid-template-columns: 72px 1fr auto;
  gap: .9rem; align-items: center;
}
.avatar-lg {
  width: 72px; height: 72px; border-radius: 16px; object-fit: cover;
  box-shadow: var(--shadow-sm);
}
.titles h3 { margin: 0; font-size: 1.05rem; letter-spacing: .2px; }
.titles .subtitle { color: var(--muted); font-weight: 600; margin-top: .1rem; }

.status {
  border-radius: 999px; padding: .25rem .6rem; font-size: .82rem;
  background: rgba(255,255,255,.05); border: 1px solid rgba(255,255,255,.08);
  display: inline-flex; align-items: center; gap: .45rem;
}
.status .dot { width: 8px; height: 8px; border-radius: 999px; background: #aaa; display: inline-block; }
.status.online .dot { background: #16a34a; }

/* Meta row */
.meta { display: flex; flex-wrap: wrap; gap: .5rem .6rem; align-items: center; }
.meta .rating { display: inline-flex; align-items: center; gap: .25rem; }
.meta .rating mat-icon { width: 18px; height: 18px; font-size: 18px; color: #fbbf24; }
.meta .muted { color: var(--muted); }

/* Department badge uses accent */
.badge {
  display: inline-flex; align-items: center; gap: .35rem;
  border-radius: 999px; padding: .2rem .55rem; font-weight: 600; font-size: .82rem;
}
.badge--dept {
  background: color-mix(in oklab, var(--accent, #2a76b7) 18%, transparent);
  border: 1px solid color-mix(in oklab, var(--accent, #2a76b7) 38%, transparent);
}
.badge .dot { width: 6px; height: 6px; border-radius: 999px; background: var(--accent, #2a76b7); display: inline-block; }

/* Availability badge */
.next {
  color: var(--muted);
  display: inline-flex; align-items: center; gap: .25rem;
  border-radius: 999px; padding: .15rem .5rem;
  background: rgba(255,255,255,.04); border: 1px solid rgba(255,255,255,.08);
}
.next mat-icon { width: 18px; height: 18px; font-size: 18px; }
.next.now   { color: #a7f3d0; border-color: rgba(167,243,208,.35); text-shadow: 0 0 10px rgba(167,243,208,.35); }
.next.soon  { color: #fde68a; border-color: rgba(253,230,138,.35); text-shadow: 0 0 12px rgba(253,230,138,.35);
  background: linear-gradient(180deg, rgba(253,230,138,.15), rgba(253,230,138,.05)); }
.next.today { color: #c7d2fe; border-color: rgba(199,210,254,.35); }
.next.later { opacity: .85; }
.next.none  { opacity: .6; }

/* Prices as tiles */
.price-tiles { display: grid; grid-template-columns: repeat(3, 1fr); gap: .6rem; }
.tile {
  border-radius: 14px;
  background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.03));
  border: 1px solid rgba(255,255,255,.08);
  padding: .6rem .7rem; display: grid; justify-items: start; gap: .1rem;
}
.tile mat-icon { font-size: 18px; width: 18px; height: 18px; opacity: .9; }
.tile .label { font-size: .82rem; color: var(--muted); }
.tile .value { font-weight: 700; }

/* Actions */
.actions { display: grid; grid-template-columns: 1fr 1fr; gap: .6rem; margin-top: .2rem; }

/* Empty state */
.empty { text-align: center; padding: 2rem 1rem; display: grid; gap: .5rem; justify-items: center; }
.empty .icon { font-size: 36px; width: 36px; height: 36px; opacity: .7; }

/* Filters overlay/panel */
.filters-overlay { position: fixed; inset: 0; background: rgba(0,0,0,.3); opacity: 0; pointer-events: none; transition: opacity var(--dur-3) var(--ease); z-index: var(--z-drawer); }
.filters-overlay.open { opacity: 1; pointer-events: auto; }
.filters {
  position: fixed; top: 0; right: 0; height: 100vh; width: min(360px, 92vw);
  background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.03));
  border-left: 1px solid var(--border); backdrop-filter: blur(10px);
  transform: translateX(100%); transition: transform var(--dur-3) var(--ease);
  z-index: calc(var(--z-drawer) + 1); display: grid; grid-template-rows: auto 1fr auto;
}
.filters.open { transform: translateX(0); }
.filters header, .filters footer { padding: 1rem; border-bottom: 1px solid var(--border); }
.filters footer { border-top: 1px solid var(--border); border-bottom: 0; display: flex; gap: .5rem; justify-content: flex-end; }
.filters .body { padding: 1rem; display: grid; gap: .75rem; }

/* Responsive */
@media (max-width: 980px) { .toolbar.hero { grid-template-columns: 1fr; } .toolbar-right { justify-content: flex-start; } }
@media (max-width: 640px) { .price-tiles { grid-template-columns: 1fr; } .actions { grid-template-columns: 1fr; } }



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\search\search.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Search } from './search';

describe('Search', () => {
  let component: Search;
  let fixture: ComponentFixture<Search>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Search]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Search);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\search\search.ts =====

import { Component, signal, computed, Signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup } from '@angular/forms';
import { RouterModule } from '@angular/router';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatChipsModule } from '@angular/material/chips';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatTooltipModule } from '@angular/material/tooltip';

type Modality = 'chat' | 'voice' | 'video';

interface Doctor {
  id: string;
  name: string;
  title: string;        // specialty (shown under name)
  department: string;   // for accent color + badge
  rating: number;
  ratingCount: number;
  country: string;
  price: { chat: number; voice: number; video: number; currency: string };
  languages: string[];
  nextAvailable?: string; // e.g. "Today 13:00", "Tomorrow 10:00" or ISO later
  avatar?: string;
  verified?: boolean;
  online?: boolean;
}

@Component({
  standalone: true,
  selector: 'med-search',
  imports: [
    CommonModule, ReactiveFormsModule, RouterModule,
    MatIconModule, MatButtonModule, MatFormFieldModule, MatInputModule,
    MatSelectModule, MatChipsModule, MatSlideToggleModule, MatTooltipModule
  ],
  templateUrl: './search.html',
  styleUrls: ['./search.scss']
})
export class SearchComponent {
  loading = signal(true);
  filtersOpen = signal(false);
  sort = signal<'relevance' | 'rating' | 'price' | 'soonest'>('relevance');

  form!: FormGroup;
  result!: Signal<Doctor[]>;

  // department -> accent color
  private deptColors: Record<string, string> = {
    cardiology:  '#ef4444',
    dermatology: '#f472b6',
    pediatrics:  '#22c55e',
    psychiatry:  '#8b5cf6',
    neurology:   '#06b6d4',
    orthopedics: '#f59e0b',
    oncology:    '#fb7185',
    ent:         '#10b981',
    general:     '#60a5fa'
  };

  doctors = signal<Doctor[]>([
    {
      id: '1', name: 'Dr. Sarah Ali', title: 'Pediatrician', department: 'Pediatrics',
      rating: 4.8, ratingCount: 231, country: 'EG',
      price: { chat: 80, voice: 120, video: 180, currency: 'EGP' },
      languages: ['AR','EN'], nextAvailable: 'Today 13:00',
      avatar: 'https://i.pravatar.cc/96?img=12', verified: true, online: true
    },
    {
      id: '2', name: 'Dr. Ahmed Saad', title: 'Cardiologist', department: 'Cardiology',
      rating: 4.6, ratingCount: 112, country: 'EG',
      price: { chat: 90, voice: 140, video: 200, currency: 'EGP' },
      languages: ['AR'], nextAvailable: 'Today 16:00',
      avatar: 'https://i.pravatar.cc/96?img=15', verified: true, online: false
    },
    {
      id: '3', name: 'Dr. Dina Kamal', title: 'Dermatologist', department: 'Dermatology',
      rating: 4.4, ratingCount: 89, country: 'EG',
      price: { chat: 70, voice: 110, video: 160, currency: 'EGP' },
      languages: ['AR','EN'], nextAvailable: 'Tomorrow 10:00',
      avatar: 'https://i.pravatar.cc/96?img=31', verified: false, online: true
    },
    {
      id: '4', name: 'Dr. Omar N.', title: 'Psychiatrist', department: 'Psychiatry',
      rating: 4.9, ratingCount: 312, country: 'EG',
      price: { chat: 120, voice: 170, video: 240, currency: 'EGP' },
      languages: ['AR','EN'], nextAvailable: 'Today 18:30',
      avatar: 'https://i.pravatar.cc/96?img=7', verified: true, online: true
    }
  ]);

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      q: [''],
      department: [''],
      modality: ['' as '' | Modality],
      maxPrice: [0],
      minRating: [0],
      availableToday: [false],
      onlineNow: [false],
      country: ['EG']
    });

    this.result = computed(() => {
      const v = this.form.value;
      const q = (v.q ?? '').toLowerCase().trim();
      const dept = (v.department ?? '').toLowerCase();
      const modality = v.modality || '';
      const maxPrice = Number(v.maxPrice || 0);
      const minRating = Number(v.minRating || 0);
      const availableToday = !!v.availableToday;
      const onlineNow = !!v.onlineNow;
      const country = (v.country ?? 'EG').toUpperCase();

      let list = this.doctors().filter(d => d.country === country);

      if (q) {
        list = list.filter(d =>
          d.name.toLowerCase().includes(q) ||
          d.title.toLowerCase().includes(q) ||
          d.department.toLowerCase().includes(q)
        );
      }
      if (dept) list = list.filter(d => d.department.toLowerCase() === dept);
      if (minRating) list = list.filter(d => d.rating >= minRating);
      if (onlineNow) list = list.filter(d => d.online);
      if (availableToday) list = list.filter(d => (d.nextAvailable || '').toLowerCase().includes('today'));

      if (modality && maxPrice) {
        list = list.filter(d => (d.price as any)[modality] <= maxPrice);
      } else if (maxPrice) {
        list = list.filter(d =>
          d.price.chat <= maxPrice || d.price.voice <= maxPrice || d.price.video <= maxPrice
        );
      }

      switch (this.sort()) {
        case 'rating': list = [...list].sort((a,b) => b.rating - a.rating); break;
        case 'price':
          list = [...list].sort((a,b) =>
            Math.min(a.price.chat, a.price.voice, a.price.video) -
            Math.min(b.price.chat, b.price.voice, b.price.video)
          );
          break;
        case 'soonest':
          list = [...list].sort((a,b) =>
            (this.nextDate(a.nextAvailable)?.getTime() ?? Infinity) -
            (this.nextDate(b.nextAvailable)?.getTime() ?? Infinity)
          );
          break;
        default: break;
      }
      return list;
    });

    setTimeout(() => this.loading.set(false), 600);
  }

  openFilters()  { this.filtersOpen.set(true); }
  closeFilters() { this.filtersOpen.set(false); }
  clearFilters() { this.form.reset({ q: this.form.value.q ?? '', country: 'EG' }); }
  onSortChange(v: 'relevance'|'rating'|'price'|'soonest') { this.sort.set(v); }

  // ——— Accent helpers ———
  deptSlug(dept?: string) { return (dept || 'general').toLowerCase().replace(/\s+/g, ''); }
  deptAccent(dept?: string) { return this.deptColors[this.deptSlug(dept)] ?? '#2a76b7'; }

  // ——— Availability helpers ———
  nextDate(next?: string): Date | null {
    if (!next) return null;
    const now = new Date();
    const m = next.match(/^(Today|Tomorrow)\s+(\d{1,2}):(\d{2})$/i);
    if (m) {
      const [, when, hh, mm] = m;
      const d = new Date(now);
      if (/tomorrow/i.test(when)) d.setDate(d.getDate() + 1);
      d.setHours(parseInt(hh,10), parseInt(mm,10), 0, 0);
      return d;
    }
    const t = Date.parse(next);
    return Number.isNaN(t) ? null : new Date(t);
  }

  isSoon(d: Doctor): boolean {
    const dt = this.nextDate(d.nextAvailable);
    if (!dt) return false;
    const diffMin = Math.round((dt.getTime() - Date.now()) / 60000);
    return diffMin >= 0 && diffMin <= 60;
  }

  etaLabel(d: Doctor): string {
    const dt = this.nextDate(d.nextAvailable);
    if (!dt) return 'No upcoming slots';
    const ms = dt.getTime() - Date.now();
    const mins = Math.round(ms / 60000);
    if (mins <= 0) return 'Now';
    if (mins < 60) return `In ${mins}m`;
    const h = Math.floor(mins / 60), m = mins % 60;
    if (dt.toDateString() === new Date().toDateString()) {
      return m ? `In ${h}h ${m}m` : `In ${h}h`;
    }
    const hh = String(dt.getHours()).padStart(2,'0');
    const mm = String(dt.getMinutes()).padStart(2,'0');
    const isTomorrow = new Date().getDate() + 1 === dt.getDate();
    return `${isTomorrow ? 'Tomorrow' : dt.toLocaleDateString()} ${hh}:${mm}`;
  }

  // Single helper used by the template (returns class + label)
  availabilityInfo(next?: string): { cls: 'now'|'soon'|'today'|'later'|'none'; label: string } {
    const dt = this.nextDate(next);
    if (!dt) return { cls: 'none', label: 'No upcoming slots' };

    const now = new Date();
    const mins = Math.round((dt.getTime() - now.getTime()) / 60000);

    let label: string;
    if (mins <= 0) label = 'Now';
    else if (mins < 60) label = `In ${mins}m`;
    else if (dt.toDateString() === now.toDateString()) {
      const h = Math.floor(mins / 60), m = mins % 60;
      label = m ? `In ${h}h ${m}m` : `In ${h}h`;
    } else {
      const hh = String(dt.getHours()).padStart(2, '0');
      const mm = String(dt.getMinutes()).padStart(2, '0');
      const isTomorrow =
        new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1).toDateString() === dt.toDateString();
      label = `${isTomorrow ? 'Tomorrow' : dt.toLocaleDateString()} ${hh}:${mm}`;
    }

    let cls: 'now'|'soon'|'today'|'later' = 'later';
    if (mins <= 0) cls = 'now';
    else if (mins <= 60) cls = 'soon';
    else if (dt.toDateString() === now.toDateString()) cls = 'today';

    return { cls, label };
  }
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\settings\settings.html =====

<div class="settings-wrap">
  <!-- Header -->
  <div class="toolbar">
    <div class="title">
      <span class="glowdot"></span>
      <h2>Settings</h2>
    </div>
  </div>

  <div class="grid">
    <!-- Profile -->
    <section class="card neo">
      <header class="section-head">
        <mat-icon>account_circle</mat-icon>
        <h3>Profile</h3>
      </header>

      <div class="profile">
        <div class="avatar">
          <img [src]="avatarUrl()" alt="">
          <label class="change" matTooltip="Change photo">
            <input type="file" accept="image/*" (change)="onPickAvatar($event)" />
            <mat-icon>camera_alt</mat-icon>
          </label>
        </div>

        <form [formGroup]="profileForm" class="form">
          <mat-form-field appearance="outline" class="field full">
            <mat-label>Full name</mat-label>
            <input matInput formControlName="fullName">
            <mat-error *ngIf="profileForm.controls['fullName'].invalid && profileForm.controls['fullName'].touched">
              Name is required (min 3 chars).
            </mat-error>
          </mat-form-field>

          <mat-form-field appearance="outline" class="field">
            <mat-label>Date of birth</mat-label>
            <input matInput type="date" formControlName="dob">
          </mat-form-field>

          <mat-form-field appearance="outline" class="field">
            <mat-label>Phone</mat-label>
            <input matInput formControlName="phone">
          </mat-form-field>

          <mat-form-field appearance="outline" class="field">
            <mat-label>Country</mat-label>
            <mat-select formControlName="country">
              <mat-option *ngFor="let c of countries" [value]="c.code">{{ c.name }}</mat-option>
            </mat-select>
          </mat-form-field>

          <mat-form-field appearance="outline" class="field">
            <mat-label>Language</mat-label>
            <mat-select formControlName="language">
              <mat-option *ngFor="let l of languages" [value]="l.code">{{ l.name }}</mat-option>
            </mat-select>
          </mat-form-field>

          <mat-form-field appearance="outline" class="field full">
            <mat-label>Time zone</mat-label>
            <mat-select formControlName="timezone">
              <mat-option *ngFor="let tz of timezones" [value]="tz">{{ tz }}</mat-option>
            </mat-select>
          </mat-form-field>

          <div class="actions">
            <button mat-flat-button color="primary" class="neon" (click)="saveProfile()">
              <mat-icon>save</mat-icon> Save profile
            </button>
          </div>
        </form>
      </div>
    </section>

    <!-- Change Password -->
    <section class="card neo">
      <header class="section-head">
        <mat-icon>lock_reset</mat-icon>
        <h3>Change password</h3>
      </header>

      <form [formGroup]="passwordForm" class="pwd">
        <mat-form-field appearance="outline" class="field full">
          <mat-label>Current password</mat-label>
          <input matInput [type]="'password'" formControlName="oldPassword" autocomplete="current-password">
          <mat-error *ngIf="passwordForm.controls['oldPassword'].invalid && passwordForm.controls['oldPassword'].touched">
            Required.
          </mat-error>
        </mat-form-field>

        <mat-form-field appearance="outline" class="field">
          <mat-label>New password</mat-label>
          <input matInput [type]="'password'" formControlName="newPassword" autocomplete="new-password">
          <mat-error *ngIf="passwordForm.controls['newPassword'].hasError('required') && passwordForm.controls['newPassword'].touched">
            Required.
          </mat-error>
          <mat-error *ngIf="passwordForm.controls['newPassword'].hasError('minlength') && passwordForm.controls['newPassword'].touched">
            Min 8 characters.
          </mat-error>
          <mat-error *ngIf="passwordForm.controls['newPassword'].hasError('pattern') && passwordForm.controls['newPassword'].touched">
            Use letters and numbers.
          </mat-error>
        </mat-form-field>

        <mat-form-field appearance="outline" class="field">
          <mat-label>Confirm new password</mat-label>
          <input matInput [type]="'password'" formControlName="confirm" autocomplete="new-password">
          <mat-error *ngIf="passwordForm.hasError('passwordMismatch') && passwordForm.controls['confirm'].touched">
            Passwords don’t match.
          </mat-error>
        </mat-form-field>

        <div class="actions">
          <button mat-stroked-button class="neon" (click)="changePassword()">
            <mat-icon>key</mat-icon> Update password
          </button>
        </div>
      </form>
    </section>

    <!-- Notifications (simplified) -->
    <section class="card neo">
      <header class="section-head">
        <mat-icon>notifications_active</mat-icon>
        <h3>Notifications</h3>
      </header>

      <form [formGroup]="notiForm" class="notis">
        <div class="row">
          <div class="group">
            <div class="label">Channels</div>
            <mat-slide-toggle formControlName="push">In-app push</mat-slide-toggle>
            <mat-slide-toggle formControlName="email">Email</mat-slide-toggle>
          </div>

          <div class="group">
            <div class="label">Topics</div>
            <mat-slide-toggle formControlName="appt">Appointment reminders</mat-slide-toggle>
            <mat-slide-toggle formControlName="chat">Chat & replies</mat-slide-toggle>
            <mat-slide-toggle formControlName="marketing">Tips & promotions</mat-slide-toggle>
          </div>
        </div>

        <div class="actions">
          <button mat-stroked-button class="neon" (click)="saveNotifications()">
            <mat-icon>save</mat-icon> Save preferences
          </button>
        </div>
      </form>
    </section>
  </div>
</div>



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\settings\settings.scss =====

.settings-wrap { padding: 1rem; }

/* Header */
.toolbar {
  display: flex; align-items: center; justify-content: space-between; gap: 1rem; margin-bottom: 1rem;
  .title { display: flex; align-items: center; gap: .6rem;
    h2 { margin: 0; font-weight: 900; letter-spacing: .3px; }
    .glowdot {
      width: 10px; height: 10px; border-radius: 50%;
      background: radial-gradient(circle at 30% 30%, #71c2ff, #3b8bd3 40%, transparent 65%);
      box-shadow: 0 0 24px rgba(59,139,211,.8);
    }
  }
}

/* Grid */
.grid { display: grid; gap: 1rem; grid-template-columns: repeat(2, minmax(0, 1fr)); }
@media (max-width: 1080px) { .grid { grid-template-columns: 1fr; } }

/* Futuristic card (neon/glass) */
.card.neo {
  position: relative;
  background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
  border: 1px solid rgba(255,255,255,.08);
  border-radius: 16px;
  box-shadow: 0 20px 60px rgba(0,0,0,.45);
  padding: .9rem;
  overflow: hidden;

  /* animated border halo */
  &::before {
    content: '';
    position: absolute; inset: -2px;
    background:
      conic-gradient(from 0deg,
        rgba(113,194,255,.75),
        rgba(183,140,255,.75),
        rgba(29,183,160,.75),
        rgba(113,194,255,.75));
    filter: blur(18px); opacity: .18;
    transition: opacity .25s var(--ease);
    z-index: 0;
  }
  &:hover::before { opacity: .28; }
}

/* section header */
.section-head {
  position: relative; z-index: 1;
  display: flex; align-items: center; gap: .6rem; margin-bottom: .55rem;
  h3 { margin: 0; font-weight: 800; letter-spacing: .2px; }
  mat-icon {
    border: 1px solid rgba(255,255,255,.10);
    background: rgba(255,255,255,.06);
    border-radius: 12px; padding: .35rem;
  }
}

/* profile layout */
.profile { position: relative; z-index: 1; display: grid; grid-template-columns: auto 1fr; gap: 1rem; align-items: start; }
.avatar {
  position: relative; width: 92px; height: 92px; border-radius: 50%;
  overflow: hidden; border: 1px solid rgba(255,255,255,.10); box-shadow: 0 10px 25px rgba(0,0,0,.35);
  img { width: 100%; height: 100%; object-fit: cover; display: block; }
  .change {
    position: absolute; right: -8px; bottom: -8px;
    width: 38px; height: 38px; border-radius: 50%;
    display: grid; place-items: center; background: rgba(255,255,255,.12);
    border: 1px solid rgba(255,255,255,.18); cursor: pointer;
    input { display: none; }
    mat-icon { font-size: 20px; width: 20px; height: 20px; }
  }
}
.form { display: grid; gap: .75rem; grid-template-columns: 1fr 1fr; }
.field.full { grid-column: 1 / -1; }
.actions { display: flex; justify-content: flex-end; gap: .5rem; margin-top: .5rem; }

/* password */
.pwd { display: grid; gap: .75rem; grid-template-columns: 1fr 1fr; }
.pwd .field.full { grid-column: 1 / -1; }

/* notifications */
.notis .row { display: grid; gap: 1rem; grid-template-columns: 1fr 1fr; }
@media (max-width: 900px) { .notis .row { grid-template-columns: 1fr; } }
.notis .group { display: grid; gap: .35rem; }
.notis .label { font-weight: 700; letter-spacing: .2px; opacity: .95; }

/* neon buttons */
.neon {
  position: relative;
  border-radius: 12px;
  box-shadow: 0 8px 30px rgba(59,139,211,.25);
}
.neon:hover { box-shadow: 0 12px 38px rgba(59,139,211,.35); }

/* Fix cropped labels for your theme */
.mdc-text-field--outlined .mdc-text-field__input { padding-top: 12px !important; padding-bottom: 12px !important; line-height: 1 !important; }
.mat-mdc-form-field { --mat-form-field-container-vertical-padding: 15px; }



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\settings\settings.spec.ts =====

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Settings } from './settings';

describe('Settings', () => {
  let component: Settings;
  let fixture: ComponentFixture<Settings>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Settings]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Settings);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\pages\settings\settings.ts =====

import { Component, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  ReactiveFormsModule, FormGroup, FormControl, Validators, AbstractControl, ValidationErrors
} from '@angular/forms';

import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';

@Component({
  standalone: true,
  selector: 'app-settings',
  templateUrl: './settings.html',
  styleUrls: ['./settings.scss'],
  imports: [
    CommonModule, ReactiveFormsModule,
    // Material
    MatIconModule, MatButtonModule, MatTooltipModule,
    MatFormFieldModule, MatInputModule, MatSelectModule,
    MatSlideToggleModule, MatSnackBarModule
  ]
})
export class SettingsComponent {
  private snack = inject(MatSnackBar);

  // ---------- Profile ----------
  avatarUrl = signal<string>('https://i.pravatar.cc/120?img=13');

  countries = [
    { code: 'EG', name: 'Egypt' },
    { code: 'SA', name: 'Saudi Arabia' },
    { code: 'AE', name: 'United Arab Emirates' },
    { code: 'US', name: 'United States' },
    { code: 'GB', name: 'United Kingdom' }
  ];
  languages = [
    { code: 'en', name: 'English' },
    { code: 'ar', name: 'العربية' },
  ];
  timezones = [
    'Africa/Cairo','Asia/Riyadh','Asia/Dubai','Europe/London','America/New_York'
  ];

  profileForm = new FormGroup({
    fullName: new FormControl<string>('Sarah Ahmed', { nonNullable: true, validators: [Validators.required, Validators.minLength(3)] }),
    dob:      new FormControl<string>('1992-07-12'),
    phone:    new FormControl<string>('+20 10 1234 5678'),
    country:  new FormControl<string>('EG', { nonNullable: true }),
    language: new FormControl<string>('en', { nonNullable: true }),
    timezone: new FormControl<string>('Africa/Cairo', { nonNullable: true })
  });

  onPickAvatar(ev: Event) {
    const input = ev.target as HTMLInputElement | null;
    const file = input?.files?.[0];
    if (!file) return;
    try { URL.revokeObjectURL(this.avatarUrl()); } catch {}
    this.avatarUrl.set(URL.createObjectURL(file));
    this.snack.open('Photo updated (local preview)', 'OK', { duration: 1500 });
  }

  saveProfile() {
    if (this.profileForm.invalid) { this.profileForm.markAllAsTouched(); return; }
    // TODO: backend call
    this.snack.open('Profile saved', 'OK', { duration: 1200 });
  }

  // ---------- Change Password ----------
  passwordForm = new FormGroup(
    {
      oldPassword: new FormControl<string>('', { nonNullable: true, validators: [Validators.required] }),
      newPassword: new FormControl<string>('', {
        nonNullable: true,
        validators: [
          Validators.required,
          Validators.minLength(8),
          // at least one letter & one number (light rule for demo)
          Validators.pattern(/^(?=.*[A-Za-z])(?=.*\d).{8,}$/)
        ]
      }),
      confirm: new FormControl<string>('', { nonNullable: true, validators: [Validators.required] })
    },
    { validators: [matchPasswordValidator] } // group-level validator
  );

  changePassword() {
    if (this.passwordForm.invalid) { this.passwordForm.markAllAsTouched(); return; }

    const v = this.passwordForm.getRawValue();
    // TODO: call API with { oldPassword: v.oldPassword, newPassword: v.newPassword }
    // Here we just simulate success:
    this.passwordForm.reset({ oldPassword: '', newPassword: '', confirm: '' });
    this.snack.open('Password changed', 'OK', { duration: 1400 });
  }

  // ---------- Notifications (simplified) ----------
  notiForm = new FormGroup({
    push:      new FormControl<boolean>(true, { nonNullable: true }),
    email:     new FormControl<boolean>(true, { nonNullable: true }),
    appt:      new FormControl<boolean>(true, { nonNullable: true }),   // appointment reminders
    chat:      new FormControl<boolean>(true, { nonNullable: true }),   // chat replies
    marketing: new FormControl<boolean>(false, { nonNullable: true })   // promotions / tips
  });

  saveNotifications() {
    // TODO: backend call
    this.snack.open('Notification preferences saved', 'OK', { duration: 1200 });
  }
}

/** Cross-field validator: newPassword === confirm */
function matchPasswordValidator(group: AbstractControl): ValidationErrors | null {
  const newPass = group.get('newPassword')?.value;
  const conf    = group.get('confirm')?.value;
  if (!newPass || !conf) return null;
  return newPass === conf ? null : { passwordMismatch: true };
}



===== FILE: C:\Users\ROCKET\medtik\src\app\features\patient\patient.routes.ts =====

import { Routes } from '@angular/router';

// helper to safely pick the component regardless of export name
const pick = (m: any, ...names: string[]) =>
  names.reduce((acc, n) => acc ?? m[n], undefined) ?? (m as any).default;

export const PATIENT_ROUTES: Routes = [
  {
    path: '',
    loadComponent: () =>
      import('./layout/patient-layout/patient-layout').then(m =>
        pick(m, 'PatientLayoutComponent', 'PatientLayout')
      ),
    children: [
      { path: '', redirectTo: 'dashboard', pathMatch: 'full' },

      {
        path: 'dashboard',
        loadComponent: () =>
          import('./pages/dashboard/dashboard').then(m =>
            pick(m, 'DashboardComponent', 'Dashboard')
          ),
        title: 'Patient Dashboard'
      },
      {
        path: 'search',
        loadComponent: () =>
          import('./pages/search/search').then(m =>
            pick(m, 'SearchComponent', 'Search')
          ),
        title: 'Find Doctors'
      },
      {
        path: 'doctor/:id',
        loadComponent: () =>
          import('./pages/doctor-profile/doctor-profile').then(m =>
            pick(m, 'DoctorProfileComponent', 'DoctorProfile')
          ),
        title: 'Doctor Profile'
      },
      {
        path: 'booking/:id',
        loadComponent: () =>
          import('./pages/booking/booking').then(m =>
            pick(m, 'BookingComponent', 'Booking')
          ),
        title: 'Booking'
      },
      {
        path: 'chat/:threadId',
        loadComponent: () =>
          import('./pages/chat/chat').then(m =>
            pick(m, 'ChatComponent', 'Chat')
          ),
        title: 'Chat'
      },
       {
          path: 'appointments/:id',
          loadComponent: () =>
            import('./pages/appointments/appointments').then(m =>
              (m as any).AppointmentComponent ?? (m as any).default
            ),
          title: 'Appointment'
      },
      {
        path: 'appointments',
        loadComponent: () =>
          import('./pages/appointments/appointments').then(m =>
            pick(m, 'AppointmentsComponent', 'Appointments')
          ),
        title: 'Appointments'
      },
      {
        path: 'payments',
        loadComponent: () =>
          import('./pages/payments/payments').then(m =>
            pick(m, 'PaymentsComponent', 'Payments')
          ),
        title: 'Payments & Invoices'
      },
      {
        path: 'records',
        loadComponent: () =>
          import('./pages/records/records').then(m =>
            pick(m, 'RecordsComponent', 'Records')
          ),
        title: 'Medical Records'
      },
      {
        path: 'reviews',
        loadComponent: () =>
          import('./pages/reviews/reviews').then(m =>
            pick(m, 'ReviewsComponent', 'Reviews')
          ),
        title: 'My Reviews'
      },
      {
        path: 'settings',
        loadComponent: () =>
          import('./pages/settings/settings').then(m =>
            pick(m, 'SettingsComponent', 'Settings')
          ),
        title: 'Settings'
      },
      {
        path: 'notifications',
        loadComponent: () =>
          import('./pages/notifications/notifications').then(m =>
            pick(m, 'NotificationsComponent', 'Notifications')
          ),
        title: 'Notifications'
      },
      {
        path: 'help',
        loadComponent: () =>
          import('./pages/help/help').then(m =>
            pick(m, 'HelpComponent', 'Help')
          ),
        title: 'Help & Support'
      },
      {
        path: 'booking/:doctorId',
        loadComponent: () =>
        import('./pages/booking/booking').then(m => m.BookingComponent),
        title: 'Book appointment'
     },
    ]
  }
];



===== FILE: C:\Users\ROCKET\medtik\src\index.html =====

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Medtik</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="https://ik.imagekit.io/a2wpi1kd9/imgToUrl/image-to-url_HEow9eLbR" href="favicon.ico">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
  <app-root></app-root>
</body>
</html>



===== FILE: C:\Users\ROCKET\medtik\src\main.server.ts =====

import { bootstrapApplication } from '@angular/platform-browser';
import { App } from './app/app';
import { config } from './app/app.config.server';

const bootstrap = () => bootstrapApplication(App, config);

export default bootstrap;



===== FILE: C:\Users\ROCKET\medtik\src\main.ts =====

import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { App } from './app/app';

bootstrapApplication(App, appConfig)
  .catch((err) => console.error(err));



===== FILE: C:\Users\ROCKET\medtik\src\server.ts =====

import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { join } from 'node:path';

const browserDistFolder = join(import.meta.dirname, '../browser');

const app = express();
const angularApp = new AngularNodeAppEngine();

/**
 * Example Express Rest API endpoints can be defined here.
 * Uncomment and define endpoints as necessary.
 *
 * Example:
 * ```ts
 * app.get('/api/{*splat}', (req, res) => {
 *   // Handle API request
 * });
 * ```
 */

/**
 * Serve static files from /browser
 */
app.use(
  express.static(browserDistFolder, {
    maxAge: '1y',
    index: false,
    redirect: false,
  }),
);

/**
 * Handle all other requests by rendering the Angular application.
 */
app.use((req, res, next) => {
  angularApp
    .handle(req)
    .then((response) =>
      response ? writeResponseToNodeResponse(response, res) : next(),
    )
    .catch(next);
});

/**
 * Start the server if this module is the main entry point.
 * The server listens on the port defined by the `PORT` environment variable, or defaults to 4000.
 */
if (isMainModule(import.meta.url)) {
  const port = process.env['PORT'] || 4000;
  app.listen(port, (error) => {
    if (error) {
      throw error;
    }

    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

/**
 * Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.
 */
export const reqHandler = createNodeRequestHandler(app);



===== FILE: C:\Users\ROCKET\medtik\src\styles.scss =====

/* ----------------------------------------------------
   MEDTIK — Global Design System (Dark default)
   Tokens, base, utilities. 100% compatible with your
   current pages (uses --surface, --text, --muted, etc.)
----------------------------------------------------- */

/* Material theme (colors/typography/density) */
@use 'styles/material-theme';
@use './styles/material-theme' as *;  /* <- this loads the Angular Material theme */
@use './styles/utilities' as *;
@use './styles/badges' as *;
@use './styles/chips' as *;
@use './styles/forms' as *;
@use './styles/toasts' as *;
@use './styles/dialogs' as *;
@use './styles/empty' as *;
@use './styles/grid' as *;


/* ========== TOKENS ========== */
:root, .theme-dark {
  /* Brand */
  --brand-600: #2A76B7;   /* Medtik blue */
  --brand-500: #3B8BD3;
  --brand-700: #155289;
  --accent-500: #1DB7A0;  /* Teal */

  /* Neutrals / Surfaces */
  --bg: #0E1420;                          /* page background (dark) */
  --surface: rgba(16,24,40,.72);          /* cards */
  --surface-2: rgba(255,255,255,.04);     /* soft surfaces */
  --border: rgba(255,255,255,.08);

  /* Text */
  --text: #E6EEF6;
  --muted: #A7B4C5;

  /* Semantic */
  --success: #22c55e;  /* green-500 */
  --warning: #f59e0b;  /* amber-500 */
  --error:   #ef4444;  /* red-500 */
  --info:    #60a5fa;  /* blue-400 */

  /* Type & rhythm */
  --font-sans: 'Inter', 'Cairo', ui-sans-serif, system-ui, -apple-system,
               Segoe UI, Roboto, Arial, 'Noto Sans Arabic', sans-serif;
  --fs-xs: 12px; --fs-sm: 13px; --fs-md: 14.5px; --fs-lg: 16px;
  --fs-xl: 18px; --fs-2xl: 22px;
  --lh-tight: 1.2; --lh-normal: 1.5;

  /* Spacing */
  --sp-2: 2px; --sp-4: 4px; --sp-6: 6px; --sp-8: 8px; --sp-12: 12px;
  --sp-16: 16px; --sp-20: 20px; --sp-24: 24px; --sp-32: 32px;
  --sp-40: 40px; --sp-56: 56px;

  /* Radius */
  --radius-xs: 6px; --radius-sm: 10px; --radius-md: 14px;
  --radius-lg: 20px; --radius-xl: 24px; --radius-pill: 999px;

  /* Shadows tuned for dark */
  --shadow-sm: 0 6px 16px rgba(0,0,0,.30);
  --shadow:    0 20px 60px rgba(0,0,0,.45);
  --shadow-lg: 0 30px 80px rgba(0,0,0,.55);

  /* Motion */
  --dur-1: 120ms; --dur-2: 180ms; --dur-3: 260ms; --dur-4: 360ms;
  --ease: cubic-bezier(.2,.8,.2,1);
  --ease-out: cubic-bezier(0,0,.2,1);
  --ease-in: cubic-bezier(.4,0,1,1);

  /* Layout */
  --container: 1200px;
  --z-drawer: 1000; --z-modal: 1100; --z-toast: 1200;
}

/* Optional light mode (add class="theme-light" on <body> to preview) */
.theme-light {
  --bg: #f7fbff;
  --surface: #ffffff;
  --surface-2: #f3f6fb;
  --border: rgba(0,0,0,.08);
  --text: #0b1220;
  --muted: #4b5563;

  --shadow-sm: 0 8px 20px rgba(0,0,0,.10);
  --shadow:    0 20px 60px rgba(0,0,0,.12);
  --shadow-lg: 0 30px 80px rgba(0,0,0,.16);
}

/* ========== BASE (keeps your same aurora page bg) ========== */
html, body {
  height: 100%;
  font-family: var(--font-sans);
  color: var(--text);
  /* Aurora background that matches what you already use */
  background:
    radial-gradient(120% 80% at 50% 0, rgba(42,118,183,.12), transparent 60%),
    radial-gradient(100% 60% at 100% 0, rgba(29,183,160,.10), transparent 50%),
    var(--bg);
}

/* Reset-ish */
* { box-sizing: border-box; }
a { color: var(--brand-500); text-decoration: none; }
a:hover { color: var(--text); }

/* ========== UTILITIES / PRIMITIVES ========== */

/* Card primitive (used by dashboards & stubs) */
.card {
  background: var(--surface);
  border: 1px solid var(--border);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow);
  padding: 1rem;
}

/* Muted text */
.muted { color: var(--muted); }

/* Focus ring (apply via .ring or data attribute for a11y) */
.ring, [data-ring] {
  outline: none;
}
.ring:focus-visible, [data-ring]:focus-visible {
  outline: 2px solid var(--brand-500);
  outline-offset: 2px;
}

/* Buttons (if/when you need a non-Material button) */
.btn {
  display: inline-flex; align-items: center; gap: .5rem;
  height: 40px; padding: 0 .9rem; border-radius: 12px;
  border: 1px solid transparent; cursor: pointer; user-select: none;
  transition: background var(--dur-2) var(--ease), border-color var(--dur-2) var(--ease),
              box-shadow var(--dur-2) var(--ease), transform var(--dur-1) var(--ease);
}
.btn:active { transform: translateY(1px); }

/* Variants */
.btn--primary {
  background: var(--brand-600); color: white;
  box-shadow: 0 10px 30px rgba(42,118,183,.35);
}
.btn--primary:hover { background: var(--brand-500); }
.btn--stroked {
  background: transparent; color: var(--text); border-color: var(--border);
}
.btn--ghost {
  background: var(--surface-2); color: var(--text);
  border-color: transparent;
}

/* Density helpers */
.is-sm { height: 32px; padding: 0 .65rem; border-radius: 10px; }
.is-lg { height: 48px; padding: 0 1.1rem; border-radius: 14px; }

/* List row & active styles (used by sidenavs) */
.nav-active {
  background: rgba(255,255,255,.04);
  border-left: 3px solid rgba(42,118,183,.7);
}

/* Skeletons */
.skeleton {
  border-radius: 10px;
  background: linear-gradient(90deg, rgba(255,255,255,.06), rgba(255,255,255,.10), rgba(255,255,255,.06));
  background-size: 200% 100%;
  animation: shimmer 1.2s infinite;
}
@keyframes shimmer {
  from { background-position: 200% 0; }
  to   { background-position: 0 0; }
}

/* Tables (generic) */
.table {
  width: 100%;
  border-collapse: collapse;
}
.table th, .table td {
  padding: .75rem .9rem;
  border-bottom: 1px solid var(--border);
}
.table tr:hover { background: rgba(255,255,255,.03); }

/* Container helper */
.container { max-width: var(--container); margin: 0 auto; padding: 0 var(--sp-16); }

/* Make the dialog surface solid and visible */
.medtik-dialog .mat-mdc-dialog-surface {
  background: rgba(12,16,24,.98) !important;
  border: 1px solid rgba(255,255,255,.07);
  backdrop-filter: none !important;
}

/* Backdrop is a sibling overlay; target it globally */
.cdk-overlay-backdrop {
  backdrop-filter: none !important;         /* keep your choice */
  background: rgba(0,0,0,.48);              /* ensure it’s visible */
}

/* Safety: make sure overlays sit above the app */
.cdk-overlay-container { z-index: 1000; }

/* Keep Material overlays above the app chrome */
.cdk-overlay-container,
.cdk-global-overlay-wrapper {
  z-index: 10000 !important;
}

/* Ensure the backdrop is actually visible with dark themes */
.cdk-overlay-backdrop.cdk-overlay-backdrop-showing {
  background: rgba(0, 0, 0, .6) !important;
}

/* Your solid dialog skin (you already had something similar) */
.medtik-dialog .mdc-dialog__surface {
  background: rgba(12,16,24,.98) !important;
  border: 1px solid rgba(255,255,255,.07);
}



===== FILE: C:\Users\ROCKET\medtik\src\styles\_badges.scss =====

/* Badges & status dots (used in lists, tables, cards) */
.badge {
  display: inline-flex; align-items: center; gap: .4rem;
  font-size: var(--fs-sm); line-height: 1; font-weight: 600;
  padding: .35rem .55rem; border-radius: var(--radius-pill);
  border: 1px solid var(--border);
  background: var(--surface-2); color: var(--text);
  white-space: nowrap;
}

.badge--brand   { border-color: rgba(42,118,183,.35); background: rgba(42,118,183,.15); color:#cfe7ff; }
.badge--success { border-color: rgba(34,197,94,.35);  background: rgba(34,197,94,.15);  color:#d6f5e2; }
.badge--warn    { border-color: rgba(245,158,11,.35); background: rgba(245,158,11,.15); color:#ffe9c7; }
.badge--error   { border-color: rgba(239,68,68,.35);  background: rgba(239,68,68,.15);  color:#ffd2d2; }
.badge--info    { border-color: rgba(96,165,250,.35); background: rgba(96,165,250,.15); color:#dbe9ff; }

.badge .dot{
  width: .5rem; height: .5rem; border-radius: 50%; background: currentColor;
}

/* Status dot inline (e.g., user avatar) */
.status {
  display: inline-flex; align-items: center; gap: .4rem;
}
.status::before{
  content:''; width:.5rem; height:.5rem; border-radius:50%;
  background: var(--muted);
}
.status--online::before { background: var(--success); }
.status--busy::before   { background: #f43f5e; } /* rose-500 */
.status--away::before   { background: #f59e0b; }



===== FILE: C:\Users\ROCKET\medtik\src\styles\_chips.scss =====

/* Simple chips/tags (use when you don't need MatChips) */
.chip {
  display: inline-flex; align-items: center; gap: .4rem;
  padding: .35rem .5rem; border-radius: var(--radius-pill);
  background: var(--surface-2); color: var(--text); border: 1px solid var(--border);
  font-size: var(--fs-sm);
}
.chip--ghost { background: transparent; }
.chip--brand { background: rgba(42,118,183,.15); border-color: rgba(42,118,183,.35); color: #cfe7ff; }



===== FILE: C:\Users\ROCKET\medtik\src\styles\_dialogs.scss =====

/* MatDialog & MatDrawer polish */
.mat-mdc-dialog-container .mdc-dialog__surface {
  background: var(--surface);
  border: 1px solid var(--border);
  border-radius: var(--radius-xl);
  box-shadow: var(--shadow-lg);
}

.mat-drawer-container { background: transparent; }
.mat-drawer {
  background: var(--surface);
  border-right: 1px solid var(--border);
}



===== FILE: C:\Users\ROCKET\medtik\src\styles\_empty.scss =====

/* Empty state block */
.empty {
  text-align: center; padding: 2rem 1rem;
  border: 1px dashed var(--border); border-radius: var(--radius-lg);
  background: var(--surface-2);
}
.empty .icon { font-size: 40px; display:block; margin: 0 auto .5rem; color: #8fc7ff; }
.empty .title { font-weight: 800; margin: 0 0 .25rem; }
.empty .sub { color: var(--muted); margin: 0 0 .75rem; }



===== FILE: C:\Users\ROCKET\medtik\src\styles\_forms.scss =====

/* Global polish for Angular Material form fields */
@layer medtik-forms {
  :root{
    --field-bg: rgba(255,255,255,.04);
    --field-bg-hover: rgba(255,255,255,.06);
    --field-border: rgba(255,255,255,.10);
    --field-border-focus: rgba(99,179,237,.85);
  }

  .mat-mdc-form-field{ width:100%; }

  /* Size / spacing */
  .mat-mdc-form-field .mat-mdc-form-field-infix{ padding:.675rem .875rem; }
  .mdc-text-field--outlined{ height:44px; align-items:center; }
  .mat-mdc-form-field-subscript-wrapper{ margin-top:.25rem; }

  /* Background + borders (outline) */
  .mat-mdc-form-field-appearance-outline .mdc-notched-outline__leading,
  .mat-mdc-form-field-appearance-outline .mdc-notched-outline__notch,
  .mat-mdc-form-field-appearance-outline .mdc-notched-outline__trailing{
    border-color: var(--field-border);
  }
  .mat-mdc-form-field-appearance-outline .mdc-notched-outline__leading,
  .mat-mdc-form-field-appearance-outline .mdc-notched-outline__notch,
  .mat-mdc-form-field-appearance-outline .mdc-notched-outline__trailing{
    background: var(--field-bg);
    transition: background .2s ease, border-color .2s ease, box-shadow .2s ease;
    border-radius: 12px;
  }
  .mat-mdc-form-field:hover .mdc-notched-outline__leading,
  .mat-mdc-form-field:hover .mdc-notched-outline__notch,
  .mat-mdc-form-field:hover .mdc-notched-outline__trailing{
    background: var(--field-bg-hover);
  }
  .mat-mdc-form-field.mat-focused .mdc-notched-outline__leading,
  .mat-mdc-form-field.mat-focused .mdc-notched-outline__notch,
  .mat-mdc-form-field.mat-focused .mdc-notched-outline__trailing{
    border-color: var(--field-border-focus);
    box-shadow: 0 0 0 3px rgba(56,189,248,.15);
  }

  .mat-mdc-input-element{ color: var(--text); }
  .mat-mdc-form-field .mat-mdc-icon-prefix,
  .mat-mdc-form-field .mat-mdc-icon-suffix{ color: var(--muted); opacity:.9; }

  /* Hide number spinners for a cleaner look */
  input[type=number]::-webkit-outer-spin-button,
  input[type=number]::-webkit-inner-spin-button{ -webkit-appearance:none; margin:0; }
  input[type=number]{ -moz-appearance:textfield; }
}



===== FILE: C:\Users\ROCKET\medtik\src\styles\_grid.scss =====

/* Simple responsive grid helpers */
.grid-12 { display: grid; gap: 1rem; grid-template-columns: repeat(12, 1fr); }
.span-12{ grid-column: span 12; }
.span-6 { grid-column: span 6; }
.span-4 { grid-column: span 4; }
.span-3 { grid-column: span 3; }

@media (max-width: 1200px){
  .span-md-12{ grid-column: span 12; }
  .span-md-6 { grid-column: span 6; }
}
@media (max-width: 600px){
  .grid-12 { grid-template-columns: 1fr; }
  .span-sm-12{ grid-column: span 12; }
}



===== FILE: C:\Users\ROCKET\medtik\src\styles\_material-theme.scss =====

/* Angular Material theming for Angular 18+ (M2 API) */
@use '@angular/material' as mat;

@include mat.core();

/* Palettes (M2) */
$medtik-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500, 600, 700);
$medtik-accent:  mat.m2-define-palette(mat.$m2-teal-palette,   500, 600, 700);
$medtik-warn:    mat.m2-define-palette(mat.$m2-red-palette,    500);

/* Dark theme (default) */
$medtik-dark-theme: mat.m2-define-dark-theme((
  color: (
    primary: $medtik-primary,
    accent:  $medtik-accent,
    warn:    $medtik-warn,
  ),
));

/* Optional light theme */
$medtik-light-theme: mat.m2-define-light-theme((
  color: (
    primary: $medtik-primary,
    accent:  $medtik-accent,
    warn:    $medtik-warn,
  ),
));

/* Apply themes */
:root, .theme-dark {
  @include mat.all-component-themes($medtik-dark-theme);
}
.theme-light {
  @include mat.all-component-themes($medtik-light-theme);
}

/* Match cards to your tokens */
.mat-mdc-card {
  background: var(--surface);
  border: 1px solid var(--border);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow);
}



===== FILE: C:\Users\ROCKET\medtik\src\styles\_toasts.scss =====

/* Snackbars (MatSnackBar) — variants via panelClass */
.mat-mdc-snack-bar-container {
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow);
  border: 1px solid var(--border);
  background: var(--surface);
  color: var(--text);
}

/* Variant helpers */
.toast--success .mat-mdc-snack-bar-container { background: color-mix(in oklab, var(--success) 22%, var(--surface) 78%); }
.toast--error   .mat-mdc-snack-bar-container { background: color-mix(in oklab, var(--error)   22%, var(--surface) 78%); }
.toast--warn    .mat-mdc-snack-bar-container { background: color-mix(in oklab, var(--warning) 22%, var(--surface) 78%); }
.toast--info    .mat-mdc-snack-bar-container { background: color-mix(in oklab, var(--info)    22%, var(--surface) 78%); }

/* Action button */
.mat-mdc-snack-bar-action { color: #fff; text-transform: none; font-weight: 700; }



===== FILE: C:\Users\ROCKET\medtik\src\styles\_utilities.scss =====

/* Small, composable helpers shared across app */
:root {
  --ring-color: var(--brand-500);
  --ring-offset: 2px;
}

/* Focus ring for a11y */
.ring, [data-ring] {
  outline: none;
}
.ring:focus-visible, [data-ring]:focus-visible {
  outline: 2px solid var(--ring-color);
  outline-offset: var(--ring-offset);
}

/* Shadows */
.shadow-sm { box-shadow: var(--shadow-sm); }
.shadow    { box-shadow: var(--shadow); }
.shadow-lg { box-shadow: var(--shadow-lg); }

/* Text */
.text-muted { color: var(--muted); }
.text-brand { color: var(--brand-500); }

/* Radius */
.rounded   { border-radius: var(--radius-md); }
.rounded-lg{ border-radius: var(--radius-lg); }
.rounded-xl{ border-radius: var(--radius-xl); }

/* Spacing (a few useful ones) */
.mt-1{ margin-top: .25rem; } .mt-2{ margin-top: .5rem; } .mt-3{ margin-top: .75rem; }
.mb-1{ margin-bottom: .25rem; } .mb-2{ margin-bottom: .5rem; } .mb-3{ margin-bottom: .75rem; }

/* Hide on desktop / mobile */
.hide-desktop { display: none; }
@media (max-width: 960px){ .hide-desktop { display: inline-flex; } }



