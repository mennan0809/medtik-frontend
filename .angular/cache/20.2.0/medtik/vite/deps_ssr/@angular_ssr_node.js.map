{
  "version": 3,
  "sources": ["../../../../../../node_modules/@angular/ssr/fesm2022/node.mjs"],
  "sourcesContent": ["import { renderApplication, renderModule, ɵSERVER_CONTEXT as _SERVER_CONTEXT } from '@angular/platform-server';\r\nimport * as fs from 'node:fs';\r\nimport { dirname, join, normalize, resolve } from 'node:path';\r\nimport { URL as URL$1, fileURLToPath } from 'node:url';\r\nimport { ɵInlineCriticalCssProcessor as _InlineCriticalCssProcessor, AngularAppEngine } from '@angular/ssr';\r\nimport { readFile } from 'node:fs/promises';\r\nimport { argv } from 'node:process';\r\n\r\n/**\r\n * Attaches listeners to the Node.js process to capture and handle unhandled rejections and uncaught exceptions.\r\n * Captured errors are logged to the console. This function logs errors to the console, preventing unhandled errors\r\n * from crashing the server. It is particularly useful for Zoneless apps, ensuring error handling without relying on Zone.js.\r\n *\r\n * @remarks\r\n * This function is a no-op if zone.js is available.\r\n * For Zone-based apps, similar functionality is provided by Zone.js itself. See the Zone.js implementation here:\r\n * https://github.com/angular/angular/blob/4a8d0b79001ec09bcd6f2d6b15117aa6aac1932c/packages/zone.js/lib/node/node.ts#L94%7C\r\n *\r\n * @internal\r\n */\r\nfunction attachNodeGlobalErrorHandlers() {\r\n    if (typeof Zone !== 'undefined') {\r\n        return;\r\n    }\r\n    // Ensure that the listeners are registered only once.\r\n    // Otherwise, multiple instances may be registered during edit/refresh.\r\n    const gThis = globalThis;\r\n    if (gThis.ngAttachNodeGlobalErrorHandlersCalled) {\r\n        return;\r\n    }\r\n    gThis.ngAttachNodeGlobalErrorHandlersCalled = true;\r\n    process\r\n        // eslint-disable-next-line no-console\r\n        .on('unhandledRejection', (error) => console.error('unhandledRejection', error))\r\n        // eslint-disable-next-line no-console\r\n        .on('uncaughtException', (error) => console.error('uncaughtException', error));\r\n}\r\n\r\nclass CommonEngineInlineCriticalCssProcessor {\r\n    resourceCache = new Map();\r\n    async process(html, outputPath) {\r\n        const beasties = new _InlineCriticalCssProcessor(async (path) => {\r\n            let resourceContent = this.resourceCache.get(path);\r\n            if (resourceContent === undefined) {\r\n                resourceContent = await readFile(path, 'utf-8');\r\n                this.resourceCache.set(path, resourceContent);\r\n            }\r\n            return resourceContent;\r\n        }, outputPath);\r\n        return beasties.process(html);\r\n    }\r\n}\r\n\r\nconst PERFORMANCE_MARK_PREFIX = '🅰️';\r\nfunction printPerformanceLogs() {\r\n    let maxWordLength = 0;\r\n    const benchmarks = [];\r\n    for (const { name, duration } of performance.getEntriesByType('measure')) {\r\n        if (!name.startsWith(PERFORMANCE_MARK_PREFIX)) {\r\n            continue;\r\n        }\r\n        // `🅰️:Retrieve SSG Page` -> `Retrieve SSG Page:`\r\n        const step = name.slice(PERFORMANCE_MARK_PREFIX.length + 1) + ':';\r\n        if (step.length > maxWordLength) {\r\n            maxWordLength = step.length;\r\n        }\r\n        benchmarks.push([step, `${duration.toFixed(1)}ms`]);\r\n        performance.clearMeasures(name);\r\n    }\r\n    /* eslint-disable no-console */\r\n    console.log('********** Performance results **********');\r\n    for (const [step, value] of benchmarks) {\r\n        const spaces = maxWordLength - step.length + 5;\r\n        console.log(step + ' '.repeat(spaces) + value);\r\n    }\r\n    console.log('*****************************************');\r\n    /* eslint-enable no-console */\r\n}\r\nasync function runMethodAndMeasurePerf(label, asyncMethod) {\r\n    const labelName = `${PERFORMANCE_MARK_PREFIX}:${label}`;\r\n    const startLabel = `start:${labelName}`;\r\n    const endLabel = `end:${labelName}`;\r\n    try {\r\n        performance.mark(startLabel);\r\n        return await asyncMethod();\r\n    }\r\n    finally {\r\n        performance.mark(endLabel);\r\n        performance.measure(labelName, startLabel, endLabel);\r\n        performance.clearMarks(startLabel);\r\n        performance.clearMarks(endLabel);\r\n    }\r\n}\r\nfunction noopRunMethodAndMeasurePerf(label, asyncMethod) {\r\n    return asyncMethod();\r\n}\r\n\r\nconst SSG_MARKER_REGEXP = /ng-server-context=[\"']\\w*\\|?ssg\\|?\\w*[\"']/;\r\n/**\r\n * A common engine to use to server render an application.\r\n */\r\nclass CommonEngine {\r\n    options;\r\n    templateCache = new Map();\r\n    inlineCriticalCssProcessor = new CommonEngineInlineCriticalCssProcessor();\r\n    pageIsSSG = new Map();\r\n    constructor(options) {\r\n        this.options = options;\r\n        attachNodeGlobalErrorHandlers();\r\n    }\r\n    /**\r\n     * Render an HTML document for a specific URL with specified\r\n     * render options\r\n     */\r\n    async render(opts) {\r\n        const enablePerformanceProfiler = this.options?.enablePerformanceProfiler;\r\n        const runMethod = enablePerformanceProfiler\r\n            ? runMethodAndMeasurePerf\r\n            : noopRunMethodAndMeasurePerf;\r\n        let html = await runMethod('Retrieve SSG Page', () => this.retrieveSSGPage(opts));\r\n        if (html === undefined) {\r\n            html = await runMethod('Render Page', () => this.renderApplication(opts));\r\n            if (opts.inlineCriticalCss !== false) {\r\n                const content = await runMethod('Inline Critical CSS', () => \r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                this.inlineCriticalCss(html, opts));\r\n                html = content;\r\n            }\r\n        }\r\n        if (enablePerformanceProfiler) {\r\n            printPerformanceLogs();\r\n        }\r\n        return html;\r\n    }\r\n    inlineCriticalCss(html, opts) {\r\n        const outputPath = opts.publicPath ?? (opts.documentFilePath ? dirname(opts.documentFilePath) : '');\r\n        return this.inlineCriticalCssProcessor.process(html, outputPath);\r\n    }\r\n    async retrieveSSGPage(opts) {\r\n        const { publicPath, documentFilePath, url } = opts;\r\n        if (!publicPath || !documentFilePath || url === undefined) {\r\n            return undefined;\r\n        }\r\n        const { pathname } = new URL$1(url, 'resolve://');\r\n        // Do not use `resolve` here as otherwise it can lead to path traversal vulnerability.\r\n        // See: https://portswigger.net/web-security/file-path-traversal\r\n        const pagePath = join(publicPath, pathname, 'index.html');\r\n        if (this.pageIsSSG.get(pagePath)) {\r\n            // Serve pre-rendered page.\r\n            return fs.promises.readFile(pagePath, 'utf-8');\r\n        }\r\n        if (!pagePath.startsWith(normalize(publicPath))) {\r\n            // Potential path traversal detected.\r\n            return undefined;\r\n        }\r\n        if (pagePath === resolve(documentFilePath) || !(await exists(pagePath))) {\r\n            // View matches with prerender path or file does not exist.\r\n            this.pageIsSSG.set(pagePath, false);\r\n            return undefined;\r\n        }\r\n        // Static file exists.\r\n        const content = await fs.promises.readFile(pagePath, 'utf-8');\r\n        const isSSG = SSG_MARKER_REGEXP.test(content);\r\n        this.pageIsSSG.set(pagePath, isSSG);\r\n        return isSSG ? content : undefined;\r\n    }\r\n    async renderApplication(opts) {\r\n        const moduleOrFactory = this.options?.bootstrap ?? opts.bootstrap;\r\n        if (!moduleOrFactory) {\r\n            throw new Error('A module or bootstrap option must be provided.');\r\n        }\r\n        const extraProviders = [\r\n            { provide: _SERVER_CONTEXT, useValue: 'ssr' },\r\n            ...(opts.providers ?? []),\r\n            ...(this.options?.providers ?? []),\r\n        ];\r\n        let document = opts.document;\r\n        if (!document && opts.documentFilePath) {\r\n            document = await this.getDocument(opts.documentFilePath);\r\n        }\r\n        const commonRenderingOptions = {\r\n            url: opts.url,\r\n            document,\r\n        };\r\n        return isBootstrapFn(moduleOrFactory)\r\n            ? renderApplication(moduleOrFactory, {\r\n                platformProviders: extraProviders,\r\n                ...commonRenderingOptions,\r\n            })\r\n            : renderModule(moduleOrFactory, { extraProviders, ...commonRenderingOptions });\r\n    }\r\n    /** Retrieve the document from the cache or the filesystem */\r\n    async getDocument(filePath) {\r\n        let doc = this.templateCache.get(filePath);\r\n        if (!doc) {\r\n            doc = await fs.promises.readFile(filePath, 'utf-8');\r\n            this.templateCache.set(filePath, doc);\r\n        }\r\n        return doc;\r\n    }\r\n}\r\nasync function exists(path) {\r\n    try {\r\n        await fs.promises.access(path, fs.constants.F_OK);\r\n        return true;\r\n    }\r\n    catch {\r\n        return false;\r\n    }\r\n}\r\nfunction isBootstrapFn(value) {\r\n    // We can differentiate between a module and a bootstrap function by reading compiler-generated `ɵmod` static property:\r\n    return typeof value === 'function' && !('ɵmod' in value);\r\n}\r\n\r\n/**\r\n * A set containing all the pseudo-headers defined in the HTTP/2 specification.\r\n *\r\n * This set can be used to filter out pseudo-headers from a list of headers,\r\n * as they are not allowed to be set directly using the `Node.js` Undici API or\r\n * the web `Headers` API.\r\n */\r\nconst HTTP2_PSEUDO_HEADERS = new Set([':method', ':scheme', ':authority', ':path', ':status']);\r\n/**\r\n * Converts a Node.js `IncomingMessage` or `Http2ServerRequest` into a\r\n * Web Standard `Request` object.\r\n *\r\n * This function adapts the Node.js request objects to a format that can\r\n * be used by web platform APIs.\r\n *\r\n * @param nodeRequest - The Node.js request object (`IncomingMessage` or `Http2ServerRequest`) to convert.\r\n * @returns A Web Standard `Request` object.\r\n */\r\nfunction createWebRequestFromNodeRequest(nodeRequest) {\r\n    const { headers, method = 'GET' } = nodeRequest;\r\n    const withBody = method !== 'GET' && method !== 'HEAD';\r\n    const referrer = headers.referer && URL.canParse(headers.referer) ? headers.referer : undefined;\r\n    return new Request(createRequestUrl(nodeRequest), {\r\n        method,\r\n        headers: createRequestHeaders(headers),\r\n        body: withBody ? nodeRequest : undefined,\r\n        duplex: withBody ? 'half' : undefined,\r\n        referrer,\r\n    });\r\n}\r\n/**\r\n * Creates a `Headers` object from Node.js `IncomingHttpHeaders`.\r\n *\r\n * @param nodeHeaders - The Node.js `IncomingHttpHeaders` object to convert.\r\n * @returns A `Headers` object containing the converted headers.\r\n */\r\nfunction createRequestHeaders(nodeHeaders) {\r\n    const headers = new Headers();\r\n    for (const [name, value] of Object.entries(nodeHeaders)) {\r\n        if (HTTP2_PSEUDO_HEADERS.has(name)) {\r\n            continue;\r\n        }\r\n        if (typeof value === 'string') {\r\n            headers.append(name, value);\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            for (const item of value) {\r\n                headers.append(name, item);\r\n            }\r\n        }\r\n    }\r\n    return headers;\r\n}\r\n/**\r\n * Creates a `URL` object from a Node.js `IncomingMessage`, taking into account the protocol, host, and port.\r\n *\r\n * @param nodeRequest - The Node.js `IncomingMessage` or `Http2ServerRequest` object to extract URL information from.\r\n * @returns A `URL` object representing the request URL.\r\n */\r\nfunction createRequestUrl(nodeRequest) {\r\n    const { headers, socket, url = '', originalUrl, } = nodeRequest;\r\n    const protocol = getFirstHeaderValue(headers['x-forwarded-proto']) ??\r\n        ('encrypted' in socket && socket.encrypted ? 'https' : 'http');\r\n    const hostname = getFirstHeaderValue(headers['x-forwarded-host']) ?? headers.host ?? headers[':authority'];\r\n    if (Array.isArray(hostname)) {\r\n        throw new Error('host value cannot be an array.');\r\n    }\r\n    let hostnameWithPort = hostname;\r\n    if (!hostname?.includes(':')) {\r\n        const port = getFirstHeaderValue(headers['x-forwarded-port']);\r\n        if (port) {\r\n            hostnameWithPort += `:${port}`;\r\n        }\r\n    }\r\n    return new URL(originalUrl ?? url, `${protocol}://${hostnameWithPort}`);\r\n}\r\n/**\r\n * Extracts the first value from a multi-value header string.\r\n *\r\n * @param value - A string or an array of strings representing the header values.\r\n *                           If it's a string, values are expected to be comma-separated.\r\n * @returns The first trimmed value from the multi-value header, or `undefined` if the input is invalid or empty.\r\n *\r\n * @example\r\n * ```typescript\r\n * getFirstHeaderValue(\"value1, value2, value3\"); // \"value1\"\r\n * getFirstHeaderValue([\"value1\", \"value2\"]); // \"value1\"\r\n * getFirstHeaderValue(undefined); // undefined\r\n * ```\r\n */\r\nfunction getFirstHeaderValue(value) {\r\n    return value?.toString().split(',', 1)[0]?.trim();\r\n}\r\n\r\n/**\r\n * Angular server application engine.\r\n * Manages Angular server applications (including localized ones), handles rendering requests,\r\n * and optionally transforms index HTML before rendering.\r\n *\r\n * @remarks This class should be instantiated once and used as a singleton across the server-side\r\n * application to ensure consistent handling of rendering requests and resource management.\r\n */\r\nclass AngularNodeAppEngine {\r\n    angularAppEngine = new AngularAppEngine();\r\n    constructor() {\r\n        attachNodeGlobalErrorHandlers();\r\n    }\r\n    /**\r\n     * Handles an incoming HTTP request by serving prerendered content, performing server-side rendering,\r\n     * or delivering a static file for client-side rendered routes based on the `RenderMode` setting.\r\n     *\r\n     * This method adapts Node.js's `IncomingMessage` or `Http2ServerRequest`\r\n     * to a format compatible with the `AngularAppEngine` and delegates the handling logic to it.\r\n     *\r\n     * @param request - The incoming HTTP request (`IncomingMessage` or `Http2ServerRequest`).\r\n     * @param requestContext - Optional context for rendering, such as metadata associated with the request.\r\n     * @returns A promise that resolves to the resulting HTTP response object, or `null` if no matching Angular route is found.\r\n     *\r\n     * @remarks A request to `https://www.example.com/page/index.html` will serve or render the Angular route\r\n     * corresponding to `https://www.example.com/page`.\r\n     */\r\n    async handle(request, requestContext) {\r\n        const webRequest = createWebRequestFromNodeRequest(request);\r\n        return this.angularAppEngine.handle(webRequest, requestContext);\r\n    }\r\n}\r\n\r\n/**\r\n * Attaches metadata to the handler function to mark it as a special handler for Node.js environments.\r\n *\r\n * @typeParam T - The type of the handler function.\r\n * @param handler - The handler function to be defined and annotated.\r\n * @returns The same handler function passed as an argument, with metadata attached.\r\n *\r\n * @example\r\n * Usage in an Express application:\r\n * ```ts\r\n * const app = express();\r\n * export default createNodeRequestHandler(app);\r\n * ```\r\n *\r\n * @example\r\n * Usage in a Hono application:\r\n * ```ts\r\n * const app = new Hono();\r\n * export default createNodeRequestHandler(async (req, res, next) => {\r\n *   try {\r\n *     const webRes = await app.fetch(createWebRequestFromNodeRequest(req));\r\n *     if (webRes) {\r\n *       await writeResponseToNodeResponse(webRes, res);\r\n *     } else {\r\n *       next();\r\n *     }\r\n *   } catch (error) {\r\n *     next(error);\r\n *   }\r\n * }));\r\n * ```\r\n *\r\n * @example\r\n * Usage in a Fastify application:\r\n * ```ts\r\n * const app = Fastify();\r\n * export default createNodeRequestHandler(async (req, res) => {\r\n *   await app.ready();\r\n *   app.server.emit('request', req, res);\r\n *   res.send('Hello from Fastify with Node Next Handler!');\r\n * }));\r\n * ```\r\n */\r\nfunction createNodeRequestHandler(handler) {\r\n    handler['__ng_node_request_handler__'] = true;\r\n    return handler;\r\n}\r\n\r\n/**\r\n * Streams a web-standard `Response` into a Node.js `ServerResponse`\r\n * or `Http2ServerResponse`.\r\n *\r\n * This function adapts the web `Response` object to write its content\r\n * to a Node.js response object, handling both HTTP/1.1 and HTTP/2.\r\n *\r\n * @param source - The web-standard `Response` object to stream from.\r\n * @param destination - The Node.js response object (`ServerResponse` or `Http2ServerResponse`) to stream into.\r\n * @returns A promise that resolves once the streaming operation is complete.\r\n */\r\nasync function writeResponseToNodeResponse(source, destination) {\r\n    const { status, headers, body } = source;\r\n    destination.statusCode = status;\r\n    let cookieHeaderSet = false;\r\n    for (const [name, value] of headers.entries()) {\r\n        if (name === 'set-cookie') {\r\n            if (cookieHeaderSet) {\r\n                continue;\r\n            }\r\n            // Sets the 'set-cookie' header only once to ensure it is correctly applied.\r\n            // Concatenating 'set-cookie' values can lead to incorrect behavior, so we use a single value from `headers.getSetCookie()`.\r\n            destination.setHeader(name, headers.getSetCookie());\r\n            cookieHeaderSet = true;\r\n        }\r\n        else {\r\n            destination.setHeader(name, value);\r\n        }\r\n    }\r\n    if ('flushHeaders' in destination) {\r\n        destination.flushHeaders();\r\n    }\r\n    if (!body) {\r\n        destination.end();\r\n        return;\r\n    }\r\n    try {\r\n        const reader = body.getReader();\r\n        destination.on('close', () => {\r\n            reader.cancel().catch((error) => {\r\n                // eslint-disable-next-line no-console\r\n                console.error(`An error occurred while writing the response body for: ${destination.req.url}.`, error);\r\n            });\r\n        });\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n            const { done, value } = await reader.read();\r\n            if (done) {\r\n                destination.end();\r\n                break;\r\n            }\r\n            const canContinue = destination.write(value);\r\n            if (canContinue === false) {\r\n                // Explicitly check for `false`, as AWS may return `undefined` even though this is not valid.\r\n                // See: https://github.com/CodeGenieApp/serverless-express/issues/683\r\n                await new Promise((resolve) => destination.once('drain', resolve));\r\n            }\r\n        }\r\n    }\r\n    catch {\r\n        destination.end('Internal server error.');\r\n    }\r\n}\r\n\r\n/**\r\n * Determines whether the provided URL represents the main entry point module.\r\n *\r\n * This function checks if the provided URL corresponds to the main ESM module being executed directly.\r\n * It's useful for conditionally executing code that should only run when a module is the entry point,\r\n * such as starting a server or initializing an application.\r\n *\r\n * It performs two key checks:\r\n * 1. Verifies if the URL starts with 'file:', ensuring it is a local file.\r\n * 2. Compares the URL's resolved file path with the first command-line argument (`process.argv[1]`),\r\n *    which points to the file being executed.\r\n *\r\n * @param url The URL of the module to check. This should typically be `import.meta.url`.\r\n * @returns `true` if the provided URL represents the main entry point, otherwise `false`.\r\n */\r\nfunction isMainModule(url) {\r\n    return url.startsWith('file:') && argv[1] === fileURLToPath(url);\r\n}\r\n\r\nexport { AngularNodeAppEngine, CommonEngine, createNodeRequestHandler, createWebRequestFromNodeRequest, isMainModule, writeResponseToNodeResponse };\r\n\r\n"],
  "mappings": "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",
  "names": ["resolve"]
}
