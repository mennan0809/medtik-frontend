{
  "version": 3,
  "sources": ["../../../../../../node_modules/@angular/cdk/fesm2022/data-source.mjs", "../../../../../../node_modules/@angular/cdk/fesm2022/recycle-view-repeater-strategy.mjs"],
  "sourcesContent": ["import { ConnectableObservable } from 'rxjs';\r\n\r\nclass DataSource {\r\n}\r\n/** Checks whether an object is a data source. */\r\nfunction isDataSource(value) {\r\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\r\n    // be checked as an `instanceof DataSource` since people could create their own sources\r\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\r\n    // here, because of some internal apps.\r\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\r\n}\r\n\r\nexport { DataSource, isDataSource };\r\n\r\n", "import { isObservable, of } from 'rxjs';\r\nimport { DataSource } from './data-source.mjs';\r\nimport { InjectionToken } from '@angular/core';\r\n\r\n/** DataSource wrapper for a native array. */\r\nclass ArrayDataSource extends DataSource {\r\n    _data;\r\n    constructor(_data) {\r\n        super();\r\n        this._data = _data;\r\n    }\r\n    connect() {\r\n        return isObservable(this._data) ? this._data : of(this._data);\r\n    }\r\n    disconnect() { }\r\n}\r\n\r\n/** Indicates how a view was changed by a `_ViewRepeater`. */\r\nvar _ViewRepeaterOperation;\r\n(function (_ViewRepeaterOperation) {\r\n    /** The content of an existing view was replaced with another item. */\r\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REPLACED\"] = 0] = \"REPLACED\";\r\n    /** A new view was created with `createEmbeddedView`. */\r\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"INSERTED\"] = 1] = \"INSERTED\";\r\n    /** The position of a view changed, but the content remains the same. */\r\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"MOVED\"] = 2] = \"MOVED\";\r\n    /** A view was detached from the view container. */\r\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REMOVED\"] = 3] = \"REMOVED\";\r\n})(_ViewRepeaterOperation || (_ViewRepeaterOperation = {}));\r\n/**\r\n * Injection token for `_ViewRepeater`. This token is for use by Angular Material only.\r\n * @docs-private\r\n */\r\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\r\n\r\n/**\r\n * A repeater that caches views when they are removed from a\r\n * `ViewContainerRef`. When new items are inserted into the container,\r\n * the repeater will reuse one of the cached views instead of creating a new\r\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\r\n * inserts.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\r\nclass _RecycleViewRepeaterStrategy {\r\n    /**\r\n     * The size of the cache used to store unused views.\r\n     * Setting the cache size to `0` will disable caching. Defaults to 20 views.\r\n     */\r\n    viewCacheSize = 20;\r\n    /**\r\n     * View cache that stores embedded view instances that have been previously stamped out,\r\n     * but don't are not currently rendered. The view repeater will reuse these views rather than\r\n     * creating brand new ones.\r\n     *\r\n     * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\r\n     */\r\n    _viewCache = [];\r\n    /** Apply changes to the DOM. */\r\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\r\n        // Rearrange the views to put them in the right location.\r\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\r\n            let view;\r\n            let operation;\r\n            if (record.previousIndex == null) {\r\n                // Item added.\r\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\r\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\r\n                operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\r\n            }\r\n            else if (currentIndex == null) {\r\n                // Item removed.\r\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\r\n                operation = _ViewRepeaterOperation.REMOVED;\r\n            }\r\n            else {\r\n                // Item moved.\r\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\r\n                operation = _ViewRepeaterOperation.MOVED;\r\n            }\r\n            if (itemViewChanged) {\r\n                itemViewChanged({\r\n                    context: view?.context,\r\n                    operation,\r\n                    record,\r\n                });\r\n            }\r\n        });\r\n    }\r\n    detach() {\r\n        for (const view of this._viewCache) {\r\n            view.destroy();\r\n        }\r\n        this._viewCache = [];\r\n    }\r\n    /**\r\n     * Inserts a view for a new item, either from the cache or by creating a new\r\n     * one. Returns `undefined` if the item was inserted into a cached view.\r\n     */\r\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\r\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\r\n        if (cachedView) {\r\n            cachedView.context.$implicit = value;\r\n            return undefined;\r\n        }\r\n        const viewArgs = viewArgsFactory();\r\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\r\n    }\r\n    /** Detaches the view at the given index and inserts into the view cache. */\r\n    _detachAndCacheView(index, viewContainerRef) {\r\n        const detachedView = viewContainerRef.detach(index);\r\n        this._maybeCacheView(detachedView, viewContainerRef);\r\n    }\r\n    /** Moves view at the previous index to the current index. */\r\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\r\n        const view = viewContainerRef.get(adjustedPreviousIndex);\r\n        viewContainerRef.move(view, currentIndex);\r\n        view.context.$implicit = value;\r\n        return view;\r\n    }\r\n    /**\r\n     * Cache the given detached view. If the cache is full, the view will be\r\n     * destroyed.\r\n     */\r\n    _maybeCacheView(view, viewContainerRef) {\r\n        if (this._viewCache.length < this.viewCacheSize) {\r\n            this._viewCache.push(view);\r\n        }\r\n        else {\r\n            const index = viewContainerRef.indexOf(view);\r\n            // The host component could remove views from the container outside of\r\n            // the view repeater. It's unlikely this will occur, but just in case,\r\n            // destroy the view on its own, otherwise destroy it through the\r\n            // container to ensure that all the references are removed.\r\n            if (index === -1) {\r\n                view.destroy();\r\n            }\r\n            else {\r\n                viewContainerRef.remove(index);\r\n            }\r\n        }\r\n    }\r\n    /** Inserts a recycled view from the cache at the given index. */\r\n    _insertViewFromCache(index, viewContainerRef) {\r\n        const cachedView = this._viewCache.pop();\r\n        if (cachedView) {\r\n            viewContainerRef.insert(cachedView, index);\r\n        }\r\n        return cachedView || null;\r\n    }\r\n}\r\n\r\nexport { ArrayDataSource, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, _ViewRepeaterOperation };\r\n\r\n"],
  "mappings": "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",
  "names": ["_ViewRepeaterOperation"]
}
